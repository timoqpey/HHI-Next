/* The copyright in this software is being made available under the BSD
 * License, included below. This software may be subject to other third party
 * and contributor rights, including patent rights, and no such rights are
 * granted under this license.
 *
 * Copyright (c) 2010-2017, ITU/ISO/IEC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *  * Neither the name of the ITU/ISO/IEC nor the names of its contributors may
 *    be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/** \file     AdaptiveLoopFilter.cpp
    \brief    adaptive loop filter class
*/

#include "AdaptiveLoopFilter.h"


#include "UnitTools.h"

#include "dtrace_next.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "dtrace_codingstruct.h"
#include "dtrace_buffer.h"

ALFParam::ALFParam()
{
  alf_flag          = 0;

  filterMode        = ALF_ONE_FILTER;
  startSecondFilter = 0;

  filterType        = ALF_FILTER_SYM_9;
  tapH              = 0;
  tapV              = 0;
  num_coeff         = 0;
  coeffmulti        = nullptr;
  alfCoeffLuma      = nullptr;
  alfCoeffChroma    = nullptr;

  chroma_idc        = 0;
  tap_chroma        = 0;
  num_coeff_chroma  = 0;
  coeff_chroma      = nullptr;

  cu_control_flag   = 0;
  alf_max_depth     = 0;
  num_alf_cu_flag   = 0;
  alf_cu_flag       = nullptr;

  //Coding related
  num_ctus_in_frame = 0;
  maxCodingDepth    = 0; //TODO "

  filters_per_group_diff = 0;
  filters_per_group      = 0;
  forceCoeff0            = 0;

  predMethod        = 0;
  minKStart         = 0;
  maxScanVal        = 0;

  temporalPredFlag  = 0;
  prevIdx           = 0;
};

ALFParam::~ALFParam()
{
 destroy();
}

void ALFParam::destroy()
{
   if ( coeff_chroma != nullptr)
   {
    delete[] coeff_chroma;
    coeff_chroma = nullptr;
   }

   if( coeffmulti != nullptr )
   {
    for (int i=0; i < AdaptiveLoopFilter::m_NO_VAR_BINS; i++)
    {
      delete[] coeffmulti[i];
      coeffmulti[i] = nullptr;
    }
    delete[] coeffmulti;
    coeffmulti = nullptr;
   }

   if( alf_cu_flag != nullptr)
   {
    delete[] alf_cu_flag;
    alf_cu_flag = nullptr;
   }
}


void ALFParam::reset()
{
  alf_flag         = 0;
  cu_control_flag  = 0;
  chroma_idc       = 0;
  num_coeff_chroma = 0;
#if GALF
  tap_chroma       = 5;
#if JVET_C0038_NO_PREV_FILTERS
  iAvailableFilters = JVET_C0038_NO_PREV_FILTERS;
#endif
#else
  tap_chroma = 0;
#endif
  ::memset(coeff_chroma, 0, sizeof(Int)*AdaptiveLoopFilter::m_ALF_MAX_NUM_COEF_C);
  for (int i=0; i< AdaptiveLoopFilter::m_NO_VAR_BINS; i++)
  {
    ::memset(coeffmulti[i], 0, sizeof(Int)*AdaptiveLoopFilter::m_ALF_MAX_NUM_COEF );
  }
  num_alf_cu_flag  = 0;
  ::memset( kMinTab , 0 , sizeof( kMinTab ) );

  temporalPredFlag  = 0;
  prevIdx           = 0;
}

void ALFParam::copyFrom(const ALFParam& src, const Bool isGALF, Bool max_depth_copy)
{
  alf_flag = src.alf_flag;
  cu_control_flag = src.cu_control_flag;
  chroma_idc = src.chroma_idc;

  tapH = src.tapH;
  tapV = src.tapV;
  num_coeff = src.num_coeff;
  tap_chroma = src.tap_chroma;
  num_coeff_chroma = src.num_coeff_chroma;

  ::memcpy(coeff_chroma, src.coeff_chroma, sizeof(Int) * AdaptiveLoopFilter::m_ALF_MAX_NUM_COEF_C);
  filterType = src.filterType;
  ::memcpy(filterPattern, src.filterPattern, sizeof(Int) * AdaptiveLoopFilter::m_NO_VAR_BINS);
  startSecondFilter = src.startSecondFilter;
  filterMode = src.filterMode;

  //Coeff send related
  filters_per_group_diff = src.filters_per_group_diff; //this can be updated using codedVarBins
  filters_per_group = src.filters_per_group; //this can be updated using codedVarBinsif

#if MCALF
  ::memcpy(selectedBins, src.selectedBins, sizeof(Int) * 80);
  numClasses = src.numClasses;
  classifier = src.classifier;
#endif

#ifdef FORCE0
  if( ! isGALF || FORCE0 )
#else
  if( ! isGALF )
#endif
  {
    ::memcpy(codedVarBins, src.codedVarBins, sizeof(Int) * AdaptiveLoopFilter::m_NO_VAR_BINS);
    forceCoeff0 = src.forceCoeff0;
  }
#if JVET_C0038_NO_PREV_FILTERS
  iAvailableFilters = src.iAvailableFilters;
  iPredPattern = src.iPredPattern;
  ::memcpy(PrevFiltIdx, src.PrevFiltIdx, sizeof(Int) * AdaptiveLoopFilter::m_NO_VAR_BINS);
#endif
  predMethod = src.predMethod;
  for (int i=0; i<AdaptiveLoopFilter::m_NO_VAR_BINS; i++)
  {
    ::memcpy(coeffmulti[i], src.coeffmulti[i], sizeof(Int) * AdaptiveLoopFilter::m_ALF_MAX_NUM_COEF);
    // galf stuff
    ::memcpy(alfCoeffLuma[i], src.alfCoeffLuma[i], sizeof(Int) * AdaptiveLoopFilter::m_ALF_MAX_NUM_COEF);
  }
  minKStart = src.minKStart;
  ::memcpy( kMinTab , src.kMinTab , sizeof( src.kMinTab ) );

  ::memcpy( mapClassToFilter , src.mapClassToFilter , sizeof( src.mapClassToFilter ) );

#if COM16_C806_ALF_TEMPPRED_NUM
  if (max_depth_copy)
  {
#endif
    alf_max_depth = src.alf_max_depth;
#if COM16_C806_ALF_TEMPPRED_NUM
  }
#endif

#if COM16_C806_ALF_TEMPPRED_NUM
  ::memcpy(alfCoeffChroma, src.alfCoeffChroma, sizeof(Int) * AdaptiveLoopFilter::m_ALF_MAX_NUM_COEF_C);
#endif
  num_alf_cu_flag = src.num_alf_cu_flag;
  ::memcpy(alf_cu_flag, src.alf_cu_flag, sizeof(Bool) * src.num_alf_cu_flag);

  temporalPredFlag = src.temporalPredFlag;
  prevIdx          = src.prevIdx;
}

// ====================================================================================================================
// Tables
// ====================================================================================================================

#if JVET_C0038_NO_PREV_FILTERS
const Int AdaptiveLoopFilter::m_ALFfilterCoeffFixed[m_NO_FILTERS*JVET_C0038_NO_PREV_FILTERS][21] =
{
  {0, -6, 3, -6, -8, -2, 7, 0, -5, -10, -1, 28, 64, 36, 4, -2, -1, 7, 15, 68, 130},
  {-6, -5, 6, -4, -5, 1, 10, 4, 3, -7, 4, 24, 53, 34, 11, 2, -9, 8, 20, 61, 102},
  {-8, -10, 13, -4, -13, 12, 19, 14, 0, -11, 15, 24, 38, 31, 20, 7, -9, 19, 27, 42, 60},
  {4, 8, -21, 11, 0, -18, -1, -21, -1, 9, -14, 32, 83, 37, -12, 12, 8, -28, -3, 86, 170},
  {-13, -6, 19, 0, -7, 16, 16, 19, 14, -8, 17, 16, 23, 25, 25, 18, -11, 25, 25, 27, 32},
  {-17, 1, 17, 13, 5, 13, 9, 10, 40, -3, 19, 15, 13, 14, 17, 37, -14, 18, 18, 21, 20},
  {13, -7, -1, -1, 22, -24, -2, -32, 28, -5, -26, 7, 88, 9, -34, 2, 18, -3, -5, 94, 230},
  {-2, -11, 21, -10, -19, 8, 17, 14, -15, -19, 7, 19, 44, 34, 18, -1, -3, 29, 28, 52, 90},
  {-12, -9, 9, -13, 0, 10, 19, 17, -3, -12, 13, 20, 46, 31, 19, -9, -19, 14, 28, 52, 110},
  {-5, 0, 2, -9, 8, -5, -8, -9, 28, -3, -4, 12, 58, 46, 7, -7, -8, -1, 2, 71, 162},
  {-23, -9, 23, -15, -6, 20, 27, 28, -5, -11, 23, 21, 30, 32, 33, -4, -34, 31, 36, 36, 46},
  {-27, -8, 28, -10, -2, 25, 25, 31, 3, -13, 29, 17, 19, 30, 37, 2, -34, 33, 37, 25, 18},
  {-72, 20, 38, 2, 25, 19, 28, 31, 50, 6, 23, 0, 3, 12, 38, 18, -84, 54, 33, 8, 8},
  {-7, 3, 12, 3, -4, -10, -2, -13, 5, 2, -8, 17, 64, 28, -3, 4, -6, 4, 9, 81, 154},
  {-5, -5, 12, -5, 2, 1, -9, 0, 3, -8, 3, 1, 55, 12, 4, -3, -5, 14, -12, 71, 260},
  {-7, 0, 7, -2, -5, -7, 8, 0, 3, -5, 0, 20, 56, 29, 7, 4, -8, 6, 21, 67, 124},
  {2, 1, -8, -1, -3, -14, -1, -11, 0, 0, -12, 30, 80, 38, -10, 3, 2, -11, 4, 83, 168},
  {-1, -5, 5, -8, 0, -4, -2, 2, -3, -7, -5, 11, 65, 27, 7, -9, -2, 4, 8, 77, 192},
  {-3, -6, 6, -11, -5, 2, 3, 5, -3, -6, 2, 19, 61, 41, 16, -7, -6, 0, 15, 73, 120},
  {-3, -8, 12, -14, -8, 5, 2, 13, -5, -8, 4, 15, 53, 39, 25, -8, -6, 5, 21, 66, 112},
  {-1, -12, 11, -17, -19, 10, 15, 21, -15, -18, 10, 25, 52, 36, 26, -11, -6, 20, 27, 59, 86},
  {-6, -11, 5, -9, -15, 14, 11, 17, 10, -15, 17, 28, 41, 37, 22, 7, -10, 10, 25, 49, 58},
  {-1, 1, 5, 5, 4, -16, -10, -25, 10, 2, -19, 11, 86, 19, -26, 7, 1, 4, -11, 93, 232},
  {-2, -8, 10, -2, -11, 10, -1, 3, -14, -6, 8, -3, 49, 22, 21, -2, -1, 5, 0, 80, 196},
  {-6, -12, 11, -18, -14, 15, 14, 25, -2, -16, 17, 24, 41, 37, 32, -6, -12, 15, 28, 51, 64},
  {-1, -5, 9, -15, -7, -3, 9, 14, -17, -13, -2, 16, 59, 34, 22, -18, -4, 13, 23, 71, 142},
  {-2, -4, 10, -6, 4, -3, -14, -3, 4, -5, -3, -5, 61, 10, 1, -6, -2, 10, -15, 74, 300},
  {-8, -2, 1, -30, 8, 4, 3, 28, 22, -6, 8, 18, 44, 51, 38, -19, -17, -1, 18, 56, 80},
  {-44, -26, 72, -33, -17, 46, 14, 65, -21, -20, 45, 9, 25, 17, 65, -20, -64, 89, 13, 24, 34},
  {-1, -6, 8, -4, 0, 8, -4, 9, 0, -8, 12, -8, 1, -7, 14, -3, -3, 16, -17, 16, 466},
  {-4, -2, 16, -6, -3, 2, -16, -17, 10, 0, 0, -7, 46, 40, -3, -6, -4, 11, -22, 79, 284},
  {-1, -3, 7, -18, 6, 8, -28, -12, 25, -1, 6, -2, 52, 73, 15, -16, -4, -1, -23, 71, 204},
  {-4, -1, 15, 2, 3, -2, -34, -13, 3, 0, -6, -2, 72, 19, -10, 1, -3, 14, -37, 84, 310},
  {-3, 1, 12, 0, 4, -13, -13, -17, 4, 4, -15, -5, 72, 17, -12, 0, -2, 3, -15, 97, 274},
  {2, 2, -3, -3, -2, -16, -1, -13, -5, 1, -18, 25, 72, 47, -3, -5, 3, -12, 11, 86, 176},
  {-2, 3, 7, 1, 1, -17, -9, -20, -1, 5, -20, 12, 70, 39, -13, -1, 0, -1, -6, 89, 238},
  {-2, -3, 7, -13, -2, 2, -16, 6, -1, -4, 1, 5, 50, 57, 24, -13, -4, 2, -6, 69, 194},
  {-1, -2, 5, 3, 2, -3, -7, -16, 3, -1, -6, 2, 33, 20, -11, 1, 0, 7, -17, 52, 384},
  {2, 9, -8, 12, 4, -30, -4, -39, 9, 10, -31, 32, 88, 45, -38, 12, 5, -14, 0, 86, 212},
  {13, 15, -39, 19, 1, -44, 30, -54, 7, 14, -40, 51, 90, 60, -50, 20, 17, -45, 32, 84, 150},
  {6, 2, -10, 1, -9, -18, 10, -20, 0, 3, -17, 34, 73, 51, -15, 4, 8, -20, 19, 79, 150},
  {-3, -2, 11, -1, 4, -5, -14, -11, 4, -1, -6, -10, 56, 8, -7, -2, -3, 12, -21, 71, 352},
  {-2, -3, 7, -2, 0, 4, -9, 2, -2, -4, 3, -3, 14, 9, 5, -4, -3, 12, -16, 26, 444},
  {0, -2, 5, -4, 1, -3, 3, -1, -2, -5, -2, 2, 5, 14, 5, -6, 0, 6, 1, 13, 452},
  {2, -5, 1, -5, -1, 5, 3, 7, 0, -6, 7, 5, -11, 3, 9, -3, 2, 2, 5, -11, 494},
  {-4, -2, 10, 0, -1, 8, -22, -13, 5, 0, 5, -11, 33, 28, -2, 0, -8, 17, -31, 31, 426},
  {-3, -2, 9, -1, 1, 3, -17, -3, 0, -2, 1, -10, 39, 14, 3, -3, -3, 10, -23, 58, 370},
  {-2, 1, -2, 8, -2, 18, 0, -7, -1, -1, 20, -48, 2, 13, 20, 5, -4, 0, -17, 51, 404},
  {-1, -2, 4, 0, 0, 3, -4, -3, 1, -2, 3, -11, 13, 2, 0, -2, -1, 5, -8, 22, 474},
  {-5, 2, 15, 3, 8, -15, -17, -26, 8, 6, -19, -6, 73, 23, -24, 3, -3, 5, -18, 98, 290},
  {-1, 3, 6, 3, 4, -14, -21, -26, -1, 2, -16, 11, 72, 57, -9, -4, 4, -6, -15, 92, 230},
  {2, 10, -1, 0, -1, -33, 1, -25, -4, 12, -35, 36, 74, 62, -15, -5, 6, -24, 22, 91, 166},
  {-4, -2, 13, 3, 3, 1, -20, -15, 4, -1, -2, -15, 47, 14, -10, 0, -5, 16, -28, 66, 382},
  {-4, 6, 10, 9, 7, -24, -23, -37, 11, 8, -30, 31, 80, 48, -39, 10, -2, 5, -17, 80, 254},
  {-1, 10, -4, 13, 6, -33, -4, -45, 9, 12, -37, 37, 85, 54, -44, 13, 3, -14, 3, 88, 210},
  {6, 4, -12, 8, 2, -22, 0, -37, 3, 4, -24, 31, 81, 61, -31, 7, 10, -19, 3, 83, 196},
  {-3, -3, 10, 1, 1, 4, -15, -7, 4, -2, 4, -18, 34, 1, -6, 0, -4, 15, -26, 50, 432},
  {-2, -2, 8, 0, 0, 4, -15, 0, 0, -2, 3, -11, 25, -3, 1, -1, -3, 12, -20, 34, 456},
  {1, -2, 2, -2, 0, 0, 0, 2, -2, -4, 1, 2, -2, 4, 4, -3, 2, 0, 3, 0, 500},
  {-3, -2, 11, 1, 5, -2, -11, -18, 9, 1, -1, -30, 63, -2, -14, 2, -3, 9, -24, 88, 354},
  {-3, -3, 8, 1, 1, 6, -10, -6, 3, -4, 3, -17, 24, 0, 0, -2, -3, 13, -17, 29, 466},
  {-4, -2, 10, 2, 0, 6, -15, -8, 1, -3, 5, -16, 22, 19, -3, -1, -5, 13, -20, 38, 434},
  {-1, -2, 5, 0, 0, 3, -6, -2, 0, -2, 3, -7, 7, 7, -1, -1, -2, 7, -10, 19, 478},
  {-7, 10, 17, 5, 8, -39, -12, -33, 4, 16, -38, 19, 78, 44, -32, 6, 0, -12, 3, 110, 218},
  {-1, -1, 2, 0, 0, 1, -3, 0, 0, -1, 2, -3, 3, 0, 0, 0, -1, 3, -4, 5, 508},
  {-2, -2, 7, 0, -1, 5, -11, 1, 0, -2, 5, -12, 16, -4, 1, 0, -3, 10, -17, 24, 482},
  {-5, 2, 13, 7, 9, -20, -10, -40, 8, 11, -29, 10, 62, 56, -38, 9, 0, -5, -7, 87, 272},
  {-3, 9, 1, 10, 8, -32, -1, -43, 4, 13, -37, 26, 72, 62, -37, 8, 3, -16, 6, 92, 222},
  {-6, -3, 17, 4, 1, 7, -28, -11, 2, 0, 4, -23, 46, 11, -10, 3, -7, 19, -38, 70, 396},
  {-4, -3, 11, 2, 0, 7, -18, -4, 1, -2, 7, -19, 29, -1, -4, 1, -5, 15, -28, 45, 452},
  {-5, -4, 15, 3, 6, -1, -15, -25, 11, 2, -4, -26, 55, 18, -23, 4, -5, 13, -26, 79, 368},
  {-4, -3, 12, 2, 0, 6, -14, -7, 2, -2, 5, -16, 20, 9, -6, 0, -5, 14, -20, 32, 462},
  {-7, 3, 14, 6, 10, -17, -13, -38, 15, 11, -25, -12, 82, 30, -39, 9, -4, 3, -15, 108, 270},
  {-1, -2, 5, 0, -1, 4, -6, 0, 0, -2, 5, -12, 11, -3, 1, -1, -2, 7, -10, 16, 494},
  {-6, -2, 14, 4, 0, 5, -19, -14, 1, -2, 3, -18, 28, 28, -10, -1, -5, 17, -26, 50, 418},
  {-1, -1, 3, 0, 0, 2, -3, 0, 0, -1, 2, -5, 4, -1, 0, 0, -1, 4, -4, 5, 506},
  {-2, -3, 8, 0, 2, 6, -15, -5, 6, -1, 6, -36, 56, -19, -4, 1, -2, 8, -23, 68, 410},
  {0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, 1, -1, 1, 512},
  {-3, -2, 7, 1, -1, 4, -8, -1, 0, -2, 4, -9, 8, 2, -1, 0, -4, 9, -10, 14, 496},
  {-4, -4, 11, 1, -2, 10, -13, -4, 0, -1, 8, -25, 21, 3, -3, 1, -6, 12, -15, 30, 472},
  {-2, -5, 15, -24, -4, 18, -15, -27, 41, 1, 9, -4, 43, 81, 28, -15, -4, -4, -22, 65, 162},
  {-2, -1, 0, -9, -5, -5, 8, 5, 19, -10, -3, 21, 49, 37, 19, 15, -9, 0, 16, 58, 106},
  {-7, -5, 12, -9, -7, 10, 8, 6, 38, -14, 9, 10, 34, 33, 26, 28, -12, 8, 8, 42, 76},
  {-17, -7, 19, 8, 2, 22, 1, -1, 71, -21, 18, 11, 15, 12, 20, 55, -17, 15, -2, 28, 48},
  {1, -2, 4, -4, -1, -6, -4, -16, 15, -3, -10, 18, 66, 44, -1, 13, 1, -11, -5, 75, 164},
  {-13, -10, 13, 1, -6, 21, 7, 14, 40, -18, 18, 14, 27, 29, 15, 31, -16, 17, 8, 36, 56},
  {-19, -8, 20, 17, -5, 26, -1, 1, 82, -24, 22, 10, 9, 3, 9, 77, -14, 18, -8, 21, 40},
  {-18, -9, 14, 18, -8, 22, 2, 7, 78, -25, 21, 13, 13, 2, 15, 70, -15, 19, -1, 19, 38},
  {2, -7, 4, 8, 3, -15, -3, -29, 20, -8, -6, 14, 83, 23, -30, 20, 8, -6, -11, 83, 206},
  {-8, -6, 4, -2, -8, 10, 10, 11, 36, -19, 12, 17, 33, 27, 25, 33, -16, 12, 15, 39, 62},
  {-11, -4, 6, -19, 1, 9, 19, 24, -1, -8, 6, 15, 42, 45, 28, -3, -21, 13, 20, 45, 100},
  {-34, -2, 34, -22, -2, 18, 28, 38, 0, -6, 13, 6, 27, 39, 42, 6, -49, 45, 25, 29, 42},
  {-54, 2, 61, -19, 5, 35, 21, 39, 27, -14, 23, -14, 3, 24, 48, 27, -68, 65, 25, 14, 12},
  {-2, -4, 10, -8, 4, 4, -7, -18, 27, -3, 2, -11, 46, 46, 18, 1, -2, -3, -13, 60, 218},
  {-2, 0, 4, -8, -4, -5, 6, 2, 24, -8, -2, 11, 48, 38, 19, 17, -8, -2, 13, 58, 110},
  {-8, 6, -2, -6, 16, 11, -18, -21, 107, 2, 4, -13, 12, 60, 45, 26, -20, -20, -17, 44, 96},
  {0, 1, 6, -12, 1, -8, -7, -7, 8, 3, -14, 4, 64, 42, 13, -1, -1, -8, -7, 77, 204},
  {1, 0, 1, -16, -2, -5, 6, 7, 12, -3, -8, 13, 49, 48, 29, 8, -7, -10, 14, 62, 114},
  {-2, -5, 2, -14, -5, 8, 10, 12, 40, -17, 9, 16, 32, 34, 31, 31, -14, 1, 16, 42, 58},
  {0, 1, 10, -13, -1, -7, -7, -10, 9, 4, -14, 2, 60, 49, 13, 0, -1, -8, -5, 80, 188},
  {2, -3, 5, -15, -2, 0, -2, -11, 18, 2, -6, 7, 56, 53, 12, 4, -3, -12, -2, 71, 164},
  {-1, 0, 11, -5, -1, -10, -9, -24, 14, 5, -12, 1, 73, 36, -10, 8, -1, -3, -15, 85, 228},
  {-1, -2, 0, -19, -4, 1, 12, 16, 33, -13, 3, 16, 34, 43, 33, 23, -14, -4, 20, 47, 64},
  {-4, -1, 3, -18, 0, 4, 8, 2, 63, -19, 6, 18, 25, 33, 24, 58, -16, -11, 7, 43, 62},
  {-2, 1, -1, -29, 6, -7, 17, 29, -5, 0, -12, 16, 48, 53, 38, -8, -15, 1, 18, 57, 102},
  {-26, -1, 26, -36, -2, 18, 27, 54, 11, -15, 17, 6, 21, 38, 52, 13, -52, 50, 17, 27, 22},
  {0, -4, 11, -11, 5, 0, -4, -5, 14, -7, 5, -15, 27, 20, 20, 2, -4, 6, -19, 47, 336},
  {-5, 5, -11, -19, 0, 6, 6, 6, 93, -14, 13, 16, 18, 33, 34, 42, -25, -4, 9, 31, 44},
  {-1, -3, 20, -23, 3, 3, -13, -17, 35, 3, -3, -13, 39, 69, 42, 9, -9, -19, -8, 68, 148},
  {-4, -2, 11, -5, -3, 20, -5, -68, 41, 1, 21, -10, -1, 107, 28, -13, -5, 4, -50, 53, 272},
  {-4, -3, 12, -20, 2, 30, -15, -54, 66, 4, 19, -25, 3, 110, 55, -9, -7, -12, -41, 55, 180},
  {-5, 0, 9, -28, 12, 13, -19, -17, 93, 4, 3, -10, 19, 75, 51, 5, -18, -15, -12, 49, 94},
  {-3, 0, 16, -5, 0, -5, -13, -18, 3, 9, -13, -15, 62, 39, 5, -5, -1, -2, -14, 92, 248},
  {-1, 1, 16, -13, -1, -8, -13, -10, -1, 11, -18, 0, 58, 61, 29, -6, 0, -14, -4, 83, 172},
  {2, -1, 9, -19, 0, 0, -8, -4, 16, 4, -10, -3, 39, 72, 48, 4, -2, -20, -3, 65, 134},
  {2, -4, 12, -17, -3, 7, -7, -20, 19, 3, -1, -11, 26, 90, 57, -4, -2, -14, -15, 61, 154},
  {-1, -2, 10, -2, 0, 2, -18, -14, 0, 1, -1, -10, 54, 37, 3, -4, 0, 3, -22, 65, 310},
  {6, -1, -2, -14, -1, -7, -1, -3, -3, 5, -16, 18, 59, 61, 15, -3, 3, -22, 8, 77, 154},
  {6, -1, 1, -26, -4, -7, 8, 16, 13, 2, -14, 14, 35, 56, 54, 11, -7, -22, 21, 59, 82},
  {3, 10, -13, 14, 4, -33, 2, -47, 14, 11, -32, 31, 92, 50, -51, 17, 5, -18, 7, 88, 204},
  {2, -1, 15, -22, -1, -6, -6, 1, 5, 9, -16, 2, 43, 64, 52, 4, -4, -23, 7, 68, 126},
  {0, -3, 5, -1, 0, 5, -5, -11, -2, -1, 4, -15, 16, 44, 15, -5, -2, 5, -14, 32, 378},
  {0, -5, 12, -10, 4, 2, -10, -10, 0, -1, -2, -20, 44, 61, 31, -11, 2, -2, -17, 63, 250},
  {-2, -2, 3, 8, -5, 11, -2, -44, 10, 0, 11, -15, 14, 78, 7, -4, -5, 11, -34, 48, 336},
  {-2, -2, 5, 2, -3, 15, -6, -43, 17, 1, 12, -22, 8, 105, 35, -6, -4, 1, -38, 52, 258},
  {-2, -1, 0, 5, -3, 11, 2, -29, 9, -1, 12, -24, 1, 86, 41, -7, -3, 5, -32, 40, 292},
  {1, -2, 13, -26, 1, 24, -9, -55, 64, 4, 10, -33, -3, 107, 89, 11, -7, -26, -41, 53, 162},
  {-2, -3, 11, 5, -1, 9, -28, -27, -3, 1, 3, -15, 55, 73, 5, -3, -2, 11, -44, 81, 260},
  {-1, -4, 5, 5, 1, 7, -12, -18, -1, -4, 9, -23, 36, 33, 4, -3, -1, 11, -30, 56, 372},
  {-2, -3, 9, 3, -1, 8, -11, -29, -6, -1, 6, -22, 32, 85, 16, -10, 1, 5, -29, 65, 280},
  {-2, 4, 13, -6, 1, -15, -15, -10, -17, 14, -25, 4, 64, 72, 26, -11, 3, -17, 1, 88, 168},
  {6, 1, 10, -21, -1, -16, -9, 11, -16, 14, -30, 14, 53, 74, 51, -12, 3, -23, 13, 73, 122},
  {0, -1, -2, 7, -2, 7, 1, -21, -1, -2, 8, -20, 16, 39, -6, 1, -2, 8, -20, 39, 414},
  {-3, -3, 13, 4, -1, 6, -22, -23, -3, 1, 2, -20, 50, 55, -2, -4, -1, 11, -32, 73, 310},
  {-3, 0, 15, 8, -2, -5, -30, -44, 13, 7, -10, 10, 74, 62, -35, 9, -1, 5, -31, 81, 266},
  {3, 5, -5, 10, -2, -18, -9, -48, 10, 12, -24, 26, 88, 64, -38, 13, 8, -21, -7, 90, 198},
  {-2, -6, 12, -3, -4, 16, -9, -42, 7, 1, 7, -20, 23, 116, 29, -10, 3, -1, -37, 59, 234},
  {0, -3, 4, -1, 1, 3, -4, -2, -2, -2, 4, -12, 13, 8, 9, -4, 1, 2, -8, 17, 464},
  {0, -4, 15, -8, 1, 1, -20, -9, -10, 5, -6, -18, 49, 82, 36, -10, 4, -6, -23, 72, 210},
  {-2, -3, 4, 9, -2, 12, -10, -34, -4, -1, 9, -25, 24, 93, 16, -5, -3, 10, -35, 59, 288},
  {-1, -2, -1, 9, -3, 12, 0, -27, -8, -2, 10, -31, 14, 86, -2, -2, -3, 8, -20, 53, 332},
  {0, -1, -2, 6, -1, 6, 0, -11, -4, -2, 6, -16, 0, 46, -3, 2, -3, 5, -9, 24, 426},
  {-1, -1, -3, 9, -3, 11, 2, -24, -6, -3, 12, -31, 10, 75, -9, 1, -3, 8, -17, 46, 366},
  {-4, 0, 11, 3, 0, 0, -12, -23, 0, 8, -6, -33, 66, 37, -9, -1, -1, 1, -18, 102, 270},
  {0, 0, 0, 2, -2, 3, 0, -5, -1, -1, 5, -10, 5, 11, -3, 1, -1, 2, -5, 12, 486},
  {-4, -4, 8, 10, -3, 10, -10, -32, 0, 2, 9, -38, 42, 56, -16, 1, -4, 13, -31, 84, 326},
  {0, 1, 9, 3, 1, -16, -12, -16, -23, 12, -24, 7, 66, 73, 14, -4, 10, -28, 5, 92, 172},
  {-1, -1, -1, 6, -3, 7, -1, -13, -2, -1, 8, -18, 9, 32, -9, 3, -3, 5, -11, 27, 446},
  {-6, -4, 21, 5, -2, 4, -23, -26, -12, 8, -4, -29, 54, 80, 4, -9, 1, 6, -27, 95, 240},
  {0, 0, 0, 1, -1, 2, 0, -2, 0, -1, 2, -5, 1, 6, -2, 1, -1, 1, -2, 6, 500},
  {-2, -3, 7, 4, -2, 8, -7, -22, 7, 1, 7, -27, 29, 34, -28, 8, -2, 3, -16, 58, 398},
  {-2, -1, 3, 8, -3, 9, -13, -15, -4, -3, 12, -24, 30, 29, -6, 3, -5, 16, -35, 57, 400},
  {0, 0, -3, 5, -4, 5, 5, -16, 1, -1, 10, -20, 9, 29, -14, 4, -1, 2, -8, 27, 452},
  {0, 0, -1, 4, -2, 4, -1, -9, 0, -2, 7, -14, 9, 16, -5, 2, -2, 5, -10, 20, 470},
  {-4, -2, 14, 8, -1, 2, -28, -33, 2, 9, -9, -3, 58, 74, -41, 15, 0, -8, -15, 76, 284},
  {-3, -2, 6, 12, -3, 11, -16, -31, -6, 0, 10, -23, 34, 69, -17, 6, -3, 9, -36, 67, 344},
  {-5, -1, 6, 11, -4, 15, -15, -23, -12, 0, 11, -42, 28, 93, 10, -3, -4, 14, -33, 64, 292},
  {-2, -1, -2, 12, -5, 14, -4, -24, -5, -2, 13, -36, 16, 72, -9, 3, -5, 11, -19, 46, 366},
  {-2, -3, 1, 11, -5, 14, -2, -21, -6, -2, 13, -37, 11, 66, -3, 4, -5, 9, -16, 37, 384},
  {-1, -1, 0, 6, -3, 7, -1, -11, -2, -2, 9, -22, 7, 33, -7, 3, -3, 5, -8, 24, 446},
  {-1, 7, -7, -19, -2, -1, 11, 7, 29, -7, -1, 18, 44, 34, 34, 19, -11, -9, 13, 48, 100},
  {-2, 4, 7, -7, -1, 1, -6, -3, 33, -21, 5, 1, 31, 20, 49, 57, -10, -3, 21, 38, 84},
  {-12, -17, 20, 14, -6, 22, 4, 27, 70, -16, 17, -17, 11, -5, 29, 76, 4, 31, -15, 5, 28},
  {-6, -12, 24, 12, -9, 10, 3, 27, 52, -11, 10, -19, 8, 0, 36, 84, 19, 31, -17, -2, 32},
  {-4, 7, -19, 6, 9, 2, -6, 20, 131, -10, 11, -16, -11, -10, 48, 100, -2, 3, -21, 3, 30},
  {-1, -2, 5, 6, -13, 6, 8, 13, 44, -26, 14, 3, 36, 13, 32, 61, 2, 23, 0, 13, 38},
  {-3, 1, 5, -30, 17, 28, -12, -31, 85, 2, 10, -20, -8, 58, 94, 22, -6, -39, -17, 48, 104},
  {0, -4, 2, -9, 7, -1, 15, 9, 44, -25, 15, -9, 51, 6, 37, 47, 1, 6, 1, 12, 102},
  {-1, 2, 1, -15, -3, 2, 3, 7, 24, -11, 9, 15, 40, 36, 33, 28, -11, -1, 9, 39, 100},
  {-7, -1, -6, 9, -4, 7, 3, 23, 78, -13, 14, -3, 10, 5, 39, 70, 1, 14, -10, 10, 34},
  {-9, -6, 22, -16, -7, 18, -5, 8, 93, -43, 25, -19, -9, -25, 55, 139, 10, 34, -13, -4, 16},
  {-4, -4, 10, -9, -4, 11, -1, 9, 46, -30, 21, 4, 18, 12, 38, 69, -12, 19, 3, 26, 68},
  {-16, 10, 5, -15, -3, 14, 19, 27, 30, -18, 13, 5, 24, 35, 38, 41, -34, 33, 12, 19, 34},
  {-8, 5, 3, -3, -5, 15, 2, 15, 64, -31, 18, 10, 17, 4, 46, 76, -17, 21, -3, 13, 28},
  {-4, -1, 11, -26, 1, 39, 2, -73, 86, 4, 28, -13, -12, 96, 92, -29, -9, -11, -46, 46, 150},
  {-5, 20, -10, -8, 24, 11, -19, -8, 107, 2, -6, -20, -16, 32, 71, 63, -19, -29, -13, 42, 74},
  {-1, 2, 12, -23, 1, 8, -12, -25, 61, 3, -2, 0, 29, 58, 46, 9, -6, -8, -17, 56, 130},
  {-2, 9, -5, -24, 1, -3, 14, 6, 44, 4, -8, 16, 32, 42, 46, 22, -17, -13, 11, 45, 72},
  {-1, 5, 5, -21, 1, -2, -2, -17, 64, 4, -11, 10, 33, 42, 40, 36, -9, -11, -8, 47, 102},
  {-1, 10, -2, -22, 0, 5, 7, -7, 63, -8, -3, 13, 17, 22, 54, 72, -20, -20, 13, 35, 56},
  {-1, 8, 4, -34, -4, 17, 3, -10, 95, -25, 13, 11, -2, 9, 45, 108, -15, -10, -2, 23, 46},
  {1, 2, 6, -20, -1, 0, 5, -16, 24, 2, -11, 12, 48, 52, 39, 13, -5, -18, 0, 59, 128},
  {0, 4, 7, -15, -4, -2, 2, -5, 25, -3, -7, 15, 38, 38, 37, 34, -10, -7, 6, 50, 106},
  {-2, 1, -1, -22, -10, 18, 10, 6, 66, -18, 23, 16, 12, 11, 33, 85, -9, 5, -10, 17, 50},
  {-2, 10, 4, -40, -2, 17, -1, -13, 96, -43, 28, 1, -12, -1, 35, 168, -17, -2, -10, 18, 44},
  {-5, 5, -8, -14, -8, 9, 22, 14, 41, -9, 11, 19, 24, 33, 29, 47, -14, -2, 4, 30, 56},
  {-1, 5, 6, -28, 3, 9, -2, -19, 96, -7, 0, 5, 5, 23, 71, 72, -18, -26, 4, 32, 52},
  {0, 5, 5, -28, 3, 4, 3, -18, 77, 2, -9, 7, 21, 35, 61, 35, -12, -22, -2, 47, 84},
  {-1, 16, -20, -21, 0, 5, -10, 8, 124, -18, 17, 8, 7, 21, 36, 61, -9, 7, -13, 16, 44},
  {-3, -2, 11, -13, -5, 28, 9, -98, 85, -4, 26, -2, -14, 109, 76, -34, -4, 4, -45, 42, 180},
  {-4, -2, 12, -28, 0, 44, -2, -79, 108, 0, 27, -18, -22, 97, 94, -20, -5, -16, -42, 43, 138},
  {-1, 6, 10, -18, -6, 7, 0, -21, 31, -3, -8, 10, 24, 30, 60, 61, -13, -14, 11, 49, 82},
  {0, -3, 9, -3, -1, 6, -8, -36, 18, -1, 6, -8, 31, 82, 28, -11, 0, 3, -27, 60, 222},
  {0, 0, 15, -19, 1, -1, -8, -21, 37, 7, -9, 2, 36, 55, 49, 11, -3, -19, -5, 62, 132},
  {0, 2, 13, -20, 0, -3, -5, -26, 52, 9, -10, 6, 26, 42, 57, 29, -6, -25, 1, 61, 106},
  {2, 8, -1, -24, 0, 2, 6, -22, 60, -1, -7, 18, 17, 30, 69, 58, -13, -28, 10, 39, 66},
  {2, -1, 7, -13, -4, 3, -4, -21, 12, 5, -7, 3, 49, 64, 11, -1, 0, -9, -11, 75, 192},
  {1, 1, 10, -25, 1, 1, 1, -21, 43, 4, -8, 8, 30, 56, 65, 20, -8, -21, -1, 52, 94},
  {2, -7, 13, -9, -3, 8, -6, -41, 31, 2, 3, -11, 40, 81, 37, -10, 2, -1, -29, 59, 190},
  {0, -3, 10, -4, -2, 6, -10, -28, 21, 1, 4, -12, 36, 57, 37, -3, -1, 0, -25, 50, 244},
  {1, -2, 16, -21, 2, -4, -6, -18, 36, 6, -11, -1, 37, 58, 55, 11, -3, -17, -2, 58, 122},
  {-1, -2, 16, -7, -3, 1, -9, -33, 25, 6, -4, -10, 40, 66, 42, 7, -1, -6, -19, 61, 174},
  {0, -2, 19, -17, -2, 4, -13, -32, 45, 6, -5, -4, 32, 70, 54, 8, -2, -11, -14, 54, 132},
  {-1, 0, -1, 8, -5, 11, 4, -71, 45, -4, 14, 2, 8, 90, 38, -16, -5, 13, -36, 40, 244},
  {-1, -3, 1, -2, -4, 23, 9, -84, 71, -2, 20, -6, -12, 106, 78, -13, -4, -1, -41, 32, 178},
  {-1, -3, 5, -25, -1, 36, 5, -99, 122, -1, 27, -16, -34, 106, 103, -2, -3, -11, -40, 16, 144},
  {-2, 0, 11, -66, 10, 41, -25, -72, 200, -1, 32, -38, -29, 93, 108, -13, -2, -4, -51, 8, 112},
  {-4, 2, 22, -13, -3, -8, -9, -21, 20, 12, -15, -9, 53, 45, 20, 4, -3, -8, -4, 83, 184},
  {0, -5, 12, -6, 0, 3, -8, -25, 14, -2, 4, -9, 30, 50, 16, -11, 4, 0, -20, 65, 288},
  {0, -8, 21, -15, 0, 8, -10, -32, 23, 2, 3, -11, 34, 74, 50, -9, 3, -12, -19, 63, 182},
  {8, 1, 3, -25, 6, -13, 4, -9, 25, 7, -16, 15, 39, 57, 53, 7, -6, -24, 11, 57, 112},
  {2, -3, 6, 0, -3, 0, -4, -28, 4, 1, 4, -6, 30, 71, -10, 1, 1, 1, -19, 55, 306},
  {12, -4, -7, -4, -3, -17, 8, -25, 5, 13, -27, 30, 74, 48, 11, 12, 8, -33, 2, 79, 148},
  {-1, 1, -2, 10, -5, 11, 0, -46, 12, -2, 9, -18, 19, 105, 30, -10, -2, 9, -30, 48, 236},
  {1, 0, -3, 8, -1, 4, 3, -28, 4, -4, 9, -16, 13, 65, 10, -5, -2, 8, -18, 33, 350},
  {-1, -3, 13, -5, -3, 6, -9, -28, 17, 1, 4, -15, 29, 69, 41, -9, 3, -1, -25, 56, 232},
  {-2, -4, 17, -12, -1, 6, -12, -25, 31, 8, -2, -15, 26, 84, 61, -4, 0, -11, -17, 59, 138},
  {1, -7, 21, -18, 4, -7, -9, -22, 39, 14, -11, -10, 30, 66, 80, 23, 0, -28, -2, 45, 94},
  {-2, -5, 12, -8, 1, 15, 9, -88, 107, -5, 15, -12, -12, 102, 83, -28, -4, 10, -33, 20, 158},
  {0, 2, -9, 15, -2, 5, 5, -52, 19, -3, 10, -5, 7, 87, 20, -4, -4, 9, -29, 43, 284},
  {0, -1, -3, 11, -4, 11, 7, -69, 46, -4, 15, -9, -3, 112, 50, -11, -4, 8, -31, 34, 202},
  {-2, -6, 17, -31, 1, 23, 0, -95, 173, -6, 21, -14, -18, 109, 74, -54, -2, 28, -37, 11, 128},
  {-1, 0, 2, 9, -4, 4, -6, -33, 1, -2, 15, -32, 45, 75, 6, 2, -3, 13, -32, 56, 282},
  {-5, -2, 22, -5, -4, -3, -13, -16, -2, 13, -6, -28, 55, 59, 19, -3, 0, -4, -14, 88, 210},
  {0, 0, 0, 2, 1, 0, 0, -5, -2, -2, 2, -5, 4, 17, 3, -2, 0, 4, -4, 8, 470},
  {-3, -4, 15, 1, -3, -3, -8, -20, -13, 17, -9, -24, 50, 68, 27, -9, 2, -13, -9, 98, 192},
  {0, 2, -7, 11, -2, 3, 0, -20, -6, -1, 5, -8, 9, 61, -13, 6, -3, 7, -20, 38, 388},
  {0, -1, -3, 12, -1, 5, -2, -29, 1, -3, 8, -21, 13, 86, -1, -3, -5, 15, -22, 54, 306},
  {0, 1, -3, 4, -2, 2, 3, -9, -5, -1, 5, -11, 3, 40, -3, 2, -1, 2, -5, 16, 436},
  {0, 2, -3, 8, -5, 3, 0, -21, 0, 1, 8, -9, 9, 47, -21, 8, -2, 2, -16, 36, 418},
  {0, 1, -4, 12, -5, 5, -3, -29, -2, 0, 11, -16, 21, 68, -20, 9, -3, 7, -29, 59, 348},
  {0, -6, 7, 3, -5, 8, -3, -26, 0, 3, 8, -30, 35, 59, -21, 5, 1, -1, -21, 83, 314},
  {0, 0, 0, 12, -7, 5, -4, -39, 1, 1, 11, -10, 19, 87, -30, 9, -3, 6, -29, 56, 342},
  {-1, -4, 5, 12, -3, 10, -10, -32, 5, -2, 9, -29, 16, 107, 23, -5, -3, 15, -28, 57, 228},
  {1, -4, 3, 11, -6, 9, -3, -40, 15, -3, 12, -24, 4, 120, 38, -4, -1, 9, -27, 41, 210},
  {1, 0, -6, 11, -2, 4, 2, -20, -7, -3, 9, -19, 6, 80, -7, 6, -2, 5, -14, 33, 358},
  {-4, -5, 10, 9, -2, 13, -9, -39, 19, -1, 11, -31, 6, 112, 56, -6, -1, 8, -30, 43, 194},
  {0, 1, -6, 13, -3, 6, 5, -26, -6, -4, 11, -23, 3, 106, 13, 1, -4, 9, -18, 31, 294},
  {0, 2, -8, 11, -2, 3, 3, -21, 0, -1, 9, -17, 7, 60, -11, 3, -4, 7, -15, 41, 378},
  {1, 3, -6, 5, -4, 2, 9, -10, -11, -1, 9, -17, -2, 65, -12, 5, -1, -1, -5, 26, 402},
  {0, -5, 6, -7, 0, -2, -2, -4, -4, -14, -3, 14, 49, 24, 5, 5, -1, 8, 17, 79, 182},
  {-5, -6, 11, -11, -12, 8, 7, 5, -3, -15, 14, 23, 35, 28, 17, 23, -14, 33, 32, 50, 72},
  {-5, -8, 12, -12, -18, 15, 14, 8, -2, -15, 20, 24, 33, 24, 16, 28, -6, 33, 29, 38, 56},
  {-7, -6, 23, -7, -22, 13, 4, 2, -4, -11, 9, 18, 31, 23, 7, 28, 2, 35, 24, 53, 82},
  {-2, 1, 3, -4, -3, -10, -2, -8, 0, -13, 0, 25, 56, 28, 2, 9, -6, 6, 28, 79, 134},
  {-4, -1, 9, -4, -7, -4, 2, -4, -2, -10, 4, 21, 49, 24, 3, 14, -7, 14, 26, 68, 130},
  {1, 1, 0, 9, 11, -26, -14, -28, 11, -3, -23, 29, 88, 30, -34, 13, 22, -11, -10, 94, 192},
  {-2, -6, 11, -6, -17, 8, 10, 3, -21, -18, 5, 17, 38, 26, 14, 7, -1, 30, 30, 65, 126},
  {-16, -10, 23, -8, -23, 36, 13, 11, 20, -3, 18, 17, 3, 8, 1, 76, 12, 52, 12, 13, 2},
  {0, -12, 6, -27, -4, 12, 16, 20, -6, -22, 16, 24, 41, 28, 22, 0, -24, 30, 35, 54, 94},
  {-24, -9, 41, -25, -6, 28, 11, 24, 0, -17, 28, 16, 15, 22, 35, 23, -43, 45, 38, 33, 42},
  {-35, 6, 35, -22, -5, 32, 18, 25, 21, -15, 30, 11, 6, 15, 19, 47, -56, 65, 29, 21, 18},
  {-2, -3, 11, -2, -4, 9, -6, 1, -8, -9, 3, -11, 18, 1, 5, 16, -3, 13, -4, 94, 274},
  {-4, -4, 14, -13, 0, 13, -11, -10, -3, -4, 2, 3, 27, 40, 40, 22, -16, 4, 21, 69, 132},
  {13, -23, 8, -27, 34, -5, 18, -22, 44, -27, -7, -33, 53, -17, -7, -3, 20, 10, 14, 78, 270},
  {-7, -3, 31, -6, 9, 2, -8, -34, 44, -5, 19, -4, 30, 4, 11, 61, 2, 16, 17, 28, 98},
  {-1, 1, 8, -3, 0, -8, -10, -7, -11, -10, -11, 13, 54, 33, 12, 1, -3, 5, 20, 90, 166},
  {0, -1, 5, -9, -5, -6, -2, 3, -14, -14, 2, 25, 49, 33, 20, 8, -13, 11, 34, 73, 114},
  {1, -9, 6, -19, -17, 13, 8, 15, -16, -24, 19, 27, 40, 33, 25, 13, -15, 34, 33, 54, 70},
  {1, 0, -4, -1, 1, -11, -1, -10, -8, -7, -12, 26, 67, 37, -1, 6, -1, -1, 13, 83, 158},
  {-3, -1, -1, 14, -6, 16, -3, -15, -3, 1, 18, -32, -21, 1, 36, 27, 3, -5, -14, 104, 280},
  {-2, -1, 3, 4, 5, -6, -6, -13, 0, -3, -17, -1, 60, 13, -15, 5, 1, 11, -10, 96, 264},
  {0, -15, 27, -25, -36, 30, 8, 29, -28, -36, 33, 16, 27, 22, 41, -2, -15, 70, 36, 46, 56},
  {1, -8, 10, -32, -12, 13, 10, 32, -17, -28, 27, 27, 33, 31, 41, 8, -31, 37, 40, 47, 54},
  {-2, -3, 9, -11, 0, 1, -5, 8, -12, -17, 1, 12, 45, 27, 22, -5, -11, 14, 26, 76, 162},
  {-2, -2, 6, -2, -4, 4, -1, 0, -6, -8, 6, -10, 20, -1, 12, -1, 0, 15, -22, 81, 342},
  {-5, -16, 36, -48, -32, 42, 5, 49, -16, -37, 49, 22, 8, 21, 54, 16, -27, 49, 39, 37, 20},
  {2, -9, 10, -12, 2, 7, -1, 6, 5, -14, 19, -18, 5, -13, 15, -2, -2, 28, -38, 50, 432},
  {-2, -6, 18, -7, -16, 2, 10, 9, -26, -25, -2, 12, 38, 27, 20, -20, -7, 44, 42, 79, 132},
  {0, -11, 22, -32, 6, 11, -12, 1, 19, -18, 9, 4, 23, 32, 32, 22, -17, 16, 34, 65, 100},
  {-4, -1, 9, -3, 0, 17, -13, -18, -11, 8, -1, -12, 14, 40, 48, 24, -14, -23, 1, 95, 200},
  {-3, 1, 13, -5, 1, -9, -8, -8, -2, 2, -16, 2, 48, 14, -2, 8, -5, -6, 12, 107, 224},
  {-3, -1, 9, 5, 4, -2, -17, -18, -3, 1, -15, -2, 50, 27, 1, -2, 0, -2, -11, 101, 268},
  {-3, 2, 9, 3, 4, -14, -8, -18, -10, 0, -22, 12, 54, 35, 9, -4, -1, -11, 21, 101, 194},
  {2, -2, 9, -7, 0, -11, -6, -7, -20, -2, -14, 11, 49, 41, 33, 1, -3, -11, 28, 86, 158},
  {-2, 6, -1, 9, 7, -22, -8, -31, 6, 5, -28, 21, 79, 36, -30, 7, 2, -6, 0, 88, 236},
  {3, 1, -3, 0, 3, -16, -1, -12, -17, -1, -19, 26, 62, 44, 11, 6, -1, -18, 25, 84, 158},
  {-1, 0, 9, -4, 0, -9, -7, -6, -17, -8, -12, 10, 43, 40, 30, -7, -7, 1, 33, 92, 152},
  {0, 5, -6, 14, 7, -27, -3, -41, 5, 9, -31, 25, 84, 49, -36, 20, 5, -18, 4, 89, 204},
  {-2, -3, 7, 1, 3, 0, 0, -17, 1, 3, -10, -22, 45, 5, -1, -2, -1, 3, -16, 97, 330},
  {-1, -3, 5, -2, 0, 5, -2, -1, -4, -6, 5, -8, 3, 7, 13, -3, -3, 11, -9, 27, 444},
  {-1, -4, 6, 0, 2, 5, -2, -9, -3, -2, -5, -18, 21, 14, 10, -7, -2, 6, -4, 69, 360},
  {-1, -3, -2, 8, -2, 20, -10, -19, -15, 4, 0, -10, 13, 26, 30, 14, -8, -6, -27, 86, 316},
  {1, -4, 8, -14, 13, 10, -5, -16, -33, 7, -9, -11, 17, 42, 72, 69, -37, -34, 37, 80, 126},
  {-2, -3, 11, 1, 4, -7, 0, -19, 0, 5, -20, -10, 46, 14, -5, 0, -2, -5, 0, 116, 264},
  {-4, -3, 7, -2, 3, 9, -8, -9, -4, -5, -1, -12, 16, 30, 23, -5, -6, 5, -8, 86, 288},
  {-1, -2, -2, 11, -4, 9, 5, -16, -2, -2, 22, -38, -9, 3, 34, 12, -2, 0, -16, 85, 338},
  {-3, -1, 20, -5, 4, -12, -7, -16, -11, 11, -30, 4, 41, 32, 18, 2, -1, -24, 20, 117, 194},
  {-4, -3, 11, 5, 5, -5, -6, -24, 2, 8, -20, -7, 43, 22, -10, 1, 0, -9, -5, 103, 298},
  {-4, 4, 5, 12, 6, -15, -9, -28, -16, 4, -24, 10, 52, 46, 12, -1, 5, -23, 12, 101, 214},
  {-1, -2, 5, 7, 2, -5, -10, -14, -36, 7, -18, 6, 45, 55, 44, 1, 2, -37, 24, 95, 172},
  {-3, -3, 5, 6, 1, 6, -5, -17, 0, 4, -7, -23, 31, 20, -10, 1, -2, 0, -12, 93, 342},
  {-5, 3, 10, 8, 5, -13, -14, -24, -6, 7, -24, 8, 54, 39, -3, 1, 0, -14, 5, 97, 244},
  {-5, 4, 11, 10, 7, -16, -23, -36, 10, 12, -35, 21, 76, 44, -41, 13, 0, -6, -3, 81, 264},
  {1, 15, -18, 19, 9, -48, 15, -56, 9, 15, -47, 52, 86, 62, -49, 19, 10, -34, 26, 76, 188},
  {-2, -5, 12, -1, 2, 4, -13, -6, 3, 3, 0, -22, 37, -3, -5, 1, -4, 13, -38, 92, 376},
  {-3, -5, 14, 1, 6, -8, -4, -20, 6, 9, -14, -19, 55, 3, -13, 4, -1, -5, -18, 117, 302},
  {-1, -1, 2, 1, -1, 5, -2, -3, -1, -2, 4, -13, 6, 3, 5, -3, -2, 6, -10, 37, 452},
  {-1, -2, 3, 1, 0, 2, 1, -5, -1, -2, 3, -11, 7, 2, 4, -2, -1, 2, -4, 26, 468},
  {-1, -3, 2, 5, -1, 8, -3, -10, -5, 2, -2, -17, 18, 7, 9, -1, -2, 0, -15, 75, 380},
  {-4, -4, 7, 10, 0, 4, -6, -19, -7, 4, -6, -19, 23, 25, 10, -2, -2, -1, -15, 104, 308},
  {-5, -4, 8, 12, -2, 15, -23, -15, -11, 9, -8, -21, 36, 27, 8, 7, -6, 3, -27, 99, 308},
  {-3, -3, 4, 4, -1, 7, 1, -13, 0, 0, 3, -26, 9, 16, 6, -5, -4, 9, -13, 70, 390},
  {-6, 0, 19, 6, 7, -21, -8, -33, -5, 16, -41, 17, 55, 45, -7, 1, -2, -26, 33, 111, 190},
  {-1, -2, 3, 0, -1, 4, -3, -1, 0, -1, 4, -9, 6, -1, 1, 0, -2, 4, -7, 16, 492},
  {-2, -4, 7, 3, 0, 8, -11, -8, 1, 1, 4, -26, 29, 3, -3, 1, -4, 13, -36, 82, 396},
  {-4, 0, 3, 15, 3, -4, -4, -25, -12, 11, -15, -13, 39, 27, 1, 8, 2, -19, -13, 111, 290},
  {0, -2, 2, 1, -1, 4, -2, -4, 0, -1, 6, -17, 14, -1, 1, 1, -1, 4, -14, 37, 458},
  {-6, -6, 13, 9, 2, 12, -22, -18, 0, 2, -5, -23, 37, 25, -9, 1, -3, 10, -34, 103, 336},
  {-3, 6, -3, 17, 7, -25, 2, -42, -3, 11, -35, 26, 63, 55, -30, 13, 8, -35, 22, 85, 234},
  {-3, -5, 8, 8, -1, 11, -7, -22, -1, 5, -2, -27, 32, 23, -15, 9, 1, -12, -3, 61, 392},
  {0, -1, 2, 0, 0, 2, -2, 0, 0, -1, 2, -4, 2, 0, 1, 0, -1, 2, -5, 9, 500},
  {0, -1, 1, 0, 0, 2, -1, 0, 0, 0, 1, -3, 2, -1, 1, 0, -1, 1, -2, 4, 506},
  {-5, -6, 15, 9, 9, -8, -3, -37, 6, 17, -35, -6, 50, 40, -36, 12, 4, -28, 13, 104, 282},
  {0, -2, 3, 0, -1, 5, -5, -2, 1, -1, 6, -15, 15, -4, 0, 0, -3, 9, -21, 38, 466},
  {-1, -2, 3, 2, -2, 6, -4, -7, 1, -1, 8, -23, 20, -1, 0, 0, -3, 11, -29, 61, 434},
  {-3, -5, 7, 6, -2, 10, -6, -16, 1, 1, 5, -28, 20, 13, 0, 0, -3, 8, -24, 77, 390},
  {-3, -5, 8, 4, -2, 12, -10, -9, 0, 3, 4, -29, 19, 9, 0, 1, -7, 11, -15, 55, 420},
  {-2, -4, 7, 1, -1, 8, -6, -6, 1, 0, 7, -22, 15, 0, 3, -1, -4, 7, -9, 32, 460},
  {-2, -5, 9, 0, 6, -5, 3, -20, 10, 6, -5, -28, 48, -6, -16, 7, 0, 0, -29, 103, 360},
  {2, -5, 3, -6, -7, 8, 0, -5, -18, -18, 4, 22, 36, 27, 14, 31, 0, 19, 22, 69, 116},
  {0, -7, 7, -13, -42, 29, 25, 12, -23, -11, 8, 28, 25, 15, 6, 55, 21, 61, 11, 28, 42},
  {-3, -3, 12, -15, -18, 9, 14, -5, 8, 0, 2, 16, 28, 7, 6, 65, 13, 47, 8, 32, 66},
  {1, -6, 4, -6, -11, 8, 11, -2, -21, -23, 4, 26, 32, 18, 11, 39, 6, 32, 27, 60, 92},
  {-1, 2, 4, 2, 5, -15, -8, -23, 4, -9, -16, 29, 62, 29, -14, 19, 19, 0, -4, 95, 152},
  {-1, -4, 15, -14, -51, 30, 22, 19, -37, -15, 6, 25, 14, 24, 18, 40, 19, 83, 19, 30, 28},
  {-5, -7, 21, -22, -51, 38, 18, 17, -2, 20, -5, 24, 2, 6, -10, 94, 37, 76, -8, 12, 2},
  {-9, -3, 11, -1, -32, 24, 8, -8, 53, 24, -12, 13, 8, -6, -19, 114, 24, 75, -17, 4, 10},
  {-14, 13, 17, 5, 1, 5, -3, -25, 36, 10, -40, 14, 4, 1, -15, 141, 25, 34, -17, 43, 42},
  {0, -4, 3, -1, -6, 9, 12, 7, -27, -33, 2, 11, 20, 17, 10, 3, -1, 41, 45, 79, 138},
  {-3, 2, 11, -5, -4, -8, -5, -11, 1, -13, 3, 20, 35, 13, 1, 28, 4, 13, 25, 83, 132},
  {-2, -1, 11, -7, -4, 7, -2, 4, -11, -17, -1, 9, 20, 4, 1, 32, 3, 12, 18, 87, 186},
  {-6, 5, 14, -12, -17, 11, 7, -2, -2, -22, -1, 25, 21, 7, 7, 83, 9, 36, 15, 49, 58},
  {-1, 0, 11, -17, -39, 22, 18, 3, 22, -2, 2, 18, 16, 1, -3, 99, 18, 59, 0, 14, 30},
  {-2, 0, 6, 0, -36, 21, 28, 12, -56, -30, 9, 18, 26, 16, 19, 21, 17, 69, 32, 44, 84},
  {34, -37, 1, -49, 52, -3, 9, -18, 59, -44, -6, -2, 41, -13, -12, 15, 20, 1, 7, 77, 248},
  {3, -5, 3, -5, 23, -17, -2, -11, -3, -34, -13, 13, 53, 21, 0, 4, 2, 26, 26, 90, 164},
  {4, -3, -1, -5, -7, 0, 7, 10, -36, -45, 18, 31, 38, 26, 22, 18, -11, 52, 35, 60, 86},
  {7, -10, 1, -13, -32, 24, 18, 15, -44, -36, 29, 32, 30, 17, 14, 48, 5, 66, 20, 39, 52},
  {2, -3, 10, -17, -31, 24, 11, 13, -32, -53, 39, 35, 17, 8, 8, 77, -3, 67, 30, 37, 34},
  {5, -7, 4, -14, 11, 0, 7, 9, -12, -56, 2, 19, 34, 11, -9, 26, 4, 60, 13, 77, 144},
  {-1, 1, 8, -2, -2, -1, 3, 4, -37, -39, 7, 22, 28, 13, 11, 51, -3, 45, 32, 66, 100},
  {2, -14, 13, -12, -54, 46, 28, 34, -64, -32, 28, 32, 13, 9, 17, 46, 14, 111, 9, 19, 22},
  {-1, -4, 6, 1, 0, 2, 5, 2, -18, -17, -5, 1, 22, 8, 3, 2, -3, 17, 29, 102, 208},
  {2, -6, 17, -27, -51, 44, 19, 22, -40, -53, 50, 37, 11, 0, 1, 91, 5, 82, 17, 26, 18},
  {-2, -2, 11, 2, -1, -5, -1, -3, -19, -21, 0, 14, 30, 13, 4, 9, -5, 24, 38, 94, 152},
  {-1, -3, 12, -6, 0, -4, -3, 2, -12, -9, 1, 4, 19, 6, -5, 27, -7, 5, 20, 107, 206},
  {-2, 0, 5, 2, 0, 6, 5, -2, -25, -18, -8, -1, 18, 9, 5, 27, -6, 9, 33, 109, 180},
  {0, -6, 5, 4, -14, 15, 23, 26, -66, -32, 7, 3, 2, -5, 15, 34, 3, 38, 36, 88, 160},
  {1, -21, 23, -1, -47, 31, 38, 24, -74, -52, 24, 28, 20, 18, 26, -4, 10, 96, 45, 45, 52},
  {0, -4, 1, 3, 17, 2, 11, 0, -17, -39, 4, -20, 3, -19, -14, 62, 9, 17, 10, 99, 262},
  {-8, 4, 49, -37, 46, -38, -29, -7, -2, -30, 4, 40, 7, -22, -78, 216, -26, -41, 122, 68, 36},
  {-2, -4, 7, 5, 15, -8, -3, -5, -18, -17, -21, 3, 33, 21, 5, 3, -1, 9, 29, 114, 182},
  {-1, -3, 7, 4, 15, -9, -3, -1, -22, -31, -9, 2, 28, 20, 21, -4, -2, 27, 33, 97, 174},
  {-3, 0, 6, 7, 12, -12, 3, 4, -42, -38, -6, 10, 27, 20, 28, 12, -8, 36, 44, 95, 122},
  {-1, 2, 2, 10, 6, -12, 3, 16, -67, -59, 15, 22, 25, 13, 34, 39, -10, 66, 34, 77, 82},
  {1, 5, -12, 12, 12, -25, 4, -30, 0, -7, -30, 22, 81, 39, -27, 6, 7, 7, 4, 92, 190},
  {0, 4, -1, 1, 8, -12, 4, 12, -40, -55, 11, 19, 31, 23, 32, 15, -7, 51, 31, 81, 96},
  {-2, -5, 10, 2, 11, -5, -3, -12, -4, -4, -21, -6, 38, 12, -1, -1, -3, -1, 17, 118, 232},
  {-1, -5, 2, 3, 7, 2, 2, -10, -3, -3, -16, -19, 45, 0, -6, 3, 0, 10, -10, 99, 312},
  {-2, -4, 2, 6, 8, 3, 6, -2, -20, -19, -16, -5, 26, 14, 8, -2, -1, 18, 20, 105, 222},
  {-1, -4, 3, 2, 3, 6, 1, 0, -12, -11, -2, -13, 12, 7, 14, -6, -2, 20, -8, 84, 326},
  {-1, -4, -2, 9, 0, 12, 14, 6, -41, -28, 0, -17, 8, 10, 25, 12, 0, 23, 24, 108, 196},
  {-1, -3, 0, 5, 3, 6, 4, 5, -21, -17, -2, -12, 8, 7, 16, 5, 0, 21, 1, 77, 308},
  {-1, 1, 14, -7, 18, -16, 4, 14, -51, -43, 0, 1, 21, 1, 23, 75, -2, 28, 35, 84, 114},
  {-2, -1, 1, 6, -12, 24, 9, 2, -43, -4, -7, -20, -1, 16, 36, 31, -5, 0, 21, 117, 176},
  {-1, -3, -2, 7, -2, 32, 15, -24, -63, 6, 0, -22, -15, 1, 56, 128, -45, -28, 60, 90, 132},
  {-1, -5, 9, 0, -2, 6, 5, -9, -10, 9, -21, -9, 25, 6, -6, 15, 0, -18, 10, 134, 236},
  {-1, -7, 10, 0, 4, 0, 5, -16, 3, 9, -23, -13, 33, 6, -11, 4, 0, -13, 3, 130, 266},
  {-3, -5, 7, 7, 14, -7, 4, -20, -9, -2, -31, -5, 33, 25, 6, -3, 0, -8, 33, 119, 202},
  {-6, -6, 7, 16, 20, -13, -1, -12, -25, -18, -23, 3, 32, 28, 21, -4, -1, 7, 43, 108, 160},
  {-9, -1, 11, 16, 21, -23, -3, 1, -47, -34, -12, 13, 30, 28, 32, 11, -4, 24, 47, 98, 114},
  {0, -5, 3, 3, 1, 6, 5, -11, -2, 3, -10, -23, 28, 4, -3, 0, -3, 1, -3, 93, 338},
  {-3, 0, -1, 10, 5, -2, 3, -9, -17, -2, -17, -13, 33, 14, 7, 6, 3, -6, 6, 103, 272},
  {-4, 11, 0, 12, 14, -43, -2, -50, 19, 6, -42, 31, 100, 46, -54, 10, 10, -22, 38, 66, 220},
  {-1, -4, 3, 3, 0, 9, -1, -4, -6, -2, -5, -16, 11, 7, 8, -5, -3, 12, -4, 74, 360},
  {-1, -2, 0, 2, -1, 7, -1, 0, -6, -3, 1, -12, 6, 0, 10, -2, -2, 14, -4, 36, 428},
  {-2, -8, 7, 5, 6, 3, 5, -13, -7, 2, -24, -13, 24, 16, 3, -3, -3, -4, 25, 118, 238},
  {-3, -7, 8, 7, 9, 3, 1, -10, -14, -11, -18, -14, 18, 19, 20, -7, -3, 12, 30, 111, 210},
  {-3, -7, 5, 9, 8, 5, 8, -4, -28, -16, -18, -15, 17, 15, 25, -1, -1, 15, 32, 112, 196},
  {-5, -6, 8, 11, 14, -1, -2, -7, -24, -32, -10, -5, 11, 19, 32, -4, 6, 34, 26, 106, 170},
  {-1, -3, -3, 7, -4, 12, 14, -7, -17, -4, -5, -25, 15, -1, 22, 0, 0, 1, 9, 100, 292},
  {0, -3, -14, 18, -3, 23, 11, 3, -42, -10, -9, -26, 4, 8, 36, 18, -1, -5, 38, 112, 196},
  {-4, -1, -7, 19, -10, 26, 7, -7, -53, 9, -15, -19, 2, 11, 45, 61, -17, -15, 56, 99, 138},
  {0, -3, 0, 2, -3, 7, 6, -11, 1, 3, -1, -23, 18, 3, 2, -2, -3, 3, -12, 92, 354},
  {-2, -5, 3, 6, 12, -1, 5, -14, -7, -5, -22, -11, 18, 21, 13, -8, 2, -2, 20, 109, 248},
  {-1, -9, 4, 10, 9, -1, 7, -25, 0, 6, -26, -8, 16, 27, 0, -5, 0, -14, 25, 105, 272},
  {0, -2, 2, 1, -1, 4, 0, -3, 0, 1, 3, -15, 12, -2, 1, 0, -2, 0, -7, 48, 432},
  {-1, -12, 15, -1, 7, 2, 1, -20, 6, 7, -23, -14, 27, 16, -9, -1, 3, -10, 3, 120, 280},
  {-5, -6, 4, 14, 11, -3, 11, -32, -5, 1, -24, -21, 42, 22, -3, 1, 0, -7, 22, 97, 274},
  {-1, -6, 4, 5, 2, 2, 9, -14, -5, 3, -2, -36, 35, -4, 10, 1, 2, -14, 17, 77, 342},
  {-1, -11, 8, 5, 8, 10, -9, -13, 0, 3, -10, -38, 58, 9, -30, 14, 6, -32, 49, 25, 410},
  {0, -1, 1, 0, 0, 2, -2, 0, -1, 0, 3, -7, 6, -5, 4, 0, 0, 0, -2, 16, 484},
  {0, -3, 3, 0, -1, 5, -4, -1, 0, 0, 3, -9, 1, 2, 4, -1, -3, 6, -5, 35, 448},
  {0, -6, 0, 8, -5, 15, 4, -12, -7, 4, -6, -29, 10, 14, 14, -4, -3, 1, 7, 111, 280},
  {-1, 1, -3, 5, 0, -5, 9, 6, -18, -1, -1, -14, 13, -12, 14, 11, 7, -18, 2, 114, 294},
  {-1, -1, -5, 13, -5, 4, 8, 1, -28, 10, -13, -22, 12, 3, 13, 30, 3, -22, 26, 114, 232},
  {0, -5, 2, 4, -3, 9, 2, -9, -2, 3, 5, -33, 14, 3, 11, -1, -3, 3, 4, 80, 344},
  {-2, -12, 7, 13, 8, 3, 7, -22, -12, 2, -19, -21, 22, 18, 15, -4, -1, -6, 28, 110, 244},
  {-1, -6, 8, 0, 4, -2, 8, -20, 8, 7, -16, -9, 17, 14, -16, 4, 2, -11, 0, 85, 360}
#if MCALF
  , { -2, 12, 23, -36, -14, 62, -51, 93, -22, 32, -16, -17, 73, -11, -128, 119, 58, -170, 175, -31, 309 },
  { -3, -25, 266, -189, 33, -97, -84, -54, 230, 100, -136, 113, 211, 27, -120, -35, 123, -33, -94, 49, -21 },
  { 14, 1, -7, 2, 6, -13, 4, -11, 5, 4, -18, 15, 54, 14, -8, 7, 11, -12, 6, 57, 204 },
  { -40, 182, -261, 290, -124, 20, 96, -210, -31, 75, -86, 122, 233, -163, 65, 79, 70, -172, 88, -186, 435 },
  { 5, 4, 1, 3, 4, -2, -11, -1, 2, 2, -3, -7, 44, -8, 1, 5, 5, 6, -20, 45, 378 },
  { 113, -23, -13, 18, 210, -269, 81, -257, 148, -164, -66, 235, -39, 234, -169, -6, 29, 109, -23, -46, 400 },
  { 7, 53, -28, 38, -38, 0, 30, -93, 52, 58, -18, -67, 112, 138, -128, 44, 79, -80, 36, 64, -37 },
  { 15, 10, -30, 24, 23, -30, 41, -48, 13, 10, -41, 42, -6, 59, -45, 25, 14, -14, 20, 12, 349 },
  { -10, 77, 211, -309, -50, -337, 70, 293, 171, 384, -388, 387, -288, 20, -11, -189, -7, 286, -241, 56, 272 },
  { 17, -104, 82, 17, 142, -65, 161, -202, 3, -14, 30, -87, 1, -14, 127, 32, 113, -178, -104, 218, 204 },
  { 18, -184, -181, 343, 373, 279, 84, -443, 17, -154, -293, -143, 124, 111, -32, 23, -58, 193, 71, 25, 152 },
  { 78, 85, -160, 10, 18, -128, 126, -27, 10, -7, -14, 84, 17, 20, -23, 29, 29, -48, 52, 21, 187 },
  { 0, 1, 3, 0, 2, -1, -3, 0, 2, 1, 0, 1, 8, -2, 2, 0, 1, 2, -6, 9, 488 },
  { 5, -13, 44, -12, -56, 93, -104, 65, -9, -10, 81, -109, 116, -76, 38, -15, 21, 49, -116, 149, 279 },
  { 124, 57, -53, -80, 161, -141, 13, 130, 111, -30, -164, 109, -23, -68, -37, -79, 49, 82, -33, -77, 443 },
  { 98, -43, 30, -110, 51, -20, -48, 243, -69, -16, -96, -27, 273, -277, 124, -10, 42, -40, 100, 196, -248 },
  { 1, 0, 2, 0, 0, 1, -1, -1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 2, -3, 3, 485 },
  { 11, -7, -4, 5, 9, -3, -5, -7, 2, 3, -16, -8, 98, -15, -3, -1, 6, 3, 1, 75, 182 },
  { -41, 195, -24, -5, 249, -271, -154, -131, 33, -150, -173, 110, 401, -127, 284, -4, 166, 46, -425, 185, 183 },
  { 2, 1, 4, 1, 2, -2, -10, 1, -1, 0, 2, -3, 34, -5, 0, 3, 2, 6, -17, 43, 382 },
  { -19, -252, 424, -164, 51, 81, -306, 93, 122, -59, 45, -77, 233, -94, -60, -78, 78, -21, 64, 50, 269 },
  { 3, -13, 34, -18, -22, 48, -52, 19, 0, -11, 34, -59, 88, -61, 41, -24, 10, 31, -57, 98, 326 },
  { 49, 47, -91, -48, 15, -142, 117, -67, 129, 35, 6, 44, -59, 100, -192, 176, -15, -65, 79, -42, 351 },
  { 110, -29, -147, -86, -5, -147, 500, -230, 115, 182, -100, -82, -4, 42, -51, 33, -81, 80, -152, 294, 26 },
  { 11, 7, -25, 17, -10, -24, 80, -87, 25, -11, 34, -22, 21, 59, -31, 1, 6, 17, -28, 74, 274 },
  { 103, 132, -247, 29, 317, -105, -68, -60, 11, 100, -272, -14, 16, 162, 126, 43, 123, -41, -236, 68, 159 },
  { 154, 39, 8, -6, -483, 81, -76, 128, -185, 240, 404, -60, 22, -73, 267, -15, -112, -81, -95, -153, 453 },
  { -57, -284, 192, 139, 69, 191, -235, -231, 140, 29, -275, 245, 229, 147, 359, -108, -245, 130, -11, -258, 211 },
  { -15, -22, 26, -22, 18, -123, 255, -148, 64, -39, 96, 56, -6, -130, 261, -102, 0, 33, -127, 40, 173 },
  { -3, -51, 92, -30, 12, 106, -186, 81, -19, -53, 104, -153, 231, -106, 64, -6, -21, 115, -206, 224, 113 },
  { 29, -1, 1, -14, -8, 32, -124, 25, 40, 18, -66, 18, 180, 2, -105, 30, 25, -61, 170, -67, 259 },
  { 9, 1, -9, 5, 14, -16, 15, -18, 5, 8, -37, 36, 20, 31, -16, 3, 11, -15, 28, 18, 320 }
#endif
};
#if MCALF
const Int AdaptiveLoopFilter::m_ALFfilterCoeffFixedPC[m_NO_FILTERS*JVET_C0038_NO_PREV_FILTERS][21] =
{
  { 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 0, 0, 507 },
  { 3, 4, -2, 5, 5, -9, 5, -7, 1, 2, -3, 12, 10, 13, -7, 4, 6, -2, 4, 11, 193 },
  { 22, 18, -16, -22, -10, 28, 41, 4, 33, -72, 11, 4, -131, -62, 55, 80, -5, 100, -3, -60, 396 },
  { -124, -29, -57, 275, 230, -117, -45, 58, -113, -352, 279, -9, -208, 118, -152, -196, 219, 70, 135, 150, 464 },
  { 3, 1, 5, 0, 5, -1, -8, 2, 2, 4, 0, 4, 12, 3, 3, -1, 14, 7, -16, 1, 373 },
  { 63, 219, -261, 127, -199, 203, -228, 210, -369, -203, 349, -305, 62, -88, 357, 36, 47, 118, -252, 44, 416 },
  { 11, -57, 55, -4, -42, 184, -117, 4, 4, 9, 94, -297, 200, -75, 4, 36, 33, -74, 5, 185, 372 },
  { 28, 1, -11, 10, 26, -22, 34, -14, -7, 13, -30, 15, 15, 5, -10, -3, 48, -51, 19, 67, 459 },
  { -41, -88, 191, -118, 11, -34, -61, -8, 71, -14, -73, 88, 14, 10, -6, -38, 26, 84, 22, 67, 397 },
  { 1, 4, -8, 4, 9, -12, 4, -3, 0, 9, -10, -19, 5, 11, 19, -19, 202, -36, -67, 59, 196 },
  { 32, -25, 41, -65, 30, 31, -121, 90, 28, 56, -53, -45, 219, -99, -79, 53, 3, -40, 47, 66, -151 },
  { 15, 124, -191, 71, 5, -26, 19, 100, -109, 66, -39, -100, 227, -178, 95, 5, 18, -18, -70, 218, 154 },
  { 21, 115, -189, 30, 58, -132, 203, -185, 78, -4, 26, -23, -19, -31, 12, 48, 127, -136, 24, -10, 412 },
  { 9, 46, -85, 50, 211, -345, 94, 72, -26, 15, -89, 10, 182, -206, 104, -22, 323, -308, 46, 21, 455 },
  { 5, 4, 1, 4, 1, -1, -3, -2, 1, 5, -3, 3, 9, 0, 3, 3, 8, -3, -3, 2, -8 },
  { 6, 6, -29, 27, 4, 36, -28, -15, 39, 45, -73, -2, 34, -6, -116, 75, 19, -85, 107, 37, 156 },
  { -80, -12, 146, -100, -32, 93, -69, 31, 26, 55, -111, 117, -27, 75, -10, -12, 0, 41, -85, 49, 396 },
  { 1, 2, 0, 1, -1, -1, 2, 1, 1, 2, 0, 2, 1, 1, -1, 3, 3, -1, 0, 2, 494 },
  { 8, 2, -3, 5, 5, -4, -4, -7, 5, 4, -14, 0, 39, -3, -9, 5, 12, -8, 1, 39, 381 },
  { 16, -83, 109, -17, 141, -13, -59, -90, 74, 31, -198, 32, 140, 62, -117, 38, 28, -116, 223, -14, 216 },
  { 43, -111, 98, -52, 23, 151, -91, -64, 78, -120, 126, -158, 105, 118, -82, 13, -7, 188, -223, 70, 337 },
  { 49, 204, -201, -45, -88, -154, 222, -93, 215, -180, 222, -194, 154, 91, -103, -255, 28, 405, -211, 260, -4 },
  { 61, 12, 53, -55, 29, -10, -88, -38, 38, 54, -197, 219, -130, 219, -95, -13, -26, 54, 92, -81, 187 },
  { 18, 178, -256, 89, 72, -264, 366, -233, 110, 0, -21, -60, -18, 201, -164, -18, 6, 56, 45, 53, 253 },
  { 82, 103, -212, 36, -51, -99, 160, -26, -2, 176, -205, 186, -34, -126, 90, 7, 31, -179, 154, 53, 259 },
  { 62, 88, -21, -134, 112, -308, 95, 93, 73, 21, -6, 64, 94, -11, -98, 39, -26, 8, -90, 143, 206 },
  { 30, -2, 23, -2, -9, 2, -12, 20, 0, 18, 19, 9, 47, 2, 1, 13, 25, -11, -6, 20, -4 },
  { 59, 35, -119, 30, 6, -11, 59, -61, 47, 21, -12, -23, 72, 38, -75, 45, 62, -95, 51, 71, 138 },
  { 19, 34, 39, -7, 86, 63, -148, 16, 20, 36, -14, -51, 78, -281, 342, -241, 157, -82, -148, 155, 283 },
  { 44, 41, -67, 4, 0, -13, -16, 88, -34, -18, 66, -103, 182, -267, 167, 5, 28, -5, -164, 240, 236 },
  { 12, 1, -8, -3, 6, 0, 1, 5, 3, 3, -11, 1, 52, -1, -3, 6, 21, -23, 14, 45, 223 },
  { -43, -26, 23, -130, 58, -77, 15, 280, 389, -207, -119, 92, 179, -502, -309, -164, 133, 79, 388, 221, 84 },
  { 48, 28, -81, 27, 28, -46, 39, -53, 39, 12, -25, 25, 66, 27, -45, 27, 59, -80, 33, 63, 133 },
  { 16, 4, -19, 4, 24, -33, 26, -20, 18, 15, -52, 59, 9, 46, -44, 17, 21, -34, 43, -5, 337 },
  { 18, 0, -6, -8, -5, 1, 16, 5, -4, -4, 4, 20, 53, 19, 2, 1, 15, -6, 13, 50, 138 },
  { 64, 49, -29, 65, 101, -242, 35, -159, 47, 161, -142, 155, 161, -30, -15, 83, 23, -202, -16, 137, 16 },
  { 20, 76, -182, 162, 69, -96, 177, -141, 39, 131, -187, 21, 17, -25, -129, 169, 71, -316, 225, 37, 251 },
  { 1, 2, 1, 1, 0, 2, -6, 1, 0, 1, -1, -5, 14, -3, -1, 1, 0, 6, -10, 15, 475 },
  { 289, -18, -28, 73, 87, -167, -262, 13, -129, -33, -155, 293, 304, -253, 51, 44, -59, 179, -28, 85, -65 },
  { -62, 90, 66, -121, 285, -277, 26, 55, 249, 63, -276, 91, 142, -113, -131, 106, -14, -147, 22, 4, 395 },
  { -18, 20, -20, 22, 3, -19, 74, 152, -186, 128, -189, -8, -70, 37, 139, -57, -2, 95, 149, -132, 277 },
  { 98, -133, -86, 166, 35, 151, -66, 25, -91, 27, -8, 19, 43, -10, -4, -3, 125, -152, 100, -125, 296 },
  { -26, -117, 8, 64, 188, 177, -26, 53, 24, -85, 129, -160, 211, 167, -305, 73, 108, -168, 151, -284, 127 },
  { 109, 40, -142, -49, -71, 3, 2, 104, 1, 24, 146, 6, 177, 9, -34, 70, 0, -71, -26, -89, 93 },
  { 118, 105, -201, 62, 57, -37, -133, 72, -47, 109, -87, -344, 320, 263, -199, -71, 271, -420, 392, 60, -62 },
  { -42, 27, -20, 73, -140, 41, 134, -154, 190, 8, 121, -102, 53, 92, -309, -25, -36, 106, 80, 28, 287 },
  { 4, -2, 7, -1, -1, 8, -9, -1, 1, 1, -4, -20, 70, -9, 1, -2, 9, 8, -12, 56, 303 },
  { 9, 49, -18, 3, 2, -62, 16, 7, 13, -38, 88, -95, 162, -45, -27, 3, 4, 41, -64, 187, 53 },
  { 22, 13, -42, 16, 17, -45, 31, -43, 15, 20, -50, 45, 64, 44, -52, 21, 28, -55, 46, 63, 198 },
  { 10, 48, -120, 101, 18, -116, 337, -191, -41, -31, 43, 49, -159, 119, -43, 31, 20, 21, -14, -5, 378 },
  { -2, 1, 4, 1, 0, 2, -8, 1, 2, 1, 0, -3, 12, -1, -3, 1, -3, 6, -8, 9, 486 },
  { -1, 4, 2, 5, 7, -10, -4, -7, 4, 2, -13, 0, 56, -6, -7, -1, 2, 9, -9, 54, 331 },
  { -13, 3, 38, -22, -7, 8, 18, 29, -14, -19, 9, 26, 41, 15, 20, -2, -15, 49, 13, 44, 70 },
  { 3, -1, 24, -13, 12, 24, -6, -1, 5, 9, -21, 10, 25, 11, 34, 31, 99, -131, 20, 16, 204 },
  { -1, 1, 6, 3, 2, 1, -14, 0, 0, 0, 3, -16, 39, -13, 4, -1, -2, 16, -30, 43, 429 },
  { 107, 63, -15, -75, 154, -288, 81, 292, -238, -253, 54, 271, -196, -241, 7, 229, -114, 310, -201, 71, 505 },
  { 4, -1, 6, 1, 3, -10, -2, -11, 1, 2, -13, 13, 67, 12, -10, 0, 5, 4, 2, 71, 225 },
  { 9, 17, -26, 9, -1, -24, 30, -11, -7, -16, 1, -2, 104, -13, 6, -16, -1, 47, -14, 35, 256 },
  { 18, -2, -15, -5, 1, -2, 11, 3, -3, -2, 0, 28, 60, 28, 2, -1, 14, -14, 12, 56, 129 },
  { -9, 8, 7, 0, 11, -5, -21, 17, -8, 2, -20, -30, 115, -54, 8, -2, -3, 16, -28, 103, 298 },
  { 20, 27, -44, 31, 45, -74, 50, -46, 17, 8, -81, 73, 14, 35, -60, 22, 3, -5, 49, -8, 364 },
  { 12, 27, -86, 31, -24, 46, 2, -13, 101, 60, 10, -218, 128, 34, -246, 125, -24, -94, 157, 244, -42 },
  { -37, 102, 61, -9, -144, -178, -3, 30, -247, 23, 126, 54, -69, 187, 99, 104, -11, 101, 124, -347, 126 },
  { 42, 31, -70, 36, 79, -129, 71, -24, -5, -1, -106, 38, 173, -95, 23, -19, 8, 47, -17, 130, 89 },
  { -1, 3, 4, 4, 3, -5, -12, -7, 5, 2, -10, -8, 57, -8, -9, 0, -2, 11, -11, 56, 360 },
  { 0, 10, -14, 22, 9, -19, 10, -29, 3, -2, -25, -7, 101, -9, -16, -6, -2, 25, 3, 51, 304 },
  { -15, -1, 35, -17, -6, 14, 11, 27, -10, -14, 26, 24, 42, 18, 15, 3, -26, 43, 18, 38, 62 },
  { -3, 2, 5, 2, 1, 1, -8, 1, 1, 1, 0, -2, 12, -2, 0, 1, -3, 7, -11, 9, 491 },
  { -7, -5, 34, -4, 4, 8, -59, 21, 8, 1, -7, -22, 92, -34, 0, -2, -1, 16, -35, 96, 304 },
  { -6, 1, 13, 3, 1, 5, -26, 2, 3, 1, 1, -11, 39, -6, 0, -2, -3, 14, -22, 28, 443 },
  { 8, -3, -5, -6, -3, -4, 11, -1, -4, -3, -5, 34, 68, 32, -1, -5, 7, -9, 10, 68, 133 },
  { 4, -29, 32, 95, 142, 27, 61, -12, -173, 14, 118, -33, -230, -94, 102, 62, -42, -17, 54, -236, 226 },
  { 34, 48, -121, 57, 21, -39, 41, 44, -63, -60, -54, 68, 96, -89, 124, -83, 7, 157, -78, 20, 240 },
  { 8, 1, -19, 24, 27, -38, 63, -69, 11, 5, -43, 36, -33, 95, -58, 17, 4, 1, 22, 6, 397 },
  { 77, -89, -66, 170, -53, 92, 239, -398, -60, 46, 107, -77, -148, 355, 100, 61, 29, -134, -80, -30, 230 },
  { 23, -79, 41, 39, 1, 161, -165, -9, 10, 16, -83, -38, 93, 59, -66, 38, 13, -43, 114, -40, 352 },
  { 35, 21, -63, 10, 14, -44, 39, -33, 14, 18, -36, 42, 64, 41, -40, 18, 30, -67, 44, 64, 164 },
  { -1, -1, 10, 0, 3, -14, -7, -13, 2, 3, -17, 17, 71, 15, -16, 2, 2, 3, -2, 80, 232 },
  { 4, 9, -8, 7, -3, -4, -3, -7, 5, 7, 4, -17, 11, -9, -1, 7, -1, 17, -53, 79, 434 },
  { 3, 22, -20, 20, -6, -22, 31, -38, -8, -20, -7, 3, 107, 13, 1, -21, 0, 56, -10, 44, 214 },
  { -2, 3, 8, 5, 3, -4, -18, -7, 4, 2, -1, -11, 37, -7, 1, 1, -3, 15, -35, 65, 403 },
  { -36, -7, 60, -16, -4, 17, 21, 24, -2, -1, 27, 23, 29, 15, 18, 7, -46, 52, 15, 35, 48 },
  { 0, 16, -7, 9, 6, -31, 12, -35, 5, -7, -28, 7, 114, 3, -13, -9, -6, 35, -2, 55, 259 },
  { 4, 13, -14, 16, 8, -30, 13, -41, 17, 1, -29, 5, 83, 19, -38, 1, -3, 18, 6, 47, 313 },
  { -4, 1, 8, 3, 2, 3, -19, 3, 0, -1, 2, -14, 37, -11, 3, -2, -4, 14, -22, 34, 449 },
  { 13, 11, -42, 12, 4, -39, 22, -37, 5, 8, -37, 60, 82, 54, -36, 9, 15, -40, 28, 88, 149 },
  { 0, -10, 17, -5, -5, -4, 1, -6, -10, -1, -10, 24, 68, 23, 1, -9, -3, 13, 2, 82, 173 },
  { -1, -1, 15, -1, 3, -10, -19, -10, 5, 2, -11, 5, 70, -1, -9, 0, -1, 11, -19, 87, 281 },
  { -2, 2, 5, 6, 5, -2, -20, -8, 4, -2, -8, -17, 77, -10, -5, -2, -4, 16, -13, 60, 350 },
  { 5, -4, 25, -21, 15, -24, 24, -16, -2, -23, -44, 24, 76, -26, 5, -24, 7, 55, 29, 68, 217 },
  { 14, -4, -23, -5, 0, -1, 15, -4, 2, -2, -3, 40, 71, 39, -9, -1, 13, -30, 14, 69, 124 },
  { -1, 14, -3, 7, 9, -26, -7, -16, 11, 6, -17, 17, 38, 22, -25, 3, 0, 3, -1, 21, 396 },
  { 0, 0, 3, 1, 4, -17, -4, -19, 4, 6, -25, 25, 77, 26, -20, 3, 2, -4, 2, 79, 222 },
  { -13, 6, -1, 12, -4, 21, -54, 37, -20, 1, 10, -53, 138, -64, 33, 6, -12, 19, -48, 109, 262 },
  { -3, 0, 6, 0, 1, 0, -9, 2, 1, 0, 0, -4, 13, -4, 1, 0, -3, 8, -11, 10, 493 },
  { -4, -9, 17, -14, -10, 5, 3, 17, -14, -17, 10, 36, 67, 34, 11, -14, 1, 14, 12, 62, 92 },
  { 3, 4, -8, 4, 6, -26, -1, -25, 5, 7, -30, 36, 87, 35, -24, 7, 6, -13, 1, 84, 194 },
  { -4, 1, 13, 3, 5, -5, -26, -6, 5, 1, -6, -8, 59, -4, -6, 1, -4, 13, -24, 61, 375 },
  { -2, 10, -2, 5, 10, -24, -5, -22, 12, -3, -25, -3, 96, 1, -21, -1, -5, 17, 2, 57, 317 },
  { -47, -2, 53, 1, -1, 23, 19, 26, -4, -3, 25, 21, 32, 13, 25, -3, -50, 66, 18, 26, 36 },
  { -15, 25, 22, -20, -43, 65, -5, -3, 27, 29, -51, 51, 94, 17, 18, -33, -27, 38, 63, 31, -56 },
  { 1, -12, 10, -22, -21, 19, 6, 31, -28, -14, 10, 42, 57, 38, 21, -11, 5, -3, 14, 51, 126 },
  { -13, -2, 33, -8, 7, 27, -93, 50, -21, 6, -10, -62, 139, -67, 28, 0, -14, 15, -16, 81, 348 },
  { -3, 0, 6, 1, 1, 1, -9, 1, 1, 0, 0, -5, 15, -4, 2, -1, -3, 7, -10, 11, 491 },
  { -7, 3, 2, 13, 7, 6, -19, -10, -3, -13, 10, -30, 63, -18, 31, -11, -4, 37, -65, 90, 345 },
  { 13, 13, -43, 8, 6, -40, 25, -26, -2, 8, -39, 61, 88, 54, -24, 1, 14, -43, 30, 86, 132 },
  { -2, 22, -13, 4, 3, -43, 25, -43, 17, -11, -29, 10, 122, 16, -38, -3, -7, 34, 7, 66, 235 },
  { -2, -2, 15, -1, 4, -12, -18, -16, 7, 1, -17, 10, 74, 9, -16, 0, -1, 11, -14, 89, 269 },
  { -11, -18, 26, -2, -16, 14, -3, -4, -2, -7, 7, 23, 68, 32, 1, -19, -18, 36, 14, 76, 112 },
  { -3, 0, 6, 4, 2, 2, -17, -1, 1, 0, 1, -15, 35, -11, 3, -1, -6, 17, -29, 46, 440 },
  { -2, -10, 17, -3, -1, -5, -5, -10, -9, -8, -14, 31, 70, 22, 5, -12, -5, 21, 1, 81, 185 },
  { 12, -7, -22, -3, -7, 5, 12, -9, 4, -4, 3, 43, 72, 40, -15, 1, 12, -27, 8, 71, 133 },
  { -3, 3, 9, 2, 7, -16, -14, -19, 8, 1, -21, 5, 82, 3, -16, 0, -4, 11, -8, 74, 304 },
  { -3, 1, 5, 4, 2, 4, -15, -2, 0, 0, 1, -18, 35, -13, 5, -1, -6, 19, -35, 53, 441 },
  { -24, -57, 61, -19, 53, 51, -43, 5, 38, 78, -137, 31, 125, 29, -50, 43, -14, -82, 34, 49, 168 },
  { 0, 0, 8, -1, 5, -21, -12, -21, 6, 3, -24, 28, 80, 26, -22, 2, 1, 0, -6, 90, 228 },
  { -5, -32, 61, -18, -28, 19, -32, 1, -2, 6, 10, 19, 65, 31, -15, -17, -8, 17, 8, 91, 169 },
  { -43, -4, 49, 6, 4, 17, 18, 24, -3, -1, 19, 24, 27, 12, 30, -5, -50, 61, 15, 29, 51 },
  { -4, -1, 7, 1, 0, 2, -11, 0, 0, 0, 1, -6, 18, -5, 2, -1, -3, 8, -11, 14, 489 },
  { -4, -14, 13, -14, -16, 14, 7, 25, -23, -11, 8, 42, 61, 33, 17, -12, -3, 4, 16, 60, 106 },
  { -3, 16, -10, 9, 11, -36, -1, -31, 15, -1, -37, 1, 129, -3, -25, -5, -8, 24, 6, 72, 267 },
  { 12, -6, -22, -3, -2, -5, 9, -13, 3, 1, -10, 47, 76, 47, -20, 6, 12, -31, 8, 76, 144 },
  { -4, 28, -18, 6, 9, -65, 33, -40, 9, -16, -42, 47, 108, 26, -28, -9, -6, 39, 13, 40, 253 },
  { 16, 48, -114, 44, -13, -52, 103, 8, -80, 40, -67, 35, 95, -8, 17, 36, 10, -56, 68, 51, 146 },
  { -2, -5, 4, -1, -2, -12, 5, -16, -6, -9, -15, 35, 76, 34, 1, -14, -5, 18, 1, 87, 159 },
  { 9, 14, -33, 13, 7, -45, 17, -33, 2, 13, -49, 61, 94, 35, -34, 12, 13, -41, 32, 94, 145 },
  { -5, 1, 13, 3, 4, -3, -30, -6, 5, 0, -9, -1, 62, 1, -8, -1, -4, 14, -21, 50, 383 },
  { -5, 1, 10, 7, 5, -5, -26, -11, 4, 2, -5, -15, 71, -17, 3, -1, -3, 12, -44, 104, 337 },
  { -5, -1, 8, 1, 3, 7, -22, 3, -3, 0, -2, -15, 39, -15, 7, 0, -6, 14, -25, 37, 460 },
  { -3, 0, 5, 0, 1, 1, -9, 1, 0, 0, 0, -4, 14, -6, 2, -1, -3, 6, -10, 12, 495 },
  { -52, -24, 57, -1, 27, 31, -3, 10, 5, 27, -71, 29, 98, 30, -14, 16, -9, -28, 6, 9, 227 },
  { -43, -17, 56, 7, -5, 28, 17, 25, -10, -2, 24, 25, 25, 15, 33, -9, -50, 62, 23, 29, 43 },
  { 6, -30, 35, -7, 4, 9, -51, 40, -43, 19, -47, 42, 84, -17, -36, 43, 15, -66, 65, 69, 240 },
  { -3, -2, 15, -2, 1, -19, -17, -18, 5, 5, -24, 26, 81, 28, -22, -1, -1, 3, -6, 93, 229 },
  { -5, 0, 16, 1, 6, -13, -25, -16, 9, 1, -14, -1, 77, 1, -13, -1, -5, 17, -34, 97, 313 },
  { -6, 0, 15, 1, 3, -2, -33, -3, 2, 1, -7, -7, 65, -7, -4, 1, -6, 15, -29, 61, 389 },
  { -4, 11, -8, 8, 12, -28, -5, -23, 12, 2, -30, -1, 105, -6, -22, -1, -3, 10, 5, 62, 316 },
  { -11, -11, 24, 1, 1, -7, -26, -8, 10, -4, -14, 35, 47, 52, -48, -7, -10, 20, 33, -28, 411 },
  { 10, 1, -24, 3, 2, -23, 12, -23, 0, 5, -27, 52, 82, 45, -27, 9, 11, -33, 17, 86, 157 },
  { -6, 21, -14, 9, 2, -47, 18, -47, 17, -9, -31, 21, 124, 25, -40, -6, -7, 28, 7, 70, 234 },
  { -2, -8, 2, -8, -10, 4, 4, 6, -9, -11, 1, 34, 74, 35, 1, -10, -2, 4, 12, 75, 125 },
  { -8, 16, -31, 38, 32, -57, 40, -61, -2, -20, -59, 26, 120, -1, 13, -23, -2, 60, -23, 69, 262 },
  { -2, 18, -30, 7, -23, -14, -6, 56, -34, -3, 49, -18, 110, -103, 63, -10, -11, 24, -86, 89, 362 },
  { 0, -1, 0, 3, -1, 5, -9, -5, 2, 0, 4, -17, 25, -8, 2, -1, -8, 27, -54, 76, 433 },
  { -4, 0, 14, -1, 3, -23, -15, -20, 7, 4, -26, 29, 80, 30, -29, 0, -3, 4, -2, 90, 237 },
  { -7, 0, 8, 2, 3, 7, -26, 2, -4, 0, -3, -18, 50, -19, 7, 5, -10, 18, -43, 69, 430 },
  { -2, 0, 4, 0, 0, 1, -7, 1, 0, 0, 0, -3, 11, -3, 0, 0, -2, 5, -8, 11, 497 },
  { -6, -7, 7, -7, -17, 7, 1, 6, -9, -16, 13, 30, 75, 26, 3, -11, -9, 19, 4, 84, 128 },
  { -46, -16, 58, 7, -5, 29, 22, 20, -12, -11, 31, 25, 27, 15, 32, -8, -50, 69, 20, 28, 40 },
  { -7, 0, 17, 1, 8, -13, -29, -19, 10, 0, -17, 6, 82, 10, -18, 0, -4, 15, -31, 95, 299 },
  { -1, 11, -12, 9, 13, -29, -3, -31, 15, 3, -38, 4, 111, 4, -26, -4, -4, 15, 8, 65, 297 },
  { -9, 18, -6, 8, 4, -46, 3, -40, 13, 1, -44, 23, 144, 17, -31, -8, -10, 30, 5, 74, 217 },
  { 11, -3, -26, -1, 2, -16, 15, -11, -3, 0, -18, 56, 80, 43, -15, 8, 9, -39, 23, 82, 117 },
  { -5, -1, 9, -1, 1, 6, -20, 3, -2, -2, 1, -12, 33, -13, 5, 1, -6, 13, -24, 35, 470 },
  { -24, 23, -11, 19, 27, -69, 37, -18, -26, 4, -71, 70, 67, 32, 14, -17, -15, 48, -17, 39, 289 },
  { 5, 3, -12, 2, 1, -25, 1, -22, 0, 7, -28, 45, 87, 39, -21, 4, 8, -21, 9, 85, 178 },
  { -5, 1, 9, -1, -2, 7, -25, -8, 3, -3, 15, -31, 61, -9, 4, -3, -9, 32, -84, 126, 358 },
  { -5, -1, 13, 0, 6, -6, -24, -9, 7, -2, -10, -4, 68, -1, -10, -2, -5, 17, -24, 62, 374 },
  { -7, -2, 39, -20, -12, 19, -93, 34, -2, -6, -3, -23, 137, -30, -7, -4, -8, 25, -24, 89, 306 },
  { -25, 107, -91, 59, 68, -189, 105, -84, 31, -119, 67, -6, -47, 66, 45, -72, -21, 182, -230, 258, 305 },
  { -5, -2, 7, 2, 1, 9, -20, 0, -4, -1, 0, -19, 40, -17, 9, 2, -9, 15, -38, 56, 457 },
  { -4, -10, 0, -6, -10, 7, 8, 6, -11, -14, 11, 43, 71, 27, 4, -2, -10, 2, 16, 74, 104 },
  { -3, 15, -12, 8, 13, -38, -6, -33, 13, 5, -52, 12, 138, 8, -33, -4, -7, 18, 15, 71, 249 },
  { -2, 0, 4, 0, 0, 2, -9, 1, 0, -1, 0, -5, 13, -5, 2, -1, -3, 6, -10, 15, 495 },
  { -6, 13, -4, 4, -11, -24, 5, -37, 11, -6, -16, 24, 102, 33, -19, -14, -4, 23, -7, 103, 173 },
  { 6, -26, 81, -53, -30, 9, -73, -4, 40, 35, -98, 79, -8, 122, -89, 2, -8, 11, 74, -45, 463 },
  { -4, 3, 8, 2, 10, -14, -25, -15, 11, 2, -23, -2, 95, -1, -18, -1, -5, 16, -19, 80, 314 },
  { -4, 2, 13, 0, 4, -24, -18, -24, 8, 5, -28, 27, 83, 28, -27, 2, -1, 4, -10, 97, 240 },
  { 8, 3, -22, 1, 3, -27, 9, -23, 1, 4, -32, 55, 85, 48, -26, 6, 9, -31, 20, 84, 159 },
  { -45, -13, 48, 10, -1, 28, 24, 15, -6, -2, 24, 26, 27, 13, 35, -13, -47, 61, 22, 29, 41 },
  { -18, 6, 12, -6, 13, -16, -26, 20, -16, -7, -46, 17, 155, -16, 14, -18, -13, 45, -23, 75, 203 },
  { -14, 21, -24, 22, -7, -11, 18, -32, 18, -64, 49, 22, 48, 48, 20, -59, -6, 105, -79, 43, 275 },
  { -2, -11, 39, -26, -19, 35, -97, 49, -9, -4, 16, -36, 128, -28, 1, -2, -11, 26, -39, 74, 344 },
  { -5, 1, 8, 3, 2, -2, -25, -5, 5, -1, -8, -2, 59, 1, -12, -1, -5, 14, -17, 44, 400 },
  { -5, 0, 10, 1, 3, -1, -26, -4, 1, 0, -3, -14, 59, -12, 1, 0, -9, 25, -57, 99, 375 },
  { -1, 10, -12, 9, 8, -30, 11, -32, 9, 3, -33, 28, 64, 26, -27, -1, -4, 10, 2, 63, 305 },
  { -2, 0, 4, 0, 0, 1, -8, 1, 0, -1, -1, -3, 12, -5, 2, -1, -2, 7, -8, 11, 499 },
  { 10, 3, -23, -2, 3, -30, 11, -22, 1, 4, -33, 56, 88, 51, -25, 4, 11, -33, 19, 89, 149 },
  { -2, 1, 4, 1, 2, 4, -20, 1, -3, 0, -3, -13, 37, -13, 5, 5, -8, 10, -28, 44, 465 },
  { 2, -16, -8, -1, -13, 12, 12, 3, -14, -18, 17, 40, 68, 32, 6, -8, -4, 1, 19, 73, 107 },
  { -3, 2, -6, 5, -6, -11, -5, -20, 5, -9, -11, 37, 77, 33, -3, -20, 1, 16, -7, 87, 185 },
  { -5, 1, 13, 2, 7, -11, -28, -20, 12, 2, -15, -3, 79, 9, -19, -1, -6, 20, -39, 100, 317 },
  { -3, 6, -2, 4, 5, -14, -11, -10, 6, 2, -21, 17, 61, 5, -13, -1, -4, 9, -4, 31, 382 },
  { -9, 1, 34, -18, -21, 38, -103, 23, -1, -1, 4, -36, 159, -6, 1, -9, -14, 48, -74, 110, 263 },
  { -40, -11, 44, 2, 5, 23, 19, 21, -7, -10, 23, 30, 30, 13, 22, -1, -42, 56, 26, 27, 48 },
  { -4, 25, -25, 14, 10, -57, 23, -47, 11, 0, -49, 39, 120, 24, -25, -7, -8, 26, 4, 67, 233 },
  { -2, 10, -6, 6, 13, -19, -22, -15, 13, -2, -27, -9, 124, -14, -19, -5, -6, 21, -5, 68, 305 },
  { -11, -3, 31, -3, -5, 15, -61, 3, 2, -2, 4, -17, 73, 0, -7, 1, -9, 21, -36, 52, 415 },
  { -3, 1, 7, 2, 5, -3, -20, -5, 2, 0, -4, -16, 52, -14, 0, 2, -9, 22, -48, 87, 398 },
  { -4, 4, 9, 2, 5, -26, -15, -26, 8, 8, -33, 26, 85, 28, -30, 3, -1, 0, -4, 92, 247 },
  { 6, 1, -17, 6, -12, 13, 19, -11, -10, -4, 18, -34, 18, -12, 27, -10, -3, 20, -35, 43, 465 },
  { -11, 14, 10, -8, 0, -29, -30, -9, -1, -9, -40, 17, 177, 6, -10, -18, -7, 46, -9, 98, 140 },
  { 13, -2, -26, -5, 3, -24, 14, -14, -3, -2, -27, 58, 85, 50, -17, 3, 13, -39, 25, 87, 126 },
  { -2, 2, 3, 1, 3, 0, -16, 0, 0, 0, -1, -15, 39, -18, 4, 4, -8, 16, -38, 64, 436 },
  { -2, 1, -1, -1, -10, -7, -9, -10, -1, -14, -2, 32, 83, 30, -5, -14, 1, 15, -5, 93, 163 },
  { -30, -3, 25, 4, 7, 13, 20, 5, 8, -8, 17, 25, 39, 22, 8, 5, -36, 41, 23, 42, 58 },
  { -7, 8, 12, 2, -7, 0, -56, 7, -3, -3, 8, -30, 125, -28, 3, -3, -5, 27, -62, 117, 303 },
  { -14, -37, -19, 30, 33, 38, 45, -50, 2, 37, -37, -84, 19, -23, 5, 31, -17, -26, -90, 220, 387 },
  { 1, 20, -24, 12, 3, -47, 13, -43, 7, 8, -49, 43, 127, 30, -27, 2, 0, -3, 11, 88, 168 },
  { -2, 9, -4, 7, 12, -19, -15, -20, 12, 0, -26, 0, 97, -1, -19, -2, -4, 13, -4, 61, 322 },
  { -35, -16, 31, 7, 24, -38, 39, 13, -54, -59, 1, 99, 14, -46, 133, -28, -51, 136, -105, 61, 262 },
  { -7, -8, -19, 40, -25, 4, -9, -23, -6, -75, 100, 1, 71, -10, 69, -74, -33, 175, -153, 156, 163 },
  { -35, -50, 64, 8, -17, 69, 6, 13, -40, -28, 61, 29, 26, 17, 46, -21, -51, 90, 19, 32, 35 },
  { -8, 2, 21, 1, -2, 0, -46, -2, 5, 2, -5, 2, 67, 5, -13, 2, -7, 14, -21, 36, 407 },
  { -3, 0, 6, 0, 2, 1, -11, 2, 0, -1, -2, -5, 17, -8, 3, -1, -4, 9, -12, 17, 491 },
  { -4, 2, 11, 2, 8, -8, -28, -9, 5, 3, -14, -8, 68, -8, -9, 4, -8, 17, -43, 98, 355 },
  { -3, 5, 8, 2, 6, -28, -15, -27, 8, 5, -29, 25, 81, 31, -29, 2, -2, 5, -10, 94, 251 },
  { 0, 20, -20, 11, 13, -40, -2, -39, 19, 0, -41, 13, 136, 12, -32, -4, -5, 21, 1, 66, 254 },
  { -5, 2, 14, 1, 9, -13, -29, -13, 9, 3, -14, -8, 82, -7, -14, 3, -4, 14, -36, 97, 335 },
  { -4, -1, 8, 0, 2, 0, -11, 1, 0, 0, -2, -3, 15, -7, 2, -1, -3, 9, -10, 14, 494 },
  { 10, -3, -20, -4, 0, -11, 11, -8, -5, -3, -16, 49, 78, 46, -9, 3, 10, -36, 26, 80, 119 },
  { 4, 8, -12, 2, 0, -31, 0, -23, 3, 3, -30, 46, 85, 41, -22, -2, 6, -10, 4, 93, 182 },
  { -35, -19, 38, 7, -4, 32, 21, 18, -10, -7, 33, 29, 29, 19, 24, -9, -38, 49, 25, 31, 48 },
  { 1, 13, -12, 11, 13, -27, -16, -28, 15, 3, -33, -4, 122, -4, -27, -1, -5, 13, 4, 67, 301 },
  { -9, -13, 25, -3, 17, 9, -50, 19, -20, 9, -50, 20, 132, -24, 39, -6, -11, 1, -4, 103, 145 },
  { -2, 30, -43, 23, -16, -41, 33, -51, 2, -11, 8, -4, 134, 12, -5, -10, -11, 32, -35, 149, 120 },
  { -1, 10, -37, 23, -18, -12, 35, -43, 11, -21, 15, 34, 55, 62, -16, -23, -10, 37, 15, 65, 151 },
  { -3, 5, -1, 5, 7, -15, -6, -16, 5, 3, -18, 18, 60, 15, -12, 4, -1, 0, -5, 30, 362 },
  { -5, 4, 14, 1, 5, -22, -20, -25, 9, 5, -26, 19, 82, 29, -30, 3, -3, 5, -13, 93, 259 },
  { -4, 1, 7, 1, 3, 0, -18, 2, -1, -1, 0, -6, 33, -16, 5, 1, -6, 15, -28, 41, 458 },
  { -9, 52, -70, 29, -60, 16, 16, 6, -8, -63, 90, -21, 98, -34, 59, -75, 3, 99, -34, 117, 86 },
  { -4, 0, 6, 4, 0, 2, -22, 0, 2, -2, 6, -16, 45, -13, 2, -3, -9, 33, -64, 94, 387 },
  { -8, 0, 17, 0, 3, 3, -40, 1, 2, 3, -4, -15, 67, -17, -4, 5, -7, 13, -33, 64, 410 },
  { 5, 23, -28, 15, 7, -55, 14, -50, 13, -1, -41, 27, 140, 14, -33, 1, -9, 23, 1, 88, 213 },
  { -15, -3, 31, -1, 2, 10, -61, 9, -3, 4, -3, -14, 75, -17, 1, 3, -7, 16, -35, 54, 412 },
  { -8, 4, 17, -3, 0, 9, -65, 10, 3, 1, -1, -26, 126, -28, -1, -4, -2, 27, -59, 107, 296 },
  { 0, 2, 3, 1, -4, -15, -17, -15, 2, -6, -11, 28, 90, 28, -15, -8, 5, 4, -7, 101, 181 },
  { -3, 6, -1, 3, 5, -12, -9, -6, 1, 6, -16, 14, 61, -1, -5, 3, -1, 0, -9, 43, 353 },
  { -4, 6, 8, 3, 10, -18, -26, -17, 12, 3, -22, -7, 99, -5, -22, 2, -5, 13, -17, 91, 307 },
  { -1, 21, -22, 16, 8, -42, 17, -47, 10, 7, -31, 24, 67, 34, -24, 5, -2, 3, -14, 69, 315 },
  { -33, -20, 32, 9, -1, 31, 21, 13, -16, -11, 36, 27, 35, 15, 38, -16, -47, 70, 15, 38, 43 },
  { 7, 24, -41, 17, 9, -66, 43, -61, 10, 7, -47, 55, 94, 56, -44, 5, 3, -9, 19, 88, 178 },
  { -1, 14, -11, 8, 12, -40, -3, -33, 12, 2, -37, 23, 109, 19, -30, 2, -2, 10, -2, 82, 245 },
  { -5, 11, -2, 18, 16, -42, -12, -70, 39, 8, -27, 29, 49, 82, -70, 13, -9, 10, -5, 25, 395 },
  { -4, 21, -31, -4, -2, -69, 117, -21, -24, 10, -38, 124, -70, 71, 3, 18, 4, -41, 50, -15, 314 },
  { -13, -3, 60, -31, 7, 23, -180, 100, 4, 5, -57, 9, 202, -78, -43, -19, 2, 22, 41, 68, 273 },
  { -5, -1, 13, 0, 5, -4, -20, -8, 7, 1, -6, -13, 54, -10, -5, -1, -6, 23, -50, 96, 370 },
  { -5, 0, 8, 0, 2, 0, -12, 2, -1, 0, -2, -3, 18, -8, 3, 0, -3, 8, -12, 15, 491 },
  { -5, 1, 5, 2, 3, -2, -15, -2, 1, 1, 1, -10, 38, -15, 2, 1, -5, 13, -31, 53, 438 },
  { 7, -1, -20, -2, -1, -12, 16, -8, -2, -8, -11, 44, 77, 39, -1, -5, 10, -23, 18, 80, 114 },
  { -7, -3, 27, -7, 3, 5, -60, 11, -1, 0, 5, -21, 102, -22, 2, 3, -5, 21, -64, 118, 297 },
  { -5, 0, 6, 1, 1, 1, -10, 0, -1, 1, 0, -3, 14, -5, 3, -1, -3, 7, -9, 11, 495 },
  { -1, 9, -1, 6, 9, -28, -15, -25, 9, 3, -27, 10, 106, 14, -27, 2, -4, 11, -10, 92, 249 },
  { -2, 5, 4, 3, 11, -18, -18, -17, 12, 4, -23, -1, 82, -3, -21, 1, -3, 8, -10, 76, 333 },
  { -6, -1, 11, 1, 2, 2, -23, 3, -1, 2, -2, -6, 38, -14, 4, 0, -4, 11, -22, 34, 454 },
  { -33, -8, 217, -16, 56, -76, -234, 29, -81, -38, 75, -128, 168, -58, 100, 59, 29, -38, -144, 297, 163 },
  { -29, -45, 68, -8, -1, 22, 94, -186, 79, -55, 34, 88, -10, 54, 42, -63, -35, 115, -79, 52, 238 },
  { 5, 20, -27, 14, 9, -54, 24, -51, 11, 11, -46, 47, 83, 47, -39, 7, 0, -7, 15, 70, 237 },
  { -27, -13, 33, 3, -1, 24, 21, 11, -9, -17, 27, 26, 35, 18, 23, -9, -32, 49, 23, 44, 56 },
  { 9, 2, -18, -1, 1, -21, 6, -13, -3, -1, -20, 38, 87, 39, -11, -4, 9, -19, 13, 90, 144 },
  { -57, 79, 5, -5, -26, 150, -36, -72, 37, -35, 143, -259, 118, -17, 102, 24, -14, 34, -260, 297, 101 },
  { -2, 2, 9, 2, 57, -41, 4, -77, 53, 12, -108, 84, 51, 120, -102, 11, 17, -26, 64, -41, 332 },
  { -11, -112, 115, 8, -26, 107, -45, -49, -25, -29, -16, 119, -53, -42, 253, -145, -109, 256, -55, -13, 256 },
  { -11, -17, 49, -18, -63, 70, -37, -12, -9, -2, 65, -101, 138, 36, 7, -25, -42, 72, -23, 155, 48 },
  { -5, 2, 10, 1, 3, -1, -26, 1, 0, 2, -1, -12, 52, -17, 5, 0, -5, 20, -47, 75, 398 },
  { -18, 119, -121, 24, 53, -180, 111, -129, 71, -107, 152, -28, 121, 120, -80, 21, -19, 93, -148, 186, 30 },
  { 2, 15, -16, 11, 8, -37, 2, -39, 15, 4, -32, 17, 106, 19, -34, 1, -5, 13, 2, 64, 279 },
  { -7, 4, 16, -3, -2, 14, -58, 39, -16, 2, 17, -35, 82, -53, 35, -8, -8, 34, -82, 105, 364 },
  { -5, 0, 11, 1, 4, -1, -22, -3, 2, 3, -2, -11, 46, -8, -2, 2, -6, 15, -36, 62, 415 },
  { -4, 1, 6, 1, 2, -1, -12, 2, -1, 1, 0, -5, 18, -8, 4, -1, -2, 7, -12, 16, 492 },
  { -6, 3, 38, -27, 19, -18, -76, 49, 3, 6, -45, 55, 61, 16, -52, 11, -15, 23, 4, 32, 349 },
  { -28, -19, 41, -2, -83, 150, -138, 101, -59, -10, 107, -163, 336, -192, 82, -18, 5, -5, -19, 254, -171 },
  { 52, -201, 127, 22, 99, 31, -114, 21, -96, 114, -146, 13, 67, -105, -11, 37, -3, -120, 154, 166, 299 },
  { -3, 3, 9, 1, 8, -14, -20, -14, 10, 2, -17, -5, 80, -4, -17, 0, -3, 12, -19, 86, 325 },
  { 13, 3, -29, 1, 7, -30, 16, -20, -1, 6, -33, 55, 81, 51, -20, 5, 10, -37, 27, 83, 136 },
  { 51, 59, -290, 54, 178, -200, 395, -98, -118, 236, -203, 271, -292, 219, 52, 181, -40, -411, 169, -156, 390 },
  { -20, -2, 20, -4, 1, 12, 19, 13, -6, -18, 15, 32, 41, 25, 29, -20, -24, 50, 14, 42, 71 },
  { -1, 7, 4, 1, 2, -23, -17, -16, 2, 4, -22, 18, 96, 25, -17, -4, 1, 5, -10, 99, 206 },
  { -40, -50, 127, -48, -47, 111, -92, 44, -4, -14, 59, -24, 65, 48, 26, -34, -36, 59, 13, 42, 102 },
  { -22, -3, 21, -11, 28, -100, 118, 5, 16, -89, 234, -48, -67, -45, 70, -42, -14, 133, -362, 372, 121 },
  { 27, 15, -56, 29, 183, -147, -108, 51, -51, 84, -337, 212, 289, -82, 8, 46, -11, -100, 179, 58, -62 },
  { -141, 68, 83, 271, 22, -100, 288, -183, -115, 93, -147, 325, -242, -393, 257, 77, -69, -146, -20, 353, -52 },
  { -3, 44, -46, 21, 11, -76, 42, -64, 19, 7, -40, 17, 108, 46, -44, 4, -10, 17, 8, 68, 251 },
  { 27, -9, -8, 6, -72, 119, -137, 20, -10, -14, 121, -164, 200, 20, -1, 0, 8, 21, -121, 165, 173 },
  { 14, -1, -23, -1, 6, -32, 11, -24, 0, 6, -32, 60, 84, 55, -28, 4, 10, -30, 22, 80, 153 },
  { -4, 1, 7, 0, 1, 0, -10, 2, -1, 0, 0, -1, 10, -4, 3, -1, -3, 7, -9, 8, 500 },
  { -11, 57, 9, -6, 52, -97, -54, 31, -67, 2, -137, 99, 75, 75, -104, 113, -53, -29, 228, -95, 336 },
  { -3, -2, 13, -2, 0, 13, -56, 20, -9, -9, 20, -35, 95, -37, 21, -7, -10, 43, -86, 120, 333 },
  { -25, -39, 110, -44, -1, 105, -168, 81, 17, 53, -125, 76, 142, 22, -109, 37, -20, -47, 148, -20, 129 },
  { -5, 7, 6, 2, 6, -10, -21, -4, 2, 9, -25, 25, 48, 6, -6, -1, -5, 7, -6, 27, 389 },
  { -251, -280, 457, 122, 41, 235, -152, -160, 128, 155, -207, 69, 372, -151, 51, -114, 47, -95, -49, 212, -361 },
  { 15, 9, -110, 151, -203, 363, -91, -451, 135, -143, 411, -359, 68, 432, -36, -93, -15, 225, -246, 25, 341 },
  { -2, 1, 8, 3, 4, -1, -22, 2, 0, 0, 0, -12, 36, -17, 4, 0, -3, 13, -28, 41, 460 },
  { -2, 8, 2, 5, 7, -20, -15, -22, 11, 2, -21, -4, 96, 2, -24, 0, -4, 15, -6, 74, 309 },
  { -7, 14, -10, -2, 7, -20, 20, 22, -1, 1, -23, 29, 74, 14, 34, -34, -1, 0, 31, 68, 80 },
  { 0, 6, 4, 2, -1, -16, -16, -19, 2, 2, -19, 19, 81, 29, -12, -7, 1, 7, -7, 87, 227 },
  { -36, -17, 33, 11, -4, 44, 10, 14, -6, -18, 35, 17, 36, 7, 33, -26, -47, 92, 8, 46, 48 },
  { -4, 0, 10, 1, 3, -2, -18, -8, 7, 1, 0, -17, 48, -13, -3, -1, -6, 19, -42, 87, 390 },
  { -3, 6, 4, 4, 6, -13, -21, -15, 7, 2, -21, -6, 100, -2, -17, -1, -3, 12, -7, 76, 297 },
  { -3, 2, 6, 2, 1, -3, -10, 1, -1, 0, 0, -3, 16, -7, 2, 0, -2, 7, -12, 15, 491 },
  { -1, -7, 4, -15, 5, -4, 17, 18, -9, -16, -14, 46, 65, 22, 15, -20, 5, 8, 14, 72, 104 },
  { -5, -9, 11, 9, -8, 33, -52, 1, -10, -6, 13, -32, 113, -24, 35, -16, -5, 28, -68, 129, 237 },
  { -21, 47, -57, 40, 34, -67, 67, -40, -2, -6, -78, 141, -33, 52, 1, 3, -10, 10, 44, -56, 375 },
  { 0, 34, -24, -6, -19, -186, -19, 266, 51, 49, -59, 487, 412, -281, -439, 128, -28, -34, 284, -164, -389 },
  { 241, -150, -357, -43, -38, 293, 365, -490, 427, 250, -180, -62, -101, 236, -419, 217, -57, -380, 261, 77, 331 },
  { -20, 9, 29, 12, -14, 91, -147, 75, -34, 14, -15, -80, 278, -134, 30, 23, -3, -39, 10, 135, 72 },
  { 9, 4, -22, 5, 2, -29, 7, -26, -1, 7, -31, 45, 91, 45, -27, 4, 8, -27, 24, 92, 152 },
  { -34, -20, 44, 1, 1, 42, 11, 18, -2, -19, 34, 13, 30, 15, 29, -20, -43, 78, 21, 33, 47 },
  { -3, 1, 9, 1, 0, 2, -25, 2, 0, -1, 7, -20, 46, -20, 8, 0, -6, 18, -42, 63, 435 },
  { -3, 2, 8, 0, 7, -15, -12, -16, 11, 1, -13, 2, 52, 2, -12, 0, -4, 14, -30, 78, 364 },
  { -10, -11, 38, -4, 22, 2, -65, -9, 10, 8, -55, 28, 72, 38, -39, 6, -5, 1, 25, 14, 381 },
  { 1, 17, -16, 10, 3, -39, 9, -36, 8, 6, -29, 26, 91, 33, -21, -5, -1, 11, 0, 70, 241 },
  { 46, 15, -27, -20, 100, 40, -22, -29, 9, 61, -61, -157, 73, -77, 81, -4, 29, -136, 24, 64, 496 },
  { -92, 150, 433, -167, -16, -13, -368, 137, 151, 59, -65, -183, 332, -370, -200, -140, 93, -3, 259, 112, 294 },
  { -11, 6, 0, 19, -8, 13, -14, -33, 8, -46, 55, -4, 49, 11, 51, -50, -5, 96, -132, 88, 330 },
  { -21, -17, 29, -3, -1, 26, 27, 20, -5, -6, 13, 36, 24, 17, 33, -22, -32, 57, 20, 39, 48 },
  { -3, 0, 7, 2, 1, -2, -15, -3, 3, -2, 4, -15, 34, -8, -2, 1, -6, 18, -36, 59, 435 },
  { 3, 8, -6, 6, -7, -12, -8, -18, -1, -14, 1, 6, 88, 17, 9, -22, 1, 37, -24, 79, 227 },
  { 1, 8, -1, 4, 9, -30, -12, -25, 9, 6, -32, 15, 101, 16, -26, 1, -4, 9, 0, 71, 273 },
  { -22, 244, -305, 127, -30, -220, 274, -170, 125, 14, 18, 90, 30, 88, -76, -143, 23, 112, -121, 205, -16 },
  { -10, -93, 119, -32, -7, 178, -195, 66, 1, 1, 39, -102, 230, -90, -4, 11, -30, 30, -33, 174, 4 },
  { -2, 1, 5, 1, 1, -2, -10, 2, 0, -1, 0, -3, 15, -7, 4, -2, -2, 7, -12, 14, 494 },
  { 9, 7, -29, 5, 6, -31, 15, -21, -7, 9, -36, 47, 86, 41, -22, 10, 10, -37, 26, 84, 165 },
  { -7, 3, 18, 0, -2, 10, -52, 18, -10, 4, 0, -21, 70, -41, 22, 3, -5, 8, -37, 57, 435 },
  { -4, 7, 5, 4, 8, -27, -5, -24, 8, 6, -27, 35, 39, 34, -29, 9, -5, 3, -2, 36, 372 },
  { -23, 48, -29, 12, 58, -155, 132, -81, 16, 36, -89, 136, -45, 88, 14, 12, -9, -34, 12, 45, 224 },
  { -5, 6, 8, 2, -6, -9, -19, -13, -4, -10, -7, -6, 125, -11, 16, -13, -4, 26, -25, 145, 118 },
  { 0, -21, 57, -19, 23, -3, -98, 30, 13, 16, -72, 52, 96, 18, -94, 36, 9, -42, 86, -29, 401 },
  { -1, 1, 6, 1, 4, -6, -19, -11, 8, 0, -12, -15, 82, -12, -10, -4, -2, 15, -17, 79, 337 },
  { -3, 2, 21, -11, -6, 14, -72, 19, 7, 9, -4, -27, 102, -19, -16, 1, -11, 21, -53, 120, 327 },
  { -2, 1, 5, 0, 0, -1, -10, 2, 0, -2, 3, -5, 14, -7, 4, -1, -2, 8, -14, 16, 493 },
  { 0, 4, 9, -8, -4, 2, -55, 32, -13, 15, -29, -5, 140, -43, 8, 0, -4, 2, -13, 117, 205 },
  { -7, -7, 35, -7, -8, 27, -71, 25, -4, -2, 5, -30, 73, -32, 10, 0, -2, 12, -32, 58, 429 },
  { -26, -18, 28, 9, -2, 37, 23, 16, -9, -1, 28, 18, 31, 18, 36, -29, -29, 53, 17, 32, 49 },
  { -2, 2, 13, -2, 0, -14, -12, -19, 4, -12, -2, 14, 63, 32, 0, -11, 3, 22, -32, 94, 229 },
  { -5, 17, 16, -15, -36, 71, -117, 76, -32, -12, 72, -147, 213, -117, 71, -10, 4, 21, -121, 213, 185 },
  { 11, 6, -24, -2, 6, -29, 9, -14, -5, 2, -29, 45, 92, 36, -23, 12, 9, -32, 23, 88, 149 },
  { -3, 25, -28, 28, 20, -35, 15, -43, -5, 10, -17, 54, -6, 66, -33, 14, 12, -23, 5, -26, 448 },
  { 10, 18, -9, -5, -5, -54, 46, -32, 4, 5, -30, 3, 115, -17, 28, -31, -4, 43, -20, 139, 110 },
  { -2, 3, 12, -2, 5, -7, -29, -8, 10, -1, -11, -14, 90, -5, -16, -3, -4, 18, -19, 82, 320 },
  { -2, 1, 7, 1, 2, -4, -17, -7, 5, 0, -2, -8, 41, -3, -6, 0, -5, 15, -32, 62, 415 },
  { -1, 10, -2, 3, 6, -32, 5, -28, 5, 14, -48, 46, 53, 44, -27, 0, 1, -6, 28, 36, 296 },
  { -24, 87, 59, 9, -64, -60, -154, 29, 40, 19, 54, 14, 161, -46, -82, 66, 1, -60, -7, 46, 335 },
  { -21, 106, -170, 121, 55, -170, 81, 5, -31, 63, -148, 121, 237, -190, 45, -15, -33, 30, 35, 192, -110 },
  { 4, 17, -14, 8, 12, -49, 7, -39, 14, -3, -25, 1, 127, 5, -21, -5, -8, 26, -7, 80, 252 },
  { -1, -18, 49, -66, 48, 39, -138, -159, 218, 86, -117, -72, 333, -339, 343, -218, 69, -82, -62, 255, 173 },
  { 1, 12, -11, 9, 21, -55, 12, -39, 9, 5, -54, 65, 52, 47, -30, 7, 2, -6, 19, 34, 309 },
  { -4, 19, -24, 21, 16, -42, 44, -91, 42, 12, -66, -16, 161, 34, -55, -15, -1, 19, 49, 120, 64 },
  { 1, 5, -4, 3, 8, -15, -7, -15, 7, 5, -22, 15, 35, 16, -20, 9, -1, -5, 1, 26, 430 },
  { -3, 0, 14, -1, 3, -4, -29, -4, 3, 1, -8, -9, 70, 0, -10, 0, -4, 14, -21, 72, 346 },
  { -5, 3, 9, 2, -2, 1, -21, 2, -4, -1, 5, -15, 36, -15, 10, -1, -5, 16, -34, 53, 445 },
  { -26, -19, 30, 6, 0, 28, 21, 22, -16, -7, 26, 27, 35, 15, 37, -26, -24, 48, 19, 30, 58 },
  { -12, -104, 66, 27, 42, 126, -120, -12, -51, -2, -55, 76, 27, 222, -131, 51, -49, 108, -22, -115, 366 },
  { 10, 5, -20, -2, 4, -23, 14, -16, -2, 2, -16, 32, 69, 40, -15, 3, 7, -20, 11, 78, 189 },
  { 16, -9, -42, 19, -28, 28, 10, 16, 6, -106, 123, -12, -20, 37, 68, -100, 13, 133, -67, 15, 318 },
  { -2, 1, 5, 0, -1, 1, -8, 2, 0, -1, 2, -5, 11, -5, 3, -1, -3, 7, -10, 13, 496 },
  { 1, 8, 0, 1, -5, -13, -17, -3, -5, -7, -2, -18, 119, -24, 17, -15, -3, 33, -42, 122, 214 },
  { -361, -350, 506, -183, 269, 69, 145, 136, 296, -200, 328, 165, -500, 219, -431, 182, 4, 78, -15, -112, 39 },
  { 0, 9, -7, 7, 8, -27, -7, -25, 10, -3, -19, 2, 106, 3, -18, 0, -4, 14, -3, 69, 282 },
  { -4, 16, -1, -4, -18, 28, -49, 36, -19, -9, 28, -51, 86, -50, 31, -9, 0, 37, -86, 111, 369 },
  { 1, 17, 2, -28, -44, 59, -83, 91, -53, -15, 70, -165, 250, -102, 5, 10, -9, 32, -72, 288, -8 },
  { 3, -51, 107, -72, 6, 55, -136, 82, -19, 6, -58, -7, 142, -6, 6, -7, 2, 8, -11, 130, 149 },
  { -5, 5, 9, 5, -21, 25, -57, 27, -25, -10, 39, -31, 79, -40, 38, -2, -3, 31, -73, 73, 383 },
  { -14, -29, 27, 1, -6, 27, 13, 29, -20, -8, 33, 19, 41, 23, 31, -15, -21, 44, 8, 37, 72 },
  { 6, 6, -12, 7, 8, -29, 14, -22, -1, -3, -25, 42, 27, 42, -10, -3, 1, 9, 1, 37, 322 },
  { -3, 2, 7, 0, -2, 1, -16, 1, -3, 0, 3, -11, 31, -12, 7, 0, -4, 15, -32, 45, 453 },
  { -3, 0, 10, 2, -1, 3, -23, -11, 8, 0, -1, -15, 53, 7, -15, 5, -1, 6, -17, 59, 381 },
  { -42, -134, 206, -45, 97, 129, -188, -20, 56, 9, -119, -16, 84, 49, -115, -5, -28, -1, 120, 50, 312 },
  { 3, 112, -248, 152, 10, -223, 327, -114, -66, -31, 83, 25, 26, -93, 88, 3, -54, 113, -143, 178, 223 },
  { 9, -48, 80, -17, -130, 223, -59, -306, 212, 0, -39, -113, 92, 253, -222, -16, 7, -83, 289, -8, 248 },
  { 5, 38, -53, 23, 39, -88, -1, 87, -78, -37, 37, -35, 167, -182, 117, -2, -28, 74, -149, 266, 111 },
  { 1, 45, -43, 22, 35, -58, 27, -37, 15, 7, -16, -10, 124, -10, -15, 3, -5, 16, -21, 153, 49 },
  { 0, 3, 4, 4, 4, -13, -14, -15, 6, -2, -15, -3, 94, -5, -10, -2, -2, 13, -8, 66, 303 },
  { 9, 2, -18, -1, -1, -8, 6, -16, 4, -1, -8, 18, 75, 39, -17, 1, 4, -12, 13, 74, 186 },
  { -14, -100, 121, 34, -56, 124, 45, -196, -44, -1, 23, -1, -112, 77, 225, -70, -37, 106, -164, 103, 374 },
  { 1, -28, 41, -9, -1, 29, -65, 5, 6, -11, 14, -41, 118, -7, -8, -5, 1, 24, -33, 116, 221 },
  { -2, 0, 3, 1, 0, -1, -5, 0, 0, 1, -2, 1, 6, 0, 0, 1, -1, 2, -4, 10, 495 },
  { 1, 21, -21, 14, 14, -57, 19, -38, 23, 7, -61, 57, 85, 23, -73, 17, -2, -11, 66, 34, 275 },
  { -2, 0, 3, 1, -1, 0, -4, 0, -1, 0, 1, -4, 8, -4, 2, 1, -2, 3, -6, 13, 496 },
  { -3, -14, -3, 6, -1, 19, 21, 8, -3, -13, 18, 34, 38, 23, 11, 1, -21, 39, 13, 46, 76 },
  { -9, -52, 96, -23, -6, 71, -143, 63, -13, -21, 9, -59, 209, -93, 7, -11, 8, 35, -15, 145, 110 },
  { 1, -3, 4, 0, -1, -7, -7, -13, 1, -3, -11, 12, 83, 16, -15, 1, 2, 3, 1, 76, 235 },
  { 2, -1, 3, 3, 3, -16, 5, -28, 14, -4, -20, 49, -7, 66, -39, 10, 4, -3, 26, -14, 404 },
  { 5, 80, -72, -18, -28, -99, 134, -45, 114, -198, 286, -80, -19, -18, 82, -106, 52, 220, -344, 205, 209 },
  { 4, 75, -182, 112, 2, -31, 61, 41, -75, 44, -43, 33, 87, -148, 105, 3, 16, -30, -62, 179, 132 },
  { -247, 181, 87, 56, -76, 0, 7, -84, 22, 66, 125, -55, 104, 23, -118, 189, 284, -193, -108, 109, -231 },
  { 134, -161, 119, -4, -217, 95, 330, -152, -29, 30, -118, -119, 129, -105, 126, -401, 132, 284, 123, -17, 154 },
  { 0, 1, 6, 2, 2, -6, -19, -5, 2, -3, -11, 0, 74, -2, -10, -1, -2, 14, -7, 54, 331 },
  { 86, -26, -172, -67, -40, -75, 396, -90, 254, -139, 143, 40, 362, -494, -78, -111, 15, 71, 295, -295, 335 },
  { -21, -10, -29, 97, -65, 122, -90, 66, 23, 49, 78, -197, 214, -58, -195, -34, 100, -104, 6, 214, 171 },
  { 14, 33, -76, 36, -12, -19, 65, -80, 40, -24, 16, -10, 43, 84, -46, 2, -1, 35, 3, 48, 215 },
  { -56, -26, 88, 13, 45, -74, 65, -205, 69, -79, 117, 8, -67, 189, -137, 65, 107, -46, -158, 203, 266 },
  { -2, 0, 8, 0, -2, 2, -20, 2, -1, -2, 3, -8, 37, -10, 5, -2, -4, 18, -33, 53, 420 },
  { 11, -190, -318, 257, 277, 286, -88, -267, 349, -444, 38, 366, -228, -110, -104, -102, 45, 39, 179, 50, 364 },
  { -1, 1, 3, 0, 0, 0, -3, 0, 0, 1, -1, 0, 4, 0, -1, 0, 0, 2, -4, 7, 494 },
  { -24, -61, 179, -48, 18, -4, -99, -32, 48, -110, 97, -33, 156, -92, 107, -100, 1, 166, -88, 28, 288 },
  { -4, -2, -40, 58, 29, -17, 167, -297, 141, -20, 105, -300, 288, -60, 16, -63, 2, 43, -130, 395, -115 },
  { 3, 0, 3, 1, 4, -6, -7, -5, 0, -1, -12, -2, 68, -7, -7, -1, 3, 9, -1, 59, 307 },
  { -18, -72, 91, -15, -56, 31, -101, 171, -137, 128, -134, 241, 203, -175, 167, 98, 27, -290, 170, -265, 387 },
  { 77, -103, 52, -178, 203, -104, 117, -8, 236, 5, -70, 70, -59, -75, -62, -111, 1, 84, 67, -107, 453 },
  { -10, -6, 32, -12, -13, 31, -49, 29, -5, -3, 19, -55, 80, -61, 28, -7, 3, 17, -40, 84, 376 },
  { 7, 5, -12, 8, 7, -31, 24, -31, 4, 3, -24, 48, 12, 54, -27, 7, 5, -6, 16, 14, 341 },
  { 4, -14, -3, 13, 9, 0, 9, -19, 19, 0, -5, 12, 72, 9, -5, 4, -2, 11, 6, 68, 132 },
  { 54, 36, -202, 177, -43, 47, -70, -20, 57, 145, -33, -56, 34, 198, -235, 89, -111, 162, -108, 15, 233 },
  { -7, -17, 1, 27, 20, -146, 276, -196, 19, 46, -75, 120, -72, 6, -9, 53, 22, -90, -3, 207, 144 },
  { 10, 149, -278, 133, 71, -268, 171, 80, -108, -16, 29, 104, -6, 161, -327, 208, -45, -129, 331, -266, 509 },
  { 108, 176, -213, 46, 102, -201, -52, 28, 219, 177, -328, 322, 147, 34, -46, -205, 9, -63, 159, -222, 215 },
  { -2, 1, 6, 1, 1, 0, -10, -3, 1, -1, 0, -4, 29, -5, 1, -1, -2, 10, -18, 40, 425 },
  { 24, -9, -22, 33, -58, 94, -113, 20, 6, 19, 60, -169, 271, -64, -13, 63, -2, -14, -29, 169, -20 },
  { 5, -7, 7, -1, -80, 86, -41, 15, -37, -46, 175, -143, 113, -25, 95, -38, 5, 77, -158, 103, 291 },
  { 0, 0, 1, 1, 0, 0, -1, -2, -1, 1, 0, 0, 2, 0, 1, 0, 0, 2, -2, 4, 494 },
  { 20, 17, -31, 15, -281, 76, -37, 49, -132, -102, 382, 35, 75, -34, 381, -82, 22, 116, -408, 53, 235 },
  { 16, 40, -83, 39, 42, -143, 189, -79, 16, -11, -64, 163, -97, -21, 70, -51, 5, 64, -26, -41, 452 },
  { 8, -11, 11, -1, -5, 8, -8, -5, 5, 7, -5, -15, 80, -14, -10, 12, 0, -6, 2, 82, 232 },
  { 12, -58, 79, -56, 36, 63, -200, 179, -34, 4, 17, -113, 257, -189, 45, -14, 41, -6, -66, 206, 107 },
  { 12, -29, 56, -41, 105, -65, -101, 67, 31, -46, -175, 210, 109, -78, 62, -83, -29, 136, 61, -72, 249 },
  { 8, 30, -87, 52, 57, -122, 120, -53, -33, 42, -165, 94, 140, -69, 20, 22, 22, -82, 104, 179, -51 },
  { -30, 256, -351, 86, 13, 42, -133, 24, 97, 72, 13, 53, -26, 41, -117, 198, 32, -52, -67, -68, 352 },
  { 5, 3, -5, 4, 15, -28, 17, -18, 10, -7, -24, 42, 13, 37, -31, 1, 7, -3, 28, 12, 350 },
  { 0, -2, 7, 0, -3, 7, -15, 1, -1, -1, 6, -9, 28, -4, 5, 0, 2, 5, -16, 36, 414 },
  { 7, 20, -72, 64, -8, -10, 110, -182, 52, 2, -6, 19, -35, 208, -77, -20, 7, 25, 23, -24, 291 },
  { 24, 46, -88, 26, -17, -36, 114, -36, -31, 16, 34, -47, -10, -29, 70, -10, -4, 4, -80, 136, 334 },
  { -6, -27, 43, -12, 19, 46, -68, 11, 4, 42, -113, 31, 42, 49, -85, 40, -5, -57, 141, -42, 393 },
  { -190, 196, 273, -20, -25, -128, -321, 179, 35, 40, -96, 82, 452, -294, -157, 49, -22, -38, 122, 160, -94 },
  { -61, -191, -33, 45, 187, 84, 185, -65, -126, 25, 66, -168, -108, 201, -117, -216, 55, 74, 118, 70, 432 },
  { -12, -39, 80, -3, -48, 114, -57, 0, -28, -67, 138, -159, 63, -16, 85, -17, 14, 101, -172, 115, 325 },
  { 8, 35, -27, 17, 24, -140, 139, -99, 34, -66, 11, 119, -51, 75, -6, -24, 37, 9, 22, -67, 386 },
  { -1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -2, -1, 0, 0, 0, 1, -1, -2, 508 },
  { 2, 9, -8, 7, -4, -8, -6, -1, -8, 9, -8, 4, 53, -1, -2, 9, 6, -18, -4, 62, 312 },
  { 11, 9, -2, 11, -28, -2, 7, 17, -13, -39, 87, -48, 17, -34, 32, -10, 6, 28, -70, 62, 411 },
  { -79, 3, -26, 230, -82, 255, -391, -33, -30, 49, 51, -219, 163, 250, 34, -147, 147, -97, 73, -126, 419 },
  { 136, 251, -366, -313, 339, 27, -117, 57, -186, -72, -307, 68, 177, 290, 237, 422, 12, -132, -340, -192, 501 },
  { -64, 404, -441, 320, -210, -178, 356, -209, -100, 98, 438, -386, 14, 234, -373, 322, 7, -510, 429, -141, 470 },
  { 9, -49, 105, -46, 3, 101, -182, 78, 30, 3, -67, -46, 174, -165, 84, -92, -18, 132, -103, 155, 267 },
  { -23, -6, 24, -14, -10, 131, -156, 58, 34, -75, -87, -91, 211, -81, -78, -35, 41, 9, 251, -42, 337 },
  { 116, -46, -207, 7, 73, -106, 8, -31, -78, 149, -61, -21, 189, 368, -147, -13, -154, 70, 123, -151, 238 },
  { -205, -36, 34, 295, 85, 268, -54, -461, -28, -200, -122, 242, -287, 87, 155, 193, -91, 64, 139, -34, 392 },
  { 9, -36, 39, -19, 57, 46, -167, -26, 155, -185, 28, 239, -166, 342, -147, -194, 44, 228, -12, -190, 395 },
  { 2, -2, 3, -2, 0, 3, -3, 1, -1, 2, -2, 1, 3, 6, -3, 3, -1, 3, -4, 9, 454 },
  { 25, -20, -152, 67, 66, 93, 93, -71, -100, -132, 75, -87, -152, 455, -105, -43, 58, 89, 61, -235, 503 },
  { -2, -5, 10, -8, 19, 5, 0, -31, 41, 27, -55, 21, -19, 129, -153, 44, -12, -25, 90, -51, 424 },
  { 35, 3, -42, 15, 19, -36, 52, 81, -60, 53, -34, -41, -16, -13, 40, -19, 64, 21, 90, -101, 348 }
};

const Int AdaptiveLoopFilter::m_ALFfilterCoeffFixedRCLC[m_NO_FILTERS*JVET_C0038_NO_PREV_FILTERS][21] =
{
  { 0, -6, 3, -6, -8, -2, 7, 0, -5, -10, -1, 28, 64, 36, 4, -2, -1, 7, 15, 68, 130 },
  { -6, -5, 6, -4, -5, 1, 10, 4, 3, -7, 4, 24, 53, 34, 11, 2, -9, 8, 20, 61, 102 },
  { -8, -10, 13, -4, -13, 12, 19, 14, 0, -11, 15, 24, 38, 31, 20, 7, -9, 19, 27, 42, 60 },
  { 4, 8, -21, 11, 0, -18, -1, -21, -1, 9, -14, 32, 83, 37, -12, 12, 8, -28, -3, 86, 170 },
  { -13, -6, 19, 0, -7, 16, 16, 19, 14, -8, 17, 16, 23, 25, 25, 18, -11, 25, 25, 27, 32 },
  { -17, 1, 17, 13, 5, 13, 9, 10, 40, -3, 19, 15, 13, 14, 17, 37, -14, 18, 18, 21, 20 },
  { 13, -7, -1, -1, 22, -24, -2, -32, 28, -5, -26, 7, 88, 9, -34, 2, 18, -3, -5, 94, 230 },
  { -2, -11, 21, -10, -19, 8, 17, 14, -15, -19, 7, 19, 44, 34, 18, -1, -3, 29, 28, 52, 90 },
  { -12, -9, 9, -13, 0, 10, 19, 17, -3, -12, 13, 20, 46, 31, 19, -9, -19, 14, 28, 52, 110 },
  { -5, 0, 2, -9, 8, -5, -8, -9, 28, -3, -4, 12, 58, 46, 7, -7, -8, -1, 2, 71, 162 },
  { -23, -9, 23, -15, -6, 20, 27, 28, -5, -11, 23, 21, 30, 32, 33, -4, -34, 31, 36, 36, 46 },
  { -27, -8, 28, -10, -2, 25, 25, 31, 3, -13, 29, 17, 19, 30, 37, 2, -34, 33, 37, 25, 18 },
  { -72, 20, 38, 2, 25, 19, 28, 31, 50, 6, 23, 0, 3, 12, 38, 18, -84, 54, 33, 8, 8 },
  { -7, 3, 12, 3, -4, -10, -2, -13, 5, 2, -8, 17, 64, 28, -3, 4, -6, 4, 9, 81, 154 },
  { -5, -5, 12, -5, 2, 1, -9, 0, 3, -8, 3, 1, 55, 12, 4, -3, -5, 14, -12, 71, 260 },
  { -7, 0, 7, -2, -5, -7, 8, 0, 3, -5, 0, 20, 56, 29, 7, 4, -8, 6, 21, 67, 124 },
  { 2, 1, -8, -1, -3, -14, -1, -11, 0, 0, -12, 30, 80, 38, -10, 3, 2, -11, 4, 83, 168 },
  { -1, -5, 5, -8, 0, -4, -2, 2, -3, -7, -5, 11, 65, 27, 7, -9, -2, 4, 8, 77, 192 },
  { -3, -6, 6, -11, -5, 2, 3, 5, -3, -6, 2, 19, 61, 41, 16, -7, -6, 0, 15, 73, 120 },
  { -3, -8, 12, -14, -8, 5, 2, 13, -5, -8, 4, 15, 53, 39, 25, -8, -6, 5, 21, 66, 112 },
  { -1, -12, 11, -17, -19, 10, 15, 21, -15, -18, 10, 25, 52, 36, 26, -11, -6, 20, 27, 59, 86 },
  { -6, -11, 5, -9, -15, 14, 11, 17, 10, -15, 17, 28, 41, 37, 22, 7, -10, 10, 25, 49, 58 },
  { -1, 1, 5, 5, 4, -16, -10, -25, 10, 2, -19, 11, 86, 19, -26, 7, 1, 4, -11, 93, 232 },
  { -2, -8, 10, -2, -11, 10, -1, 3, -14, -6, 8, -3, 49, 22, 21, -2, -1, 5, 0, 80, 196 },
  { -6, -12, 11, -18, -14, 15, 14, 25, -2, -16, 17, 24, 41, 37, 32, -6, -12, 15, 28, 51, 64 },
  { -1, -5, 9, -15, -7, -3, 9, 14, -17, -13, -2, 16, 59, 34, 22, -18, -4, 13, 23, 71, 142 },
  { -2, -4, 10, -6, 4, -3, -14, -3, 4, -5, -3, -5, 61, 10, 1, -6, -2, 10, -15, 74, 300 },
  { -8, -2, 1, -30, 8, 4, 3, 28, 22, -6, 8, 18, 44, 51, 38, -19, -17, -1, 18, 56, 80 },
  { -44, -26, 72, -33, -17, 46, 14, 65, -21, -20, 45, 9, 25, 17, 65, -20, -64, 89, 13, 24, 34 },
  { -1, -6, 8, -4, 0, 8, -4, 9, 0, -8, 12, -8, 1, -7, 14, -3, -3, 16, -17, 16, 466 },
  { -4, -2, 16, -6, -3, 2, -16, -17, 10, 0, 0, -7, 46, 40, -3, -6, -4, 11, -22, 79, 284 },
  { -1, -3, 7, -18, 6, 8, -28, -12, 25, -1, 6, -2, 52, 73, 15, -16, -4, -1, -23, 71, 204 },
  { -4, -1, 15, 2, 3, -2, -34, -13, 3, 0, -6, -2, 72, 19, -10, 1, -3, 14, -37, 84, 310 },
  { -3, 1, 12, 0, 4, -13, -13, -17, 4, 4, -15, -5, 72, 17, -12, 0, -2, 3, -15, 97, 274 },
  { 2, 2, -3, -3, -2, -16, -1, -13, -5, 1, -18, 25, 72, 47, -3, -5, 3, -12, 11, 86, 176 },
  { -2, 3, 7, 1, 1, -17, -9, -20, -1, 5, -20, 12, 70, 39, -13, -1, 0, -1, -6, 89, 238 },
  { -2, -3, 7, -13, -2, 2, -16, 6, -1, -4, 1, 5, 50, 57, 24, -13, -4, 2, -6, 69, 194 },
  { -1, -2, 5, 3, 2, -3, -7, -16, 3, -1, -6, 2, 33, 20, -11, 1, 0, 7, -17, 52, 384 },
  { 2, 9, -8, 12, 4, -30, -4, -39, 9, 10, -31, 32, 88, 45, -38, 12, 5, -14, 0, 86, 212 },
  { 13, 15, -39, 19, 1, -44, 30, -54, 7, 14, -40, 51, 90, 60, -50, 20, 17, -45, 32, 84, 150 },
  { 6, 2, -10, 1, -9, -18, 10, -20, 0, 3, -17, 34, 73, 51, -15, 4, 8, -20, 19, 79, 150 },
  { -3, -2, 11, -1, 4, -5, -14, -11, 4, -1, -6, -10, 56, 8, -7, -2, -3, 12, -21, 71, 352 },
  { -2, -3, 7, -2, 0, 4, -9, 2, -2, -4, 3, -3, 14, 9, 5, -4, -3, 12, -16, 26, 444 },
  { 0, -2, 5, -4, 1, -3, 3, -1, -2, -5, -2, 2, 5, 14, 5, -6, 0, 6, 1, 13, 452 },
  { 2, -5, 1, -5, -1, 5, 3, 7, 0, -6, 7, 5, -11, 3, 9, -3, 2, 2, 5, -11, 494 },
  { -4, -2, 10, 0, -1, 8, -22, -13, 5, 0, 5, -11, 33, 28, -2, 0, -8, 17, -31, 31, 426 },
  { -3, -2, 9, -1, 1, 3, -17, -3, 0, -2, 1, -10, 39, 14, 3, -3, -3, 10, -23, 58, 370 },
  { -2, 1, -2, 8, -2, 18, 0, -7, -1, -1, 20, -48, 2, 13, 20, 5, -4, 0, -17, 51, 404 },
  { -1, -2, 4, 0, 0, 3, -4, -3, 1, -2, 3, -11, 13, 2, 0, -2, -1, 5, -8, 22, 474 },
  { -5, 2, 15, 3, 8, -15, -17, -26, 8, 6, -19, -6, 73, 23, -24, 3, -3, 5, -18, 98, 290 },
  { -1, 3, 6, 3, 4, -14, -21, -26, -1, 2, -16, 11, 72, 57, -9, -4, 4, -6, -15, 92, 230 },
  { 2, 10, -1, 0, -1, -33, 1, -25, -4, 12, -35, 36, 74, 62, -15, -5, 6, -24, 22, 91, 166 },
  { -4, -2, 13, 3, 3, 1, -20, -15, 4, -1, -2, -15, 47, 14, -10, 0, -5, 16, -28, 66, 382 },
  { -4, 6, 10, 9, 7, -24, -23, -37, 11, 8, -30, 31, 80, 48, -39, 10, -2, 5, -17, 80, 254 },
  { -1, 10, -4, 13, 6, -33, -4, -45, 9, 12, -37, 37, 85, 54, -44, 13, 3, -14, 3, 88, 210 },
  { 6, 4, -12, 8, 2, -22, 0, -37, 3, 4, -24, 31, 81, 61, -31, 7, 10, -19, 3, 83, 196 },
  { -3, -3, 10, 1, 1, 4, -15, -7, 4, -2, 4, -18, 34, 1, -6, 0, -4, 15, -26, 50, 432 },
  { -2, -2, 8, 0, 0, 4, -15, 0, 0, -2, 3, -11, 25, -3, 1, -1, -3, 12, -20, 34, 456 },
  { 1, -2, 2, -2, 0, 0, 0, 2, -2, -4, 1, 2, -2, 4, 4, -3, 2, 0, 3, 0, 500 },
  { -3, -2, 11, 1, 5, -2, -11, -18, 9, 1, -1, -30, 63, -2, -14, 2, -3, 9, -24, 88, 354 },
  { -3, -3, 8, 1, 1, 6, -10, -6, 3, -4, 3, -17, 24, 0, 0, -2, -3, 13, -17, 29, 466 },
  { -4, -2, 10, 2, 0, 6, -15, -8, 1, -3, 5, -16, 22, 19, -3, -1, -5, 13, -20, 38, 434 },
  { -1, -2, 5, 0, 0, 3, -6, -2, 0, -2, 3, -7, 7, 7, -1, -1, -2, 7, -10, 19, 478 },
  { -7, 10, 17, 5, 8, -39, -12, -33, 4, 16, -38, 19, 78, 44, -32, 6, 0, -12, 3, 110, 218 },
  { -1, -1, 2, 0, 0, 1, -3, 0, 0, -1, 2, -3, 3, 0, 0, 0, -1, 3, -4, 5, 508 },
  { -2, -2, 7, 0, -1, 5, -11, 1, 0, -2, 5, -12, 16, -4, 1, 0, -3, 10, -17, 24, 482 },
  { -5, 2, 13, 7, 9, -20, -10, -40, 8, 11, -29, 10, 62, 56, -38, 9, 0, -5, -7, 87, 272 },
  { -3, 9, 1, 10, 8, -32, -1, -43, 4, 13, -37, 26, 72, 62, -37, 8, 3, -16, 6, 92, 222 },
  { -6, -3, 17, 4, 1, 7, -28, -11, 2, 0, 4, -23, 46, 11, -10, 3, -7, 19, -38, 70, 396 },
  { -4, -3, 11, 2, 0, 7, -18, -4, 1, -2, 7, -19, 29, -1, -4, 1, -5, 15, -28, 45, 452 },
  { -5, -4, 15, 3, 6, -1, -15, -25, 11, 2, -4, -26, 55, 18, -23, 4, -5, 13, -26, 79, 368 },
  { -4, -3, 12, 2, 0, 6, -14, -7, 2, -2, 5, -16, 20, 9, -6, 0, -5, 14, -20, 32, 462 },
  { -7, 3, 14, 6, 10, -17, -13, -38, 15, 11, -25, -12, 82, 30, -39, 9, -4, 3, -15, 108, 270 },
  { -1, -2, 5, 0, -1, 4, -6, 0, 0, -2, 5, -12, 11, -3, 1, -1, -2, 7, -10, 16, 494 },
  { -6, -2, 14, 4, 0, 5, -19, -14, 1, -2, 3, -18, 28, 28, -10, -1, -5, 17, -26, 50, 418 },
  { -1, -1, 3, 0, 0, 2, -3, 0, 0, -1, 2, -5, 4, -1, 0, 0, -1, 4, -4, 5, 506 },
  { -2, -3, 8, 0, 2, 6, -15, -5, 6, -1, 6, -36, 56, -19, -4, 1, -2, 8, -23, 68, 410 },
  { 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, 1, -1, 1, 512 },
  { -3, -2, 7, 1, -1, 4, -8, -1, 0, -2, 4, -9, 8, 2, -1, 0, -4, 9, -10, 14, 496 },
  { -4, -4, 11, 1, -2, 10, -13, -4, 0, -1, 8, -25, 21, 3, -3, 1, -6, 12, -15, 30, 472 },
  { -2, -5, 15, -24, -4, 18, -15, -27, 41, 1, 9, -4, 43, 81, 28, -15, -4, -4, -22, 65, 162 },
  { -2, -1, 0, -9, -5, -5, 8, 5, 19, -10, -3, 21, 49, 37, 19, 15, -9, 0, 16, 58, 106 },
  { -7, -5, 12, -9, -7, 10, 8, 6, 38, -14, 9, 10, 34, 33, 26, 28, -12, 8, 8, 42, 76 },
  { -17, -7, 19, 8, 2, 22, 1, -1, 71, -21, 18, 11, 15, 12, 20, 55, -17, 15, -2, 28, 48 },
  { 1, -2, 4, -4, -1, -6, -4, -16, 15, -3, -10, 18, 66, 44, -1, 13, 1, -11, -5, 75, 164 },
  { -13, -10, 13, 1, -6, 21, 7, 14, 40, -18, 18, 14, 27, 29, 15, 31, -16, 17, 8, 36, 56 },
  { -19, -8, 20, 17, -5, 26, -1, 1, 82, -24, 22, 10, 9, 3, 9, 77, -14, 18, -8, 21, 40 },
  { -18, -9, 14, 18, -8, 22, 2, 7, 78, -25, 21, 13, 13, 2, 15, 70, -15, 19, -1, 19, 38 },
  { 2, -7, 4, 8, 3, -15, -3, -29, 20, -8, -6, 14, 83, 23, -30, 20, 8, -6, -11, 83, 206 },
  { -8, -6, 4, -2, -8, 10, 10, 11, 36, -19, 12, 17, 33, 27, 25, 33, -16, 12, 15, 39, 62 },
  { -11, -4, 6, -19, 1, 9, 19, 24, -1, -8, 6, 15, 42, 45, 28, -3, -21, 13, 20, 45, 100 },
  { -34, -2, 34, -22, -2, 18, 28, 38, 0, -6, 13, 6, 27, 39, 42, 6, -49, 45, 25, 29, 42 },
  { -54, 2, 61, -19, 5, 35, 21, 39, 27, -14, 23, -14, 3, 24, 48, 27, -68, 65, 25, 14, 12 },
  { -2, -4, 10, -8, 4, 4, -7, -18, 27, -3, 2, -11, 46, 46, 18, 1, -2, -3, -13, 60, 218 },
  { -2, 0, 4, -8, -4, -5, 6, 2, 24, -8, -2, 11, 48, 38, 19, 17, -8, -2, 13, 58, 110 },
  { -8, 6, -2, -6, 16, 11, -18, -21, 107, 2, 4, -13, 12, 60, 45, 26, -20, -20, -17, 44, 96 },
  { 0, 1, 6, -12, 1, -8, -7, -7, 8, 3, -14, 4, 64, 42, 13, -1, -1, -8, -7, 77, 204 },
  { 1, 0, 1, -16, -2, -5, 6, 7, 12, -3, -8, 13, 49, 48, 29, 8, -7, -10, 14, 62, 114 },
  { -2, -5, 2, -14, -5, 8, 10, 12, 40, -17, 9, 16, 32, 34, 31, 31, -14, 1, 16, 42, 58 },
  { 0, 1, 10, -13, -1, -7, -7, -10, 9, 4, -14, 2, 60, 49, 13, 0, -1, -8, -5, 80, 188 },
  { 2, -3, 5, -15, -2, 0, -2, -11, 18, 2, -6, 7, 56, 53, 12, 4, -3, -12, -2, 71, 164 },
  { -1, 0, 11, -5, -1, -10, -9, -24, 14, 5, -12, 1, 73, 36, -10, 8, -1, -3, -15, 85, 228 },
  { -1, -2, 0, -19, -4, 1, 12, 16, 33, -13, 3, 16, 34, 43, 33, 23, -14, -4, 20, 47, 64 },
  { -4, -1, 3, -18, 0, 4, 8, 2, 63, -19, 6, 18, 25, 33, 24, 58, -16, -11, 7, 43, 62 },
  { -2, 1, -1, -29, 6, -7, 17, 29, -5, 0, -12, 16, 48, 53, 38, -8, -15, 1, 18, 57, 102 },
  { -26, -1, 26, -36, -2, 18, 27, 54, 11, -15, 17, 6, 21, 38, 52, 13, -52, 50, 17, 27, 22 },
  { 0, -4, 11, -11, 5, 0, -4, -5, 14, -7, 5, -15, 27, 20, 20, 2, -4, 6, -19, 47, 336 },
  { -5, 5, -11, -19, 0, 6, 6, 6, 93, -14, 13, 16, 18, 33, 34, 42, -25, -4, 9, 31, 44 },
  { -1, -3, 20, -23, 3, 3, -13, -17, 35, 3, -3, -13, 39, 69, 42, 9, -9, -19, -8, 68, 148 },
  { -4, -2, 11, -5, -3, 20, -5, -68, 41, 1, 21, -10, -1, 107, 28, -13, -5, 4, -50, 53, 272 },
  { -4, -3, 12, -20, 2, 30, -15, -54, 66, 4, 19, -25, 3, 110, 55, -9, -7, -12, -41, 55, 180 },
  { -5, 0, 9, -28, 12, 13, -19, -17, 93, 4, 3, -10, 19, 75, 51, 5, -18, -15, -12, 49, 94 },
  { -3, 0, 16, -5, 0, -5, -13, -18, 3, 9, -13, -15, 62, 39, 5, -5, -1, -2, -14, 92, 248 },
  { -1, 1, 16, -13, -1, -8, -13, -10, -1, 11, -18, 0, 58, 61, 29, -6, 0, -14, -4, 83, 172 },
  { 2, -1, 9, -19, 0, 0, -8, -4, 16, 4, -10, -3, 39, 72, 48, 4, -2, -20, -3, 65, 134 },
  { 2, -4, 12, -17, -3, 7, -7, -20, 19, 3, -1, -11, 26, 90, 57, -4, -2, -14, -15, 61, 154 },
  { -1, -2, 10, -2, 0, 2, -18, -14, 0, 1, -1, -10, 54, 37, 3, -4, 0, 3, -22, 65, 310 },
  { 6, -1, -2, -14, -1, -7, -1, -3, -3, 5, -16, 18, 59, 61, 15, -3, 3, -22, 8, 77, 154 },
  { 6, -1, 1, -26, -4, -7, 8, 16, 13, 2, -14, 14, 35, 56, 54, 11, -7, -22, 21, 59, 82 },
  { 3, 10, -13, 14, 4, -33, 2, -47, 14, 11, -32, 31, 92, 50, -51, 17, 5, -18, 7, 88, 204 },
  { 2, -1, 15, -22, -1, -6, -6, 1, 5, 9, -16, 2, 43, 64, 52, 4, -4, -23, 7, 68, 126 },
  { 0, -3, 5, -1, 0, 5, -5, -11, -2, -1, 4, -15, 16, 44, 15, -5, -2, 5, -14, 32, 378 },
  { 0, -5, 12, -10, 4, 2, -10, -10, 0, -1, -2, -20, 44, 61, 31, -11, 2, -2, -17, 63, 250 },
  { -2, -2, 3, 8, -5, 11, -2, -44, 10, 0, 11, -15, 14, 78, 7, -4, -5, 11, -34, 48, 336 },
  { -2, -2, 5, 2, -3, 15, -6, -43, 17, 1, 12, -22, 8, 105, 35, -6, -4, 1, -38, 52, 258 },
  { -2, -1, 0, 5, -3, 11, 2, -29, 9, -1, 12, -24, 1, 86, 41, -7, -3, 5, -32, 40, 292 },
  { 1, -2, 13, -26, 1, 24, -9, -55, 64, 4, 10, -33, -3, 107, 89, 11, -7, -26, -41, 53, 162 },
  { -2, -3, 11, 5, -1, 9, -28, -27, -3, 1, 3, -15, 55, 73, 5, -3, -2, 11, -44, 81, 260 },
  { -1, -4, 5, 5, 1, 7, -12, -18, -1, -4, 9, -23, 36, 33, 4, -3, -1, 11, -30, 56, 372 },
  { -2, -3, 9, 3, -1, 8, -11, -29, -6, -1, 6, -22, 32, 85, 16, -10, 1, 5, -29, 65, 280 },
  { -2, 4, 13, -6, 1, -15, -15, -10, -17, 14, -25, 4, 64, 72, 26, -11, 3, -17, 1, 88, 168 },
  { 6, 1, 10, -21, -1, -16, -9, 11, -16, 14, -30, 14, 53, 74, 51, -12, 3, -23, 13, 73, 122 },
  { 0, -1, -2, 7, -2, 7, 1, -21, -1, -2, 8, -20, 16, 39, -6, 1, -2, 8, -20, 39, 414 },
  { -3, -3, 13, 4, -1, 6, -22, -23, -3, 1, 2, -20, 50, 55, -2, -4, -1, 11, -32, 73, 310 },
  { -3, 0, 15, 8, -2, -5, -30, -44, 13, 7, -10, 10, 74, 62, -35, 9, -1, 5, -31, 81, 266 },
  { 3, 5, -5, 10, -2, -18, -9, -48, 10, 12, -24, 26, 88, 64, -38, 13, 8, -21, -7, 90, 198 },
  { -2, -6, 12, -3, -4, 16, -9, -42, 7, 1, 7, -20, 23, 116, 29, -10, 3, -1, -37, 59, 234 },
  { 0, -3, 4, -1, 1, 3, -4, -2, -2, -2, 4, -12, 13, 8, 9, -4, 1, 2, -8, 17, 464 },
  { 0, -4, 15, -8, 1, 1, -20, -9, -10, 5, -6, -18, 49, 82, 36, -10, 4, -6, -23, 72, 210 },
  { -2, -3, 4, 9, -2, 12, -10, -34, -4, -1, 9, -25, 24, 93, 16, -5, -3, 10, -35, 59, 288 },
  { -1, -2, -1, 9, -3, 12, 0, -27, -8, -2, 10, -31, 14, 86, -2, -2, -3, 8, -20, 53, 332 },
  { 0, -1, -2, 6, -1, 6, 0, -11, -4, -2, 6, -16, 0, 46, -3, 2, -3, 5, -9, 24, 426 },
  { -1, -1, -3, 9, -3, 11, 2, -24, -6, -3, 12, -31, 10, 75, -9, 1, -3, 8, -17, 46, 366 },
  { -4, 0, 11, 3, 0, 0, -12, -23, 0, 8, -6, -33, 66, 37, -9, -1, -1, 1, -18, 102, 270 },
  { 0, 0, 0, 2, -2, 3, 0, -5, -1, -1, 5, -10, 5, 11, -3, 1, -1, 2, -5, 12, 486 },
  { -4, -4, 8, 10, -3, 10, -10, -32, 0, 2, 9, -38, 42, 56, -16, 1, -4, 13, -31, 84, 326 },
  { 0, 1, 9, 3, 1, -16, -12, -16, -23, 12, -24, 7, 66, 73, 14, -4, 10, -28, 5, 92, 172 },
  { -1, -1, -1, 6, -3, 7, -1, -13, -2, -1, 8, -18, 9, 32, -9, 3, -3, 5, -11, 27, 446 },
  { -6, -4, 21, 5, -2, 4, -23, -26, -12, 8, -4, -29, 54, 80, 4, -9, 1, 6, -27, 95, 240 },
  { 0, 0, 0, 1, -1, 2, 0, -2, 0, -1, 2, -5, 1, 6, -2, 1, -1, 1, -2, 6, 500 },
  { -2, -3, 7, 4, -2, 8, -7, -22, 7, 1, 7, -27, 29, 34, -28, 8, -2, 3, -16, 58, 398 },
  { -2, -1, 3, 8, -3, 9, -13, -15, -4, -3, 12, -24, 30, 29, -6, 3, -5, 16, -35, 57, 400 },
  { 0, 0, -3, 5, -4, 5, 5, -16, 1, -1, 10, -20, 9, 29, -14, 4, -1, 2, -8, 27, 452 },
  { 0, 0, -1, 4, -2, 4, -1, -9, 0, -2, 7, -14, 9, 16, -5, 2, -2, 5, -10, 20, 470 },
  { -4, -2, 14, 8, -1, 2, -28, -33, 2, 9, -9, -3, 58, 74, -41, 15, 0, -8, -15, 76, 284 },
  { -3, -2, 6, 12, -3, 11, -16, -31, -6, 0, 10, -23, 34, 69, -17, 6, -3, 9, -36, 67, 344 },
  { -5, -1, 6, 11, -4, 15, -15, -23, -12, 0, 11, -42, 28, 93, 10, -3, -4, 14, -33, 64, 292 },
  { -2, -1, -2, 12, -5, 14, -4, -24, -5, -2, 13, -36, 16, 72, -9, 3, -5, 11, -19, 46, 366 },
  { -2, -3, 1, 11, -5, 14, -2, -21, -6, -2, 13, -37, 11, 66, -3, 4, -5, 9, -16, 37, 384 },
  { -1, -1, 0, 6, -3, 7, -1, -11, -2, -2, 9, -22, 7, 33, -7, 3, -3, 5, -8, 24, 446 },
  { -1, 7, -7, -19, -2, -1, 11, 7, 29, -7, -1, 18, 44, 34, 34, 19, -11, -9, 13, 48, 100 },
  { -2, 4, 7, -7, -1, 1, -6, -3, 33, -21, 5, 1, 31, 20, 49, 57, -10, -3, 21, 38, 84 },
  { -12, -17, 20, 14, -6, 22, 4, 27, 70, -16, 17, -17, 11, -5, 29, 76, 4, 31, -15, 5, 28 },
  { -6, -12, 24, 12, -9, 10, 3, 27, 52, -11, 10, -19, 8, 0, 36, 84, 19, 31, -17, -2, 32 },
  { -4, 7, -19, 6, 9, 2, -6, 20, 131, -10, 11, -16, -11, -10, 48, 100, -2, 3, -21, 3, 30 },
  { -1, -2, 5, 6, -13, 6, 8, 13, 44, -26, 14, 3, 36, 13, 32, 61, 2, 23, 0, 13, 38 },
  { -3, 1, 5, -30, 17, 28, -12, -31, 85, 2, 10, -20, -8, 58, 94, 22, -6, -39, -17, 48, 104 },
  { 0, -4, 2, -9, 7, -1, 15, 9, 44, -25, 15, -9, 51, 6, 37, 47, 1, 6, 1, 12, 102 },
  { -1, 2, 1, -15, -3, 2, 3, 7, 24, -11, 9, 15, 40, 36, 33, 28, -11, -1, 9, 39, 100 },
  { -7, -1, -6, 9, -4, 7, 3, 23, 78, -13, 14, -3, 10, 5, 39, 70, 1, 14, -10, 10, 34 },
  { -9, -6, 22, -16, -7, 18, -5, 8, 93, -43, 25, -19, -9, -25, 55, 139, 10, 34, -13, -4, 16 },
  { -4, -4, 10, -9, -4, 11, -1, 9, 46, -30, 21, 4, 18, 12, 38, 69, -12, 19, 3, 26, 68 },
  { -16, 10, 5, -15, -3, 14, 19, 27, 30, -18, 13, 5, 24, 35, 38, 41, -34, 33, 12, 19, 34 },
  { -8, 5, 3, -3, -5, 15, 2, 15, 64, -31, 18, 10, 17, 4, 46, 76, -17, 21, -3, 13, 28 },
  { -4, -1, 11, -26, 1, 39, 2, -73, 86, 4, 28, -13, -12, 96, 92, -29, -9, -11, -46, 46, 150 },
  { -5, 20, -10, -8, 24, 11, -19, -8, 107, 2, -6, -20, -16, 32, 71, 63, -19, -29, -13, 42, 74 },
  { -1, 2, 12, -23, 1, 8, -12, -25, 61, 3, -2, 0, 29, 58, 46, 9, -6, -8, -17, 56, 130 },
  { -2, 9, -5, -24, 1, -3, 14, 6, 44, 4, -8, 16, 32, 42, 46, 22, -17, -13, 11, 45, 72 },
  { -1, 5, 5, -21, 1, -2, -2, -17, 64, 4, -11, 10, 33, 42, 40, 36, -9, -11, -8, 47, 102 },
  { -1, 10, -2, -22, 0, 5, 7, -7, 63, -8, -3, 13, 17, 22, 54, 72, -20, -20, 13, 35, 56 },
  { -1, 8, 4, -34, -4, 17, 3, -10, 95, -25, 13, 11, -2, 9, 45, 108, -15, -10, -2, 23, 46 },
  { 1, 2, 6, -20, -1, 0, 5, -16, 24, 2, -11, 12, 48, 52, 39, 13, -5, -18, 0, 59, 128 },
  { 0, 4, 7, -15, -4, -2, 2, -5, 25, -3, -7, 15, 38, 38, 37, 34, -10, -7, 6, 50, 106 },
  { -2, 1, -1, -22, -10, 18, 10, 6, 66, -18, 23, 16, 12, 11, 33, 85, -9, 5, -10, 17, 50 },
  { -2, 10, 4, -40, -2, 17, -1, -13, 96, -43, 28, 1, -12, -1, 35, 168, -17, -2, -10, 18, 44 },
  { -5, 5, -8, -14, -8, 9, 22, 14, 41, -9, 11, 19, 24, 33, 29, 47, -14, -2, 4, 30, 56 },
  { -1, 5, 6, -28, 3, 9, -2, -19, 96, -7, 0, 5, 5, 23, 71, 72, -18, -26, 4, 32, 52 },
  { 0, 5, 5, -28, 3, 4, 3, -18, 77, 2, -9, 7, 21, 35, 61, 35, -12, -22, -2, 47, 84 },
  { -1, 16, -20, -21, 0, 5, -10, 8, 124, -18, 17, 8, 7, 21, 36, 61, -9, 7, -13, 16, 44 },
  { -3, -2, 11, -13, -5, 28, 9, -98, 85, -4, 26, -2, -14, 109, 76, -34, -4, 4, -45, 42, 180 },
  { -4, -2, 12, -28, 0, 44, -2, -79, 108, 0, 27, -18, -22, 97, 94, -20, -5, -16, -42, 43, 138 },
  { -1, 6, 10, -18, -6, 7, 0, -21, 31, -3, -8, 10, 24, 30, 60, 61, -13, -14, 11, 49, 82 },
  { 0, -3, 9, -3, -1, 6, -8, -36, 18, -1, 6, -8, 31, 82, 28, -11, 0, 3, -27, 60, 222 },
  { 0, 0, 15, -19, 1, -1, -8, -21, 37, 7, -9, 2, 36, 55, 49, 11, -3, -19, -5, 62, 132 },
  { 0, 2, 13, -20, 0, -3, -5, -26, 52, 9, -10, 6, 26, 42, 57, 29, -6, -25, 1, 61, 106 },
  { 2, 8, -1, -24, 0, 2, 6, -22, 60, -1, -7, 18, 17, 30, 69, 58, -13, -28, 10, 39, 66 },
  { 2, -1, 7, -13, -4, 3, -4, -21, 12, 5, -7, 3, 49, 64, 11, -1, 0, -9, -11, 75, 192 },
  { 1, 1, 10, -25, 1, 1, 1, -21, 43, 4, -8, 8, 30, 56, 65, 20, -8, -21, -1, 52, 94 },
  { 2, -7, 13, -9, -3, 8, -6, -41, 31, 2, 3, -11, 40, 81, 37, -10, 2, -1, -29, 59, 190 },
  { 0, -3, 10, -4, -2, 6, -10, -28, 21, 1, 4, -12, 36, 57, 37, -3, -1, 0, -25, 50, 244 },
  { 1, -2, 16, -21, 2, -4, -6, -18, 36, 6, -11, -1, 37, 58, 55, 11, -3, -17, -2, 58, 122 },
  { -1, -2, 16, -7, -3, 1, -9, -33, 25, 6, -4, -10, 40, 66, 42, 7, -1, -6, -19, 61, 174 },
  { 0, -2, 19, -17, -2, 4, -13, -32, 45, 6, -5, -4, 32, 70, 54, 8, -2, -11, -14, 54, 132 },
  { -1, 0, -1, 8, -5, 11, 4, -71, 45, -4, 14, 2, 8, 90, 38, -16, -5, 13, -36, 40, 244 },
  { -1, -3, 1, -2, -4, 23, 9, -84, 71, -2, 20, -6, -12, 106, 78, -13, -4, -1, -41, 32, 178 },
  { -1, -3, 5, -25, -1, 36, 5, -99, 122, -1, 27, -16, -34, 106, 103, -2, -3, -11, -40, 16, 144 },
  { -2, 0, 11, -66, 10, 41, -25, -72, 200, -1, 32, -38, -29, 93, 108, -13, -2, -4, -51, 8, 112 },
  { -4, 2, 22, -13, -3, -8, -9, -21, 20, 12, -15, -9, 53, 45, 20, 4, -3, -8, -4, 83, 184 },
  { 0, -5, 12, -6, 0, 3, -8, -25, 14, -2, 4, -9, 30, 50, 16, -11, 4, 0, -20, 65, 288 },
  { 0, -8, 21, -15, 0, 8, -10, -32, 23, 2, 3, -11, 34, 74, 50, -9, 3, -12, -19, 63, 182 },
  { 8, 1, 3, -25, 6, -13, 4, -9, 25, 7, -16, 15, 39, 57, 53, 7, -6, -24, 11, 57, 112 },
  { 2, -3, 6, 0, -3, 0, -4, -28, 4, 1, 4, -6, 30, 71, -10, 1, 1, 1, -19, 55, 306 },
  { 12, -4, -7, -4, -3, -17, 8, -25, 5, 13, -27, 30, 74, 48, 11, 12, 8, -33, 2, 79, 148 },
  { -1, 1, -2, 10, -5, 11, 0, -46, 12, -2, 9, -18, 19, 105, 30, -10, -2, 9, -30, 48, 236 },
  { 1, 0, -3, 8, -1, 4, 3, -28, 4, -4, 9, -16, 13, 65, 10, -5, -2, 8, -18, 33, 350 },
  { -1, -3, 13, -5, -3, 6, -9, -28, 17, 1, 4, -15, 29, 69, 41, -9, 3, -1, -25, 56, 232 },
  { -2, -4, 17, -12, -1, 6, -12, -25, 31, 8, -2, -15, 26, 84, 61, -4, 0, -11, -17, 59, 138 },
  { 1, -7, 21, -18, 4, -7, -9, -22, 39, 14, -11, -10, 30, 66, 80, 23, 0, -28, -2, 45, 94 },
  { -2, -5, 12, -8, 1, 15, 9, -88, 107, -5, 15, -12, -12, 102, 83, -28, -4, 10, -33, 20, 158 },
  { 0, 2, -9, 15, -2, 5, 5, -52, 19, -3, 10, -5, 7, 87, 20, -4, -4, 9, -29, 43, 284 },
  { 0, -1, -3, 11, -4, 11, 7, -69, 46, -4, 15, -9, -3, 112, 50, -11, -4, 8, -31, 34, 202 },
  { -2, -6, 17, -31, 1, 23, 0, -95, 173, -6, 21, -14, -18, 109, 74, -54, -2, 28, -37, 11, 128 },
  { -1, 0, 2, 9, -4, 4, -6, -33, 1, -2, 15, -32, 45, 75, 6, 2, -3, 13, -32, 56, 282 },
  { -5, -2, 22, -5, -4, -3, -13, -16, -2, 13, -6, -28, 55, 59, 19, -3, 0, -4, -14, 88, 210 },
  { 0, 0, 0, 2, 1, 0, 0, -5, -2, -2, 2, -5, 4, 17, 3, -2, 0, 4, -4, 8, 470 },
  { -3, -4, 15, 1, -3, -3, -8, -20, -13, 17, -9, -24, 50, 68, 27, -9, 2, -13, -9, 98, 192 },
  { 0, 2, -7, 11, -2, 3, 0, -20, -6, -1, 5, -8, 9, 61, -13, 6, -3, 7, -20, 38, 388 },
  { 0, -1, -3, 12, -1, 5, -2, -29, 1, -3, 8, -21, 13, 86, -1, -3, -5, 15, -22, 54, 306 },
  { 0, 1, -3, 4, -2, 2, 3, -9, -5, -1, 5, -11, 3, 40, -3, 2, -1, 2, -5, 16, 436 },
  { 0, 2, -3, 8, -5, 3, 0, -21, 0, 1, 8, -9, 9, 47, -21, 8, -2, 2, -16, 36, 418 },
  { 0, 1, -4, 12, -5, 5, -3, -29, -2, 0, 11, -16, 21, 68, -20, 9, -3, 7, -29, 59, 348 },
  { 0, -6, 7, 3, -5, 8, -3, -26, 0, 3, 8, -30, 35, 59, -21, 5, 1, -1, -21, 83, 314 },
  { 0, 0, 0, 12, -7, 5, -4, -39, 1, 1, 11, -10, 19, 87, -30, 9, -3, 6, -29, 56, 342 },
  { -1, -4, 5, 12, -3, 10, -10, -32, 5, -2, 9, -29, 16, 107, 23, -5, -3, 15, -28, 57, 228 },
  { 1, -4, 3, 11, -6, 9, -3, -40, 15, -3, 12, -24, 4, 120, 38, -4, -1, 9, -27, 41, 210 },
  { 1, 0, -6, 11, -2, 4, 2, -20, -7, -3, 9, -19, 6, 80, -7, 6, -2, 5, -14, 33, 358 },
  { -4, -5, 10, 9, -2, 13, -9, -39, 19, -1, 11, -31, 6, 112, 56, -6, -1, 8, -30, 43, 194 },
  { 0, 1, -6, 13, -3, 6, 5, -26, -6, -4, 11, -23, 3, 106, 13, 1, -4, 9, -18, 31, 294 },
  { 0, 2, -8, 11, -2, 3, 3, -21, 0, -1, 9, -17, 7, 60, -11, 3, -4, 7, -15, 41, 378 },
  { 1, 3, -6, 5, -4, 2, 9, -10, -11, -1, 9, -17, -2, 65, -12, 5, -1, -1, -5, 26, 402 },
  { 0, -5, 6, -7, 0, -2, -2, -4, -4, -14, -3, 14, 49, 24, 5, 5, -1, 8, 17, 79, 182 },
  { -5, -6, 11, -11, -12, 8, 7, 5, -3, -15, 14, 23, 35, 28, 17, 23, -14, 33, 32, 50, 72 },
  { -5, -8, 12, -12, -18, 15, 14, 8, -2, -15, 20, 24, 33, 24, 16, 28, -6, 33, 29, 38, 56 },
  { -7, -6, 23, -7, -22, 13, 4, 2, -4, -11, 9, 18, 31, 23, 7, 28, 2, 35, 24, 53, 82 },
  { -2, 1, 3, -4, -3, -10, -2, -8, 0, -13, 0, 25, 56, 28, 2, 9, -6, 6, 28, 79, 134 },
  { -4, -1, 9, -4, -7, -4, 2, -4, -2, -10, 4, 21, 49, 24, 3, 14, -7, 14, 26, 68, 130 },
  { 1, 1, 0, 9, 11, -26, -14, -28, 11, -3, -23, 29, 88, 30, -34, 13, 22, -11, -10, 94, 192 },
  { -2, -6, 11, -6, -17, 8, 10, 3, -21, -18, 5, 17, 38, 26, 14, 7, -1, 30, 30, 65, 126 },
  { -16, -10, 23, -8, -23, 36, 13, 11, 20, -3, 18, 17, 3, 8, 1, 76, 12, 52, 12, 13, 2 },
  { 0, -12, 6, -27, -4, 12, 16, 20, -6, -22, 16, 24, 41, 28, 22, 0, -24, 30, 35, 54, 94 },
  { -24, -9, 41, -25, -6, 28, 11, 24, 0, -17, 28, 16, 15, 22, 35, 23, -43, 45, 38, 33, 42 },
  { -35, 6, 35, -22, -5, 32, 18, 25, 21, -15, 30, 11, 6, 15, 19, 47, -56, 65, 29, 21, 18 },
  { -2, -3, 11, -2, -4, 9, -6, 1, -8, -9, 3, -11, 18, 1, 5, 16, -3, 13, -4, 94, 274 },
  { -4, -4, 14, -13, 0, 13, -11, -10, -3, -4, 2, 3, 27, 40, 40, 22, -16, 4, 21, 69, 132 },
  { 13, -23, 8, -27, 34, -5, 18, -22, 44, -27, -7, -33, 53, -17, -7, -3, 20, 10, 14, 78, 270 },
  { -7, -3, 31, -6, 9, 2, -8, -34, 44, -5, 19, -4, 30, 4, 11, 61, 2, 16, 17, 28, 98 },
  { -1, 1, 8, -3, 0, -8, -10, -7, -11, -10, -11, 13, 54, 33, 12, 1, -3, 5, 20, 90, 166 },
  { 0, -1, 5, -9, -5, -6, -2, 3, -14, -14, 2, 25, 49, 33, 20, 8, -13, 11, 34, 73, 114 },
  { 1, -9, 6, -19, -17, 13, 8, 15, -16, -24, 19, 27, 40, 33, 25, 13, -15, 34, 33, 54, 70 },
  { 1, 0, -4, -1, 1, -11, -1, -10, -8, -7, -12, 26, 67, 37, -1, 6, -1, -1, 13, 83, 158 },
  { -3, -1, -1, 14, -6, 16, -3, -15, -3, 1, 18, -32, -21, 1, 36, 27, 3, -5, -14, 104, 280 },
  { -2, -1, 3, 4, 5, -6, -6, -13, 0, -3, -17, -1, 60, 13, -15, 5, 1, 11, -10, 96, 264 },
  { 0, -15, 27, -25, -36, 30, 8, 29, -28, -36, 33, 16, 27, 22, 41, -2, -15, 70, 36, 46, 56 },
  { 1, -8, 10, -32, -12, 13, 10, 32, -17, -28, 27, 27, 33, 31, 41, 8, -31, 37, 40, 47, 54 },
  { -2, -3, 9, -11, 0, 1, -5, 8, -12, -17, 1, 12, 45, 27, 22, -5, -11, 14, 26, 76, 162 },
  { -2, -2, 6, -2, -4, 4, -1, 0, -6, -8, 6, -10, 20, -1, 12, -1, 0, 15, -22, 81, 342 },
  { -5, -16, 36, -48, -32, 42, 5, 49, -16, -37, 49, 22, 8, 21, 54, 16, -27, 49, 39, 37, 20 },
  { 2, -9, 10, -12, 2, 7, -1, 6, 5, -14, 19, -18, 5, -13, 15, -2, -2, 28, -38, 50, 432 },
  { -2, -6, 18, -7, -16, 2, 10, 9, -26, -25, -2, 12, 38, 27, 20, -20, -7, 44, 42, 79, 132 },
  { 0, -11, 22, -32, 6, 11, -12, 1, 19, -18, 9, 4, 23, 32, 32, 22, -17, 16, 34, 65, 100 },
  { -4, -1, 9, -3, 0, 17, -13, -18, -11, 8, -1, -12, 14, 40, 48, 24, -14, -23, 1, 95, 200 },
  { -3, 1, 13, -5, 1, -9, -8, -8, -2, 2, -16, 2, 48, 14, -2, 8, -5, -6, 12, 107, 224 },
  { -3, -1, 9, 5, 4, -2, -17, -18, -3, 1, -15, -2, 50, 27, 1, -2, 0, -2, -11, 101, 268 },
  { -3, 2, 9, 3, 4, -14, -8, -18, -10, 0, -22, 12, 54, 35, 9, -4, -1, -11, 21, 101, 194 },
  { 2, -2, 9, -7, 0, -11, -6, -7, -20, -2, -14, 11, 49, 41, 33, 1, -3, -11, 28, 86, 158 },
  { -2, 6, -1, 9, 7, -22, -8, -31, 6, 5, -28, 21, 79, 36, -30, 7, 2, -6, 0, 88, 236 },
  { 3, 1, -3, 0, 3, -16, -1, -12, -17, -1, -19, 26, 62, 44, 11, 6, -1, -18, 25, 84, 158 },
  { -1, 0, 9, -4, 0, -9, -7, -6, -17, -8, -12, 10, 43, 40, 30, -7, -7, 1, 33, 92, 152 },
  { 0, 5, -6, 14, 7, -27, -3, -41, 5, 9, -31, 25, 84, 49, -36, 20, 5, -18, 4, 89, 204 },
  { -2, -3, 7, 1, 3, 0, 0, -17, 1, 3, -10, -22, 45, 5, -1, -2, -1, 3, -16, 97, 330 },
  { -1, -3, 5, -2, 0, 5, -2, -1, -4, -6, 5, -8, 3, 7, 13, -3, -3, 11, -9, 27, 444 },
  { -1, -4, 6, 0, 2, 5, -2, -9, -3, -2, -5, -18, 21, 14, 10, -7, -2, 6, -4, 69, 360 },
  { -1, -3, -2, 8, -2, 20, -10, -19, -15, 4, 0, -10, 13, 26, 30, 14, -8, -6, -27, 86, 316 },
  { 1, -4, 8, -14, 13, 10, -5, -16, -33, 7, -9, -11, 17, 42, 72, 69, -37, -34, 37, 80, 126 },
  { -2, -3, 11, 1, 4, -7, 0, -19, 0, 5, -20, -10, 46, 14, -5, 0, -2, -5, 0, 116, 264 },
  { -4, -3, 7, -2, 3, 9, -8, -9, -4, -5, -1, -12, 16, 30, 23, -5, -6, 5, -8, 86, 288 },
  { -1, -2, -2, 11, -4, 9, 5, -16, -2, -2, 22, -38, -9, 3, 34, 12, -2, 0, -16, 85, 338 },
  { -3, -1, 20, -5, 4, -12, -7, -16, -11, 11, -30, 4, 41, 32, 18, 2, -1, -24, 20, 117, 194 },
  { -4, -3, 11, 5, 5, -5, -6, -24, 2, 8, -20, -7, 43, 22, -10, 1, 0, -9, -5, 103, 298 },
  { -4, 4, 5, 12, 6, -15, -9, -28, -16, 4, -24, 10, 52, 46, 12, -1, 5, -23, 12, 101, 214 },
  { -1, -2, 5, 7, 2, -5, -10, -14, -36, 7, -18, 6, 45, 55, 44, 1, 2, -37, 24, 95, 172 },
  { -3, -3, 5, 6, 1, 6, -5, -17, 0, 4, -7, -23, 31, 20, -10, 1, -2, 0, -12, 93, 342 },
  { -5, 3, 10, 8, 5, -13, -14, -24, -6, 7, -24, 8, 54, 39, -3, 1, 0, -14, 5, 97, 244 },
  { -5, 4, 11, 10, 7, -16, -23, -36, 10, 12, -35, 21, 76, 44, -41, 13, 0, -6, -3, 81, 264 },
  { 1, 15, -18, 19, 9, -48, 15, -56, 9, 15, -47, 52, 86, 62, -49, 19, 10, -34, 26, 76, 188 },
  { -2, -5, 12, -1, 2, 4, -13, -6, 3, 3, 0, -22, 37, -3, -5, 1, -4, 13, -38, 92, 376 },
  { -3, -5, 14, 1, 6, -8, -4, -20, 6, 9, -14, -19, 55, 3, -13, 4, -1, -5, -18, 117, 302 },
  { -1, -1, 2, 1, -1, 5, -2, -3, -1, -2, 4, -13, 6, 3, 5, -3, -2, 6, -10, 37, 452 },
  { -1, -2, 3, 1, 0, 2, 1, -5, -1, -2, 3, -11, 7, 2, 4, -2, -1, 2, -4, 26, 468 },
  { -1, -3, 2, 5, -1, 8, -3, -10, -5, 2, -2, -17, 18, 7, 9, -1, -2, 0, -15, 75, 380 },
  { -4, -4, 7, 10, 0, 4, -6, -19, -7, 4, -6, -19, 23, 25, 10, -2, -2, -1, -15, 104, 308 },
  { -5, -4, 8, 12, -2, 15, -23, -15, -11, 9, -8, -21, 36, 27, 8, 7, -6, 3, -27, 99, 308 },
  { -3, -3, 4, 4, -1, 7, 1, -13, 0, 0, 3, -26, 9, 16, 6, -5, -4, 9, -13, 70, 390 },
  { -6, 0, 19, 6, 7, -21, -8, -33, -5, 16, -41, 17, 55, 45, -7, 1, -2, -26, 33, 111, 190 },
  { -1, -2, 3, 0, -1, 4, -3, -1, 0, -1, 4, -9, 6, -1, 1, 0, -2, 4, -7, 16, 492 },
  { -2, -4, 7, 3, 0, 8, -11, -8, 1, 1, 4, -26, 29, 3, -3, 1, -4, 13, -36, 82, 396 },
  { -4, 0, 3, 15, 3, -4, -4, -25, -12, 11, -15, -13, 39, 27, 1, 8, 2, -19, -13, 111, 290 },
  { 0, -2, 2, 1, -1, 4, -2, -4, 0, -1, 6, -17, 14, -1, 1, 1, -1, 4, -14, 37, 458 },
  { -6, -6, 13, 9, 2, 12, -22, -18, 0, 2, -5, -23, 37, 25, -9, 1, -3, 10, -34, 103, 336 },
  { -3, 6, -3, 17, 7, -25, 2, -42, -3, 11, -35, 26, 63, 55, -30, 13, 8, -35, 22, 85, 234 },
  { -3, -5, 8, 8, -1, 11, -7, -22, -1, 5, -2, -27, 32, 23, -15, 9, 1, -12, -3, 61, 392 },
  { 0, -1, 2, 0, 0, 2, -2, 0, 0, -1, 2, -4, 2, 0, 1, 0, -1, 2, -5, 9, 500 },
  { 0, -1, 1, 0, 0, 2, -1, 0, 0, 0, 1, -3, 2, -1, 1, 0, -1, 1, -2, 4, 506 },
  { -5, -6, 15, 9, 9, -8, -3, -37, 6, 17, -35, -6, 50, 40, -36, 12, 4, -28, 13, 104, 282 },
  { 0, -2, 3, 0, -1, 5, -5, -2, 1, -1, 6, -15, 15, -4, 0, 0, -3, 9, -21, 38, 466 },
  { -1, -2, 3, 2, -2, 6, -4, -7, 1, -1, 8, -23, 20, -1, 0, 0, -3, 11, -29, 61, 434 },
  { -3, -5, 7, 6, -2, 10, -6, -16, 1, 1, 5, -28, 20, 13, 0, 0, -3, 8, -24, 77, 390 },
  { -3, -5, 8, 4, -2, 12, -10, -9, 0, 3, 4, -29, 19, 9, 0, 1, -7, 11, -15, 55, 420 },
  { -2, -4, 7, 1, -1, 8, -6, -6, 1, 0, 7, -22, 15, 0, 3, -1, -4, 7, -9, 32, 460 },
  { -2, -5, 9, 0, 6, -5, 3, -20, 10, 6, -5, -28, 48, -6, -16, 7, 0, 0, -29, 103, 360 },
  { 2, -5, 3, -6, -7, 8, 0, -5, -18, -18, 4, 22, 36, 27, 14, 31, 0, 19, 22, 69, 116 },
  { 0, -7, 7, -13, -42, 29, 25, 12, -23, -11, 8, 28, 25, 15, 6, 55, 21, 61, 11, 28, 42 },
  { -3, -3, 12, -15, -18, 9, 14, -5, 8, 0, 2, 16, 28, 7, 6, 65, 13, 47, 8, 32, 66 },
  { 1, -6, 4, -6, -11, 8, 11, -2, -21, -23, 4, 26, 32, 18, 11, 39, 6, 32, 27, 60, 92 },
  { -1, 2, 4, 2, 5, -15, -8, -23, 4, -9, -16, 29, 62, 29, -14, 19, 19, 0, -4, 95, 152 },
  { -1, -4, 15, -14, -51, 30, 22, 19, -37, -15, 6, 25, 14, 24, 18, 40, 19, 83, 19, 30, 28 },
  { -5, -7, 21, -22, -51, 38, 18, 17, -2, 20, -5, 24, 2, 6, -10, 94, 37, 76, -8, 12, 2 },
  { -9, -3, 11, -1, -32, 24, 8, -8, 53, 24, -12, 13, 8, -6, -19, 114, 24, 75, -17, 4, 10 },
  { -14, 13, 17, 5, 1, 5, -3, -25, 36, 10, -40, 14, 4, 1, -15, 141, 25, 34, -17, 43, 42 },
  { 0, -4, 3, -1, -6, 9, 12, 7, -27, -33, 2, 11, 20, 17, 10, 3, -1, 41, 45, 79, 138 },
  { -3, 2, 11, -5, -4, -8, -5, -11, 1, -13, 3, 20, 35, 13, 1, 28, 4, 13, 25, 83, 132 },
  { -2, -1, 11, -7, -4, 7, -2, 4, -11, -17, -1, 9, 20, 4, 1, 32, 3, 12, 18, 87, 186 },
  { -6, 5, 14, -12, -17, 11, 7, -2, -2, -22, -1, 25, 21, 7, 7, 83, 9, 36, 15, 49, 58 },
  { -1, 0, 11, -17, -39, 22, 18, 3, 22, -2, 2, 18, 16, 1, -3, 99, 18, 59, 0, 14, 30 },
  { -2, 0, 6, 0, -36, 21, 28, 12, -56, -30, 9, 18, 26, 16, 19, 21, 17, 69, 32, 44, 84 },
  { 34, -37, 1, -49, 52, -3, 9, -18, 59, -44, -6, -2, 41, -13, -12, 15, 20, 1, 7, 77, 248 },
  { 3, -5, 3, -5, 23, -17, -2, -11, -3, -34, -13, 13, 53, 21, 0, 4, 2, 26, 26, 90, 164 },
  { 4, -3, -1, -5, -7, 0, 7, 10, -36, -45, 18, 31, 38, 26, 22, 18, -11, 52, 35, 60, 86 },
  { 7, -10, 1, -13, -32, 24, 18, 15, -44, -36, 29, 32, 30, 17, 14, 48, 5, 66, 20, 39, 52 },
  { 2, -3, 10, -17, -31, 24, 11, 13, -32, -53, 39, 35, 17, 8, 8, 77, -3, 67, 30, 37, 34 },
  { 5, -7, 4, -14, 11, 0, 7, 9, -12, -56, 2, 19, 34, 11, -9, 26, 4, 60, 13, 77, 144 },
  { -1, 1, 8, -2, -2, -1, 3, 4, -37, -39, 7, 22, 28, 13, 11, 51, -3, 45, 32, 66, 100 },
  { 2, -14, 13, -12, -54, 46, 28, 34, -64, -32, 28, 32, 13, 9, 17, 46, 14, 111, 9, 19, 22 },
  { -1, -4, 6, 1, 0, 2, 5, 2, -18, -17, -5, 1, 22, 8, 3, 2, -3, 17, 29, 102, 208 },
  { 2, -6, 17, -27, -51, 44, 19, 22, -40, -53, 50, 37, 11, 0, 1, 91, 5, 82, 17, 26, 18 },
  { -2, -2, 11, 2, -1, -5, -1, -3, -19, -21, 0, 14, 30, 13, 4, 9, -5, 24, 38, 94, 152 },
  { -1, -3, 12, -6, 0, -4, -3, 2, -12, -9, 1, 4, 19, 6, -5, 27, -7, 5, 20, 107, 206 },
  { -2, 0, 5, 2, 0, 6, 5, -2, -25, -18, -8, -1, 18, 9, 5, 27, -6, 9, 33, 109, 180 },
  { 0, -6, 5, 4, -14, 15, 23, 26, -66, -32, 7, 3, 2, -5, 15, 34, 3, 38, 36, 88, 160 },
  { 1, -21, 23, -1, -47, 31, 38, 24, -74, -52, 24, 28, 20, 18, 26, -4, 10, 96, 45, 45, 52 },
  { 0, -4, 1, 3, 17, 2, 11, 0, -17, -39, 4, -20, 3, -19, -14, 62, 9, 17, 10, 99, 262 },
  { -8, 4, 49, -37, 46, -38, -29, -7, -2, -30, 4, 40, 7, -22, -78, 216, -26, -41, 122, 68, 36 },
  { -2, -4, 7, 5, 15, -8, -3, -5, -18, -17, -21, 3, 33, 21, 5, 3, -1, 9, 29, 114, 182 },
  { -1, -3, 7, 4, 15, -9, -3, -1, -22, -31, -9, 2, 28, 20, 21, -4, -2, 27, 33, 97, 174 },
  { -3, 0, 6, 7, 12, -12, 3, 4, -42, -38, -6, 10, 27, 20, 28, 12, -8, 36, 44, 95, 122 },
  { -1, 2, 2, 10, 6, -12, 3, 16, -67, -59, 15, 22, 25, 13, 34, 39, -10, 66, 34, 77, 82 },
  { 1, 5, -12, 12, 12, -25, 4, -30, 0, -7, -30, 22, 81, 39, -27, 6, 7, 7, 4, 92, 190 },
  { 0, 4, -1, 1, 8, -12, 4, 12, -40, -55, 11, 19, 31, 23, 32, 15, -7, 51, 31, 81, 96 },
  { -2, -5, 10, 2, 11, -5, -3, -12, -4, -4, -21, -6, 38, 12, -1, -1, -3, -1, 17, 118, 232 },
  { -1, -5, 2, 3, 7, 2, 2, -10, -3, -3, -16, -19, 45, 0, -6, 3, 0, 10, -10, 99, 312 },
  { -2, -4, 2, 6, 8, 3, 6, -2, -20, -19, -16, -5, 26, 14, 8, -2, -1, 18, 20, 105, 222 },
  { -1, -4, 3, 2, 3, 6, 1, 0, -12, -11, -2, -13, 12, 7, 14, -6, -2, 20, -8, 84, 326 },
  { -1, -4, -2, 9, 0, 12, 14, 6, -41, -28, 0, -17, 8, 10, 25, 12, 0, 23, 24, 108, 196 },
  { -1, -3, 0, 5, 3, 6, 4, 5, -21, -17, -2, -12, 8, 7, 16, 5, 0, 21, 1, 77, 308 },
  { -1, 1, 14, -7, 18, -16, 4, 14, -51, -43, 0, 1, 21, 1, 23, 75, -2, 28, 35, 84, 114 },
  { -2, -1, 1, 6, -12, 24, 9, 2, -43, -4, -7, -20, -1, 16, 36, 31, -5, 0, 21, 117, 176 },
  { -1, -3, -2, 7, -2, 32, 15, -24, -63, 6, 0, -22, -15, 1, 56, 128, -45, -28, 60, 90, 132 },
  { -1, -5, 9, 0, -2, 6, 5, -9, -10, 9, -21, -9, 25, 6, -6, 15, 0, -18, 10, 134, 236 },
  { -1, -7, 10, 0, 4, 0, 5, -16, 3, 9, -23, -13, 33, 6, -11, 4, 0, -13, 3, 130, 266 },
  { -3, -5, 7, 7, 14, -7, 4, -20, -9, -2, -31, -5, 33, 25, 6, -3, 0, -8, 33, 119, 202 },
  { -6, -6, 7, 16, 20, -13, -1, -12, -25, -18, -23, 3, 32, 28, 21, -4, -1, 7, 43, 108, 160 },
  { -9, -1, 11, 16, 21, -23, -3, 1, -47, -34, -12, 13, 30, 28, 32, 11, -4, 24, 47, 98, 114 },
  { 0, -5, 3, 3, 1, 6, 5, -11, -2, 3, -10, -23, 28, 4, -3, 0, -3, 1, -3, 93, 338 },
  { -3, 0, -1, 10, 5, -2, 3, -9, -17, -2, -17, -13, 33, 14, 7, 6, 3, -6, 6, 103, 272 },
  { -4, 11, 0, 12, 14, -43, -2, -50, 19, 6, -42, 31, 100, 46, -54, 10, 10, -22, 38, 66, 220 },
  { -1, -4, 3, 3, 0, 9, -1, -4, -6, -2, -5, -16, 11, 7, 8, -5, -3, 12, -4, 74, 360 },
  { -1, -2, 0, 2, -1, 7, -1, 0, -6, -3, 1, -12, 6, 0, 10, -2, -2, 14, -4, 36, 428 },
  { -2, -8, 7, 5, 6, 3, 5, -13, -7, 2, -24, -13, 24, 16, 3, -3, -3, -4, 25, 118, 238 },
  { -3, -7, 8, 7, 9, 3, 1, -10, -14, -11, -18, -14, 18, 19, 20, -7, -3, 12, 30, 111, 210 },
  { -3, -7, 5, 9, 8, 5, 8, -4, -28, -16, -18, -15, 17, 15, 25, -1, -1, 15, 32, 112, 196 },
  { -5, -6, 8, 11, 14, -1, -2, -7, -24, -32, -10, -5, 11, 19, 32, -4, 6, 34, 26, 106, 170 },
  { -1, -3, -3, 7, -4, 12, 14, -7, -17, -4, -5, -25, 15, -1, 22, 0, 0, 1, 9, 100, 292 },
  { 0, -3, -14, 18, -3, 23, 11, 3, -42, -10, -9, -26, 4, 8, 36, 18, -1, -5, 38, 112, 196 },
  { -4, -1, -7, 19, -10, 26, 7, -7, -53, 9, -15, -19, 2, 11, 45, 61, -17, -15, 56, 99, 138 },
  { 0, -3, 0, 2, -3, 7, 6, -11, 1, 3, -1, -23, 18, 3, 2, -2, -3, 3, -12, 92, 354 },
  { -2, -5, 3, 6, 12, -1, 5, -14, -7, -5, -22, -11, 18, 21, 13, -8, 2, -2, 20, 109, 248 },
  { -1, -9, 4, 10, 9, -1, 7, -25, 0, 6, -26, -8, 16, 27, 0, -5, 0, -14, 25, 105, 272 },
  { 0, -2, 2, 1, -1, 4, 0, -3, 0, 1, 3, -15, 12, -2, 1, 0, -2, 0, -7, 48, 432 },
  { -1, -12, 15, -1, 7, 2, 1, -20, 6, 7, -23, -14, 27, 16, -9, -1, 3, -10, 3, 120, 280 },
  { -5, -6, 4, 14, 11, -3, 11, -32, -5, 1, -24, -21, 42, 22, -3, 1, 0, -7, 22, 97, 274 },
  { -1, -6, 4, 5, 2, 2, 9, -14, -5, 3, -2, -36, 35, -4, 10, 1, 2, -14, 17, 77, 342 },
  { -1, -11, 8, 5, 8, 10, -9, -13, 0, 3, -10, -38, 58, 9, -30, 14, 6, -32, 49, 25, 410 },
  { 0, -1, 1, 0, 0, 2, -2, 0, -1, 0, 3, -7, 6, -5, 4, 0, 0, 0, -2, 16, 484 },
  { 0, -3, 3, 0, -1, 5, -4, -1, 0, 0, 3, -9, 1, 2, 4, -1, -3, 6, -5, 35, 448 },
  { 0, -6, 0, 8, -5, 15, 4, -12, -7, 4, -6, -29, 10, 14, 14, -4, -3, 1, 7, 111, 280 },
  { -1, 1, -3, 5, 0, -5, 9, 6, -18, -1, -1, -14, 13, -12, 14, 11, 7, -18, 2, 114, 294 },
  { -1, -1, -5, 13, -5, 4, 8, 1, -28, 10, -13, -22, 12, 3, 13, 30, 3, -22, 26, 114, 232 },
  { 0, -5, 2, 4, -3, 9, 2, -9, -2, 3, 5, -33, 14, 3, 11, -1, -3, 3, 4, 80, 344 },
  { -2, -12, 7, 13, 8, 3, 7, -22, -12, 2, -19, -21, 22, 18, 15, -4, -1, -6, 28, 110, 244 },
  { -1, -6, 8, 0, 4, -2, 8, -20, 8, 7, -16, -9, 17, 14, -16, 4, 2, -11, 0, 85, 360 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 448 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 452 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 456 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 464 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 468 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 472 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 476 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 480 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 484 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 488 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 492 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 504 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508 }

    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 520 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 532 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 548 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 552 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 556 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 560 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 564 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 568 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 572 }
    , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 576 }
};

const Int AdaptiveLoopFilter::m_ALFfilterCoeffFixedRC[m_NO_FILTERS*JVET_C0038_NO_PREV_FILTERS][21] =
{
  { -1, 0, 4, 2, 0, 1, -7, 0, 0, 0, 1, -6, 13, -5, 2, 0, -2, 6, -11, 15, 491 },
  { -2, 0, 9, 1, 4, 0, -30, -2, 4, -1, -5, -24, 89, -20, -5, -2, -4, 15, -25, 81, 344 },
  { -2, 1, 6, 2, 2, -4, -16, -3, 2, 0, -4, -8, 42, -8, -2, 0, -3, 11, -23, 50, 423 },
  { 10, 3, -20, 3, 6, -25, 13, -25, 4, 3, -26, 40, 74, 40, -19, 1, 11, -21, 15, 76, 189 },
  { -39, -52, 161, -50, 128, -109, -66, -19, 8, -55, -224, 262, 92, 102, -66, -29, 13, 84, 96, -99, 240 },
  { -2, -25, 63, -47, -16, 34, -55, 33, 62, 18, 19, 13, 181, -16, -15, -58, 42, -34, 28, 158, -253 },
  { -5, -5, 59, -42, -8, -7, -91, 29, 33, -11, -13, 50, 64, 94, -106, 0, -5, 15, 58, -14, 321 },
  { 8, 86, -237, 111, -160, 7, 329, -167, -7, -123, 238, 40, -43, -117, 196, -89, -22, 223, -238, 111, 222 },
  { -13, -6, 24, -14, -12, 26, 8, 25, -2, -13, 29, 23, 17, 35, 13, -13, -18, 38, 18, 29, 123 },
  { -26, -10, 74, -32, -60, 207, -249, 109, 30, -71, 139, -217, 343, -221, 211, -102, -34, 208, -295, 305, -106 },
  { 0, 6, -2, 5, 7, -24, 0, -24, 6, 0, -25, 19, 75, 18, -17, -3, 0, 10, -3, 65, 287 },
  { -13, -104, 171, -78, 146, -130, -152, 186, -4, 67, -32, 202, 28, -175, 63, -23, -110, 73, -126, 104, 324 },
  { -2, 2, 20, -10, 0, -7, -36, 19, -4, -10, -1, -32, 155, -52, 10, -10, -3, 31, -38, 163, 120 },
  { 23, -70, -127, 241, -11, 276, -113, -197, -153, -87, 136, 9, -47, 340, -22, 118, -63, -12, -52, -85, 266 },
  { -39, 36, -6, 0, -30, 21, 105, -13, 37, -78, 162, 30, -125, 90, -9, -71, 11, 100, -55, -98, 373 },
  { 1, 37, -52, 40, -12, -40, 94, -117, 26, -28, -8, 9, 12, 127, -44, -18, 4, 42, 28, -24, 363 },
  { -3, 2, 6, 2, 4, -1, -29, 0, 3, -4, -3, -25, 98, -26, 0, -3, -4, 18, -28, 87, 327 },
  { -165, 226, 116, 12, -114, -79, -11, -344, 30, -40, 34, 322, 423, 416, 205, -3, -44, 14, -132, -417, -411 },
  { -7, -58, 84, -23, -26, 119, -149, 30, 9, 27, -43, -33, 138, -2, -39, 1, 1, -14, 64, 29, 297 },
  { 5, 3, -8, 1, 5, -21, 0, -18, 3, 0, -22, 24, 88, 23, -17, -1, 6, -6, 5, 85, 205 },
  { 17, 13, -39, 2, 7, -32, 38, -38, 10, 11, -41, 58, 37, 65, -40, 17, 15, -52, 56, 35, 231 },
  { -2, 1, 3, 2, 1, 1, -9, 0, 0, 0, -1, -5, 15, -5, 0, 0, -1, 7, -10, 17, 487 },
  { -1, 21, -17, -5, -16, -50, 52, -2, 5, -24, 20, 74, -18, -8, 43, -43, -4, 78, -90, 56, 373 },
  { 2, -1, -8, 6, 36, -34, 6, -2, 0, -20, -27, 5, 159, -24, -19, -3, 1, 27, -6, 146, 19 },
  { 90, 45, -385, 36, -126, 81, 395, 162, -62, -38, 156, -63, 118, -359, -64, 54, 91, -178, 210, 169, -148 },
  { -3, 1, 11, 1, 1, 1, -24, -1, 2, 0, 0, -15, 50, -12, -2, 0, -4, 14, -28, 56, 417 },
  { -15, -15, 26, -1, -6, 19, 16, 2, -9, -11, 22, 30, 20, 41, 20, -14, -20, 39, 14, 33, 127 },
  { -45, -14, 104, -29, -16, 82, -54, 121, -103, -30, 24, 117, -130, 74, 63, 62, -71, 94, 7, -121, 244 },
  { -16, -27, 6, 41, -10, 31, 57, -31, 7, 17, 49, 50, 43, 73, -9, 0, 10, -27, 9, 44, -122 },
  { 0, 3, 1, 5, 9, -21, -3, -26, 9, -1, -24, 11, 70, 21, -23, -1, -1, 12, -3, 62, 313 },
  { 66, -369, 411, -257, 88, 224, -4, -172, 182, 121, -284, 69, 41, 103, -17, 43, -24, -129, 214, -53, 7 },
  { 2, 20, -77, 24, -36, 76, -93, 116, -71, 15, 62, -137, 313, -238, 75, 15, 6, -64, 12, 210, 46 },
  { -3, 0, 10, 1, 2, 0, -22, -1, 2, 0, -1, -15, 48, -14, -1, 1, -4, 13, -30, 58, 423 },
  { 9, 3, -17, 3, 9, -33, 24, -22, 1, 3, -32, 35, 101, 32, -24, 6, 7, -19, 28, 96, 90 },
  { 0, 4, 3, 2, 8, -13, -18, -11, 9, 0, -20, -7, 92, -9, -16, -2, -2, 13, -3, 66, 326 },
  { 27, 0, -7, -40, -13, -57, 11, 162, -143, -12, 30, 149, 71, -174, 210, 6, 15, -5, -97, -29, 301 },
  { 3, -68, 66, -5, 17, 10, 26, -83, 94, -107, 84, 19, 131, 12, 28, -138, 39, 133, -30, 30, -7 },
  { 7, 2, -12, 3, 5, -22, 4, -26, 6, 2, -27, 33, 77, 35, -25, 0, 6, -9, 9, 73, 226 },
  { -52, 264, -352, 98, -45, -415, 512, 124, -43, -73, 149, 378, -113, -158, -190, 231, -77, -107, 310, -431, 493 },
  { -7, 0, 17, 0, 2, -3, -29, -5, 3, -7, 5, -21, 86, -17, 6, -7, -3, 26, -49, 108, 304 },
  { -2, 1, 4, 1, 0, 1, -7, 0, -1, -1, 1, -5, 13, -5, 2, 0, -1, 6, -9, 14, 491 },
  { -7, -54, 103, -70, -41, 64, -34, 27, 29, -25, 76, -28, 22, 76, -45, -26, -20, 65, 5, -15, 307 },
  { -10, -11, 18, -3, -3, 14, 21, 13, -5, -13, 22, 34, 22, 17, 16, -7, -16, 32, 11, 39, 118 },
  { 8, 30, -90, 13, -75, -11, 237, -92, -5, 83, -48, -19, -22, 249, -260, 156, -5, -208, 349, -146, 225 },
  { 1, 7, -1, 1, 5, -22, 1, -20, 6, 3, -23, 26, 39, 30, -23, 3, 1, 1, 6, 32, 361 },
  { -6, -25, -11, 1, 3, 29, 100, -9, -19, -14, 4, 58, -128, 51, 60, -24, -12, 52, -23, -27, 386 },
  { -7, 4, 18, -8, -16, 23, -78, 49, -14, -8, 46, -93, 195, -68, 11, 6, -2, 0, -13, 178, 67 },
  { -4, 28, -38, 25, 34, -97, 99, -71, 10, 19, -99, 134, -19, 125, -106, 51, -8, -42, 118, -77, 349 },
  { -1, 4, 2, 3, 7, -20, -11, -20, 8, -1, -20, 6, 85, 9, -18, -3, -2, 13, -9, 73, 297 },
  { -5, -19, 15, -1, -2, 19, 21, -1, -4, -14, 7, 28, 34, 31, 20, -17, -7, 27, 4, 53, 130 },
  { -2, 0, 9, 1, 3, 0, -23, -2, 3, 0, -3, -18, 60, -13, -4, 0, -4, 14, -26, 64, 396 },
  { -3, -29, 85, -43, 15, 59, -166, 85, -19, 12, -76, 0, 212, -84, -9, 18, 5, -9, 32, 84, 178 },
  { -11, -21, 34, 5, -2, 27, -59, 1, -5, -27, 50, -72, 124, -32, 31, -21, -9, 65, -103, 154, 252 },
  { -2, 0, 5, 1, 0, 2, -9, 0, 0, 1, 0, -6, 16, -5, 1, 0, -3, 6, -12, 20, 485 },
  { 18, -7, -39, 33, 119, -230, 276, -79, -23, -88, 50, 106, -36, -134, 143, -45, 33, -23, -27, 23, 379 },
  { -16, -26, 31, -2, -50, 79, 23, 44, -53, -37, 88, 36, -23, 31, 65, -27, -26, 76, 27, -80, 191 },
  { -6, -41, 30, 12, -27, 62, -32, -15, -39, 7, 86, -131, 137, -104, 135, 18, -21, -1, -81, 261, 14 },
  { -5, 8, 19, -20, 20, -61, 33, 0, 6, -8, -10, 89, 69, 41, -8, 24, -4, -2, 20, 87, -87 },
  { 83, 93, -183, -61, -122, -89, 357, -146, 110, 88, 119, 82, -108, 390, -97, 15, -39, -20, -143, -95, 44 },
  { -151, 305, -183, 385, -44, 54, 22, 151, -362, -250, 206, -224, -48, -75, -42, 8, 24, 240, -13, 233, 40 },
  { 4, 6, -9, 0, 0, -9, -20, 5, 0, -1, -11, -4, 136, -14, -15, 0, 3, 0, 4, 99, 163 },
  { -3, 2, 3, 7, 4, -29, 20, -33, 9, -4, -21, 48, 3, 57, -21, -10, 2, 19, 12, 5, 367 },
  { 11, 6, -28, 7, 9, -28, 15, -30, 6, 6, -38, 48, 71, 48, -33, 8, 11, -29, 32, 60, 209 },
  { -85, 28, 10, 57, 61, -10, -81, 70, 9, 35, -47, -108, 64, 135, -39, 67, -45, -15, -88, 55, 369 },
  { -2, 1, 4, 0, 0, 1, -8, 1, 0, 1, 0, -7, 16, -7, 2, 0, -2, 5, -10, 17, 488 },
  { 4, -11, -1, -4, -3, 7, 7, 4, -6, -10, 5, 23, 51, 24, 4, -10, 3, 2, 14, 64, 179 },
  { -8, -1, 7, -11, -25, 52, 24, 54, -35, -34, 54, 18, -20, 11, 62, -14, -20, 70, -2, -37, 222 },
  { 0, 90, -197, 126, -163, 91, 246, -236, 16, -23, 194, -171, 42, 4, 215, -69, 52, 36, -320, 357, -59 },
  { -25, 24, -100, 147, -43, -5, 172, -181, -34, 102, -39, -93, 199, -29, -8, 87, -27, -174, 56, 289, -125 },
  { -2, 2, 7, 2, 2, -2, -20, -4, 3, 0, -2, -13, 47, -11, -1, 0, -4, 16, -31, 61, 413 },
  { -2, 4, 3, 4, 8, -15, -14, -17, 8, -1, -19, -1, 81, 2, -16, -1, -2, 13, -11, 72, 322 },
  { -7, 2, 17, 2, 3, -11, 10, -11, -1, -1, -1, 18, 92, 7, 12, -7, -9, 21, -6, 115, 13 },
  { -3, 107, -158, 64, -39, -187, 339, -202, 82, -144, 286, -74, -15, 110, 102, -190, 16, 210, -198, 32, 239 },
  { 5, 39, -56, 15, 11, -81, 118, -53, 16, -18, -21, 86, -57, 55, -20, -12, 1, 20, 12, 23, 348 },
  { -23, -69, 148, -21, 8, 167, -115, -66, 51, -45, -80, -20, 102, 198, -126, -3, -9, 69, 101, -46, 70 },
  { 0, -1, -27, 24, -29, 38, -21, 28, -19, -3, 64, -143, 277, -131, 19, -7, -9, -4, 11, 202, -28 },
  { 6, 7, -16, 5, 9, -34, 8, -29, 7, 3, -33, 37, 86, 36, -27, 1, 7, -11, 9, 74, 218 },
  { -12, -13, 44, -8, -2, 31, -75, 19, -2, -5, 7, -52, 141, -44, 12, -8, -2, 23, -44, 109, 272 },
  { 3, -108, 169, -73, -5, -118, 1, -126, 103, 82, 81, 8, 161, 34, 30, -3, 14, -149, 32, -84, 423 },
  { 4, -11, 9, -6, -6, 5, 3, -17, -3, 11, -43, 76, 3, 62, -30, 13, 0, -18, 54, -28, 354 },
  { -3, 1, 10, 1, 5, -6, -25, -7, 6, -1, -12, -14, 85, -11, -12, -2, -3, 14, -14, 76, 335 },
  { -2, 0, 4, 1, 1, 1, -8, 1, 0, 0, -2, -4, 14, -5, 1, 0, -3, 7, -9, 15, 490 },
  { 20, 9, -38, 0, 7, -35, 31, -18, 1, 7, -38, 63, 56, 53, -33, 12, 22, -49, 54, 41, 180 },
  { -12, -165, 262, -63, 183, -49, -171, 1, -20, -93, -66, 161, 26, -101, 252, -83, 4, 113, -77, 59, 191 },
  { 0, 43, -58, 21, -9, -55, 59, -7, -16, -23, 26, 24, 9, -42, 48, -17, -9, 62, -91, 112, 358 },
  { -6, 5, -101, 91, 57, -137, 338, -221, -18, 5, -39, 111, -173, 66, 88, 8, 27, -71, 21, 114, 185 },
  { 2, -42, 54, -24, 6, 65, -130, 107, -29, -17, 33, -151, 271, -125, 22, -19, -7, 34, -46, 203, 99 },
  { 2, 8, -9, 8, 9, -28, 8, -36, 11, 4, -36, 29, 62, 34, -28, 1, -1, 5, 11, 44, 315 },
  { -19, -88, 160, -60, -15, 33, 16, -157, 118, 7, -58, 222, -147, 225, -87, -60, -30, 90, 66, -115, 311 },
  { -3, 0, 9, 2, 2, -1, -18, -4, 3, 1, -2, -13, 42, -8, -2, 1, -4, 13, -28, 56, 422 },
  { -14, -86, -27, 154, 43, 187, -80, -170, -27, 29, -94, -19, 109, 97, 3, 12, 18, -52, 141, -115, 293 },
  { 10, -33, -25, 15, 29, 16, 41, -56, 59, -53, 98, -50, 189, -8, 0, -41, -9, 88, -98, 175, -177 },
  { 0, 1, 1, 0, 4, -19, -4, -21, 4, -4, -19, 24, 79, 32, -15, -4, 1, 7, -5, 78, 230 },
  { -8, -25, 26, -15, -26, 41, 24, 37, -20, -15, 58, 44, -39, 20, 56, -10, -18, 32, -8, -9, 223 },
  { 0, -12, 12, -7, -1, 4, 6, 1, -1, -5, -2, 25, 84, 20, 6, -10, -6, 16, 8, 80, 78 },
  { 0, 8, -9, 8, 0, 0, -23, -2, 4, 8, -21, -41, 151, -40, -12, 0, -2, 2, 0, 113, 224 },
  { 1, 7, -7, 7, 7, -24, 3, -31, 10, 4, -27, 13, 72, 19, -23, 1, -2, 6, 0, 61, 312 },
  { -18, 71, -61, 53, 36, -55, 11, -92, 20, -77, 82, -22, 206, -22, -59, 89, -40, 23, -35, 253, -217 },
  { -2, 0, 5, 0, 1, 1, -8, 1, 0, 1, -1, -3, 11, -5, 1, -1, -2, 6, -8, 12, 493 },
  { -2, 4, 6, 2, 4, -9, -11, -12, 6, 1, -13, 4, 43, 9, -13, 0, -1, 10, -7, 38, 399 },
  { -1, 1, 1, -3, 6, -10, 17, -7, 5, -2, -12, 32, 88, 19, -9, -4, -2, 9, 17, 82, 54 },
  { -14, -107, 165, -96, -55, 188, -111, 6, 59, -54, 162, -152, -31, 216, -125, -8, -16, 63, 63, 0, 210 },
  { -20, 21, 21, 3, 6, -18, -43, 20, 2, -10, 25, -56, 183, -119, 50, -23, -1, 31, -80, 185, 156 },
  { -18, -109, 56, 70, -93, 294, -83, -30, -107, 13, 100, -2, -23, 63, 102, 54, 13, -106, 62, -122, 243 },
  { -46, 166, -105, 83, -37, -226, 82, -76, 216, 68, 38, 212, -14, 21, 43, -236, 28, 132, -127, 78, -87 },
  { -3, 1, 9, 1, 5, -1, -30, -2, 3, -2, -6, -25, 87, -21, -4, -1, -4, 16, -25, 81, 353 },
  { -4, 0, 9, 2, 1, 4, -22, 1, 0, -1, 3, -18, 36, -15, 4, -1, -6, 18, -37, 56, 445 },
  { 12, 4, -27, 4, 10, -35, 24, -31, 3, 3, -40, 58, 72, 50, -23, 4, 12, -27, 29, 59, 191 },
  { 10, -73, 83, -71, -2, 70, -35, 115, -6, 55, -109, 117, 55, -46, -14, 17, 3, -82, 169, 104, -211 },
  { -9, -17, 24, -11, -18, 26, 6, 26, -18, -16, 32, 39, 12, 28, 29, -17, -9, 29, 5, 20, 193 },
  { 0, 2, 4, 1, 5, -18, -12, -20, 5, -3, -16, 9, 91, 17, -15, -2, 0, 10, -13, 92, 238 },
  { -18, 41, -32, 31, 17, -71, 70, -67, -7, -26, -19, 98, -67, 107, -7, -2, -4, 9, 31, -13, 371 },
  { -2, 1, 8, 1, 5, -14, -17, -15, 4, 0, -21, 7, 94, 8, -16, -1, -2, 9, -6, 92, 242 },
  { -2, 1, 4, 1, 0, 1, -7, 0, 0, 0, -1, -4, 13, -4, 1, 0, -2, 6, -9, 14, 491 },
  { 4, 7, -13, 5, 13, -35, 17, -31, 7, 2, -38, 44, 56, 35, -24, 1, 3, 1, 11, 39, 305 },
  { 49, -45, -157, 40, 71, -78, 263, 69, -46, -43, 204, -130, 62, -149, 102, -36, -11, 62, -149, 115, 128 },
  { -11, -11, 24, -5, -9, 21, 7, 14, -6, -7, 17, 30, 35, 40, 0, 0, -11, 22, 9, 52, 92 },
  { -2, 1, 8, 1, 8, -8, -24, -9, 9, -1, -18, -9, 86, -7, -15, -4, -3, 16, -8, 65, 341 },
  { 0, 17, -2, -7, -22, 15, -25, 5, 0, 0, 18, -54, 203, -69, 24, -10, -5, 14, -25, 180, -1 },
  { -35, 146, -276, 177, -129, 53, 197, -25, -148, -85, 209, -161, -54, 26, 146, -9, -5, 51, -82, 91, 336 },
  { 0, 1, 5, 4, -8, 15, -25, 0, -5, -8, 22, -48, 74, -28, 10, -3, -3, 28, -56, 113, 339 },
  { -5, 14, -32, 25, -16, -30, 79, -68, 16, -23, 14, 79, -65, 137, -40, -19, -1, 32, 40, -27, 294 },
  { -93, 70, 156, -55, 13, 102, -360, 423, -157, -34, 71, -282, 490, -490, 307, 22, -37, 5, -162, 335, -137 },
  { 12, 4, -27, 3, 4, -24, 15, -20, 0, 0, -21, 37, 79, 37, -16, 3, 10, -23, 20, 71, 180 },
  { -48, -13, 81, -17, -32, 72, -78, 69, -18, -38, 99, 47, 1, 11, 97, -35, -47, 128, -66, -93, 270 },
  { -3, 1, 9, 1, 2, 0, -20, -2, 2, 1, -3, -12, 42, -9, -2, 1, -4, 14, -27, 53, 427 },
  { 10, -103, 166, -95, 132, -255, 61, -81, 132, 44, -201, 422, 30, -236, -56, 41, -34, 41, -59, 315, -38 },
  { -18, -91, 63, -5, -47, 135, 150, -151, 38, 84, -120, 94, -30, -55, 253, -150, -12, 69, -71, 54, 134 },
  { -2, 1, 4, 1, 0, 0, -7, 0, 0, 0, 0, -4, 13, -4, 0, 0, -2, 6, -9, 14, 491 },
  { 0, 8, -4, 4, 6, -23, 8, -34, 12, 0, -19, 32, 39, 30, -22, -1, 3, 8, -6, 41, 350 },
  { 7, 0, -17, 0, 3, -21, 17, -14, -3, -3, -22, 52, 58, 45, -13, -3, 5, -11, 22, 60, 184 },
  { -49, 71, -1, 85, -3, 30, -177, 28, -64, -25, -12, -97, 149, 20, -29, 95, -32, -177, 360, 46, 73 },
  { -2, 1, 10, 2, 5, -4, -26, -5, 4, -2, -7, -18, 82, -15, -5, -3, -4, 18, -24, 78, 346 },
  { -16, 53, -40, -13, 86, -80, 7, 40, 50, -112, 29, -15, 309, -110, 35, -30, -49, 149, -31, 195, -407 },
  { 1, 5, -1, -1, 7, -23, 28, -16, 4, -8, -5, 18, 120, -22, 9, -12, 0, 13, 14, 127, -1 },
  { -8, 130, -130, 7, 25, -46, -110, 177, -71, -117, -79, 320, -257, 455, -256, -42, 88, -5, 181, -63, 117 },
  { 90, 56, -255, -35, -120, 270, -42, 332, -162, 274, -295, -30, 39, -102, 8, 270, 30, -451, 308, 112, -74 },
  { -11, -11, 29, -10, -13, 30, -21, 11, -16, -1, -25, 67, -36, 123, -31, 3, -12, 19, 58, -89, 382 },
  { -3, 0, 10, 0, 1, 2, -22, -1, 2, 0, 0, -16, 45, -13, 0, 0, -4, 14, -29, 54, 431 },
  { -1, 6, 1, 4, 7, -24, -9, -25, 7, 0, -24, 16, 91, 17, -20, -2, -1, 10, -6, 76, 264 },
  { -20, 49, 13, -8, -18, -170, 236, -108, 60, -131, 173, 98, -137, 141, -97, -36, -2, 124, -6, -12, 211 },
  { -26, -19, 50, 2, -18, 71, -13, 25, -14, 6, 53, -17, 22, 44, 19, 9, -28, 34, -14, 35, 68 },
  { -8, -15, 74, -51, -2, -56, -52, 120, -58, -25, 46, -40, 166, -201, 142, -30, -7, 75, -115, 222, 141 },
  { 2, 5, -7, 0, -3, -5, -10, -1, -4, -9, 12, -54, 145, -30, 5, -4, -1, 18, -33, 138, 186 },
  { 3, -7, 7, -3, 5, 1, 1, -6, 1, -9, -7, 6, 91, 17, 0, -4, -2, 16, -5, 110, 77 },
  { 2, 9, -7, 7, 5, -38, 31, -40, 9, 7, -33, 54, 7, 58, -30, 1, 7, -6, 22, 6, 373 },
  { -3, 1, 8, 1, 1, -1, -19, -3, 2, -1, 1, -14, 43, -10, 0, 0, -5, 16, -34, 58, 428 },
  { 0, 6, 1, 1, 3, 22, -74, 79, -34, -11, 3, -31, 267, -138, 25, 16, -4, 52, -44, 192, -152 },
  { -3, 1, 9, 1, 6, -6, -23, -7, 5, 2, -15, -10, 78, -10, -11, 0, -3, 11, -11, 66, 350 },
  { 29, 45, -81, -53, 23, -196, 65, 142, -109, 12, 114, 130, 49, 67, -17, 134, -12, -187, 104, -130, 257 },
  { 24, -62, -81, -14, -262, 159, 160, 285, 31, 457, -13, 58, -382, 130, -207, -225, 107, -113, -62, 14, 505 },
  { 8, 2, -18, 1, 4, -23, 10, -14, -1, 1, -23, 46, 68, 37, -18, 3, 11, -24, 19, 73, 185 },
  { -2, 0, 5, 0, -1, 2, -8, 2, 0, 0, 1, -5, 12, -5, 1, -1, -1, 6, -9, 14, 491 },
  { -14, -24, 42, -10, -14, 40, 6, 21, -14, -11, 36, 39, -1, 42, 28, -17, -19, 40, 9, -2, 156 },
  { -14, -141, 133, 9, 18, 254, -190, 163, -129, -23, 123, -365, 287, -96, 202, -19, -26, 12, -134, 214, -41 },
  { -5, 0, 16, -3, 3, -1, -43, 10, -3, -9, 7, -32, 127, -36, 7, -3, -4, 20, -35, 115, 253 },
  { -31, 18, 15, 27, -78, 132, -10, 22, -105, -65, 196, -124, -62, -41, 250, -48, -16, 141, -327, 145, 437 },
  { 1, 6, -1, 4, 8, -26, -4, -30, 8, -1, -24, 15, 84, 26, -21, -2, -2, 13, -8, 74, 269 },
  { -17, -13, 43, -12, -63, 189, -186, 72, -1, -45, 75, -266, 205, -22, -78, 15, -27, 98, -27, 225, 185 },
  { -40, -48, 156, -27, -136, 261, -276, 50, 1, -37, 82, -66, 219, -82, 96, -83, 4, 81, -48, 110, 78 },
  { 0, 7, -2, 3, 6, -25, 2, -23, 8, 2, -25, 24, 54, 26, -21, -2, -1, 9, 2, 47, 331 },
  { -3, 2, 7, 2, 3, -1, -26, -2, 4, -1, -6, -24, 85, -20, -6, -3, -3, 17, -23, 80, 348 },
  { -3, 0, 9, 2, 2, 1, -20, -3, 2, 0, -1, -14, 42, -10, -1, 0, -4, 15, -29, 55, 426 },
  { -2, 1, 4, 0, 0, 1, -8, 1, 0, 0, 0, -4, 13, -6, 2, 0, -2, 6, -10, 14, 492 },
  { -7, -14, 30, -4, 13, 3, 4, 0, 7, 1, -8, 29, 70, 31, -1, -1, -9, 12, 12, 76, 21 },
  { -91, 68, 6, 29, 132, -242, 144, 205, -159, -117, -6, 208, 27, -237, 219, -43, 12, 141, -182, 18, 244 },
  { 1, -11, -81, 112, -120, 4, -190, 127, -175, 51, 378, -201, 447, -490, 358, -47, 28, -61, -410, 473, 128 },
  { 12, 16, -67, 34, 46, -97, 199, -172, 46, -87, -10, 99, -82, 217, 65, -97, 53, 79, -40, 47, -7 },
  { 5, 26, -37, 11, 8, -76, 66, -32, -4, 17, -86, 126, 2, 93, -51, 20, 1, -30, 90, -42, 302 },
  { -45, 53, -121, 109, -150, 134, 55, -120, 67, -69, 170, -236, 343, 23, -171, -31, 11, 33, 187, 102, -176 },
  { -5, 2, 44, -27, -78, 83, -117, 49, -2, 30, 93, -179, 204, -68, 30, 12, -5, -13, -82, 327, -80 },
  { 2, 5, -56, 51, -16, 24, -27, 118, -116, -76, 179, -81, 139, -83, 107, -9, 17, 77, -192, 101, 190 },
  { 10, 0, -19, 1, 7, -26, 12, -17, 1, 0, -28, 46, 75, 40, -23, 2, 9, -21, 22, 72, 185 },
  { -66, -50, 168, 9, -9, 123, -272, 195, -108, 35, -22, -11, 48, -6, 138, -77, -47, 91, -18, -24, 319 },
  { -11, -10, 17, -8, -19, 34, 10, 25, -13, -20, 35, 24, 1, 46, 11, -17, -9, 36, 21, 6, 191 },
  { -2, 4, 4, 3, 7, -19, -15, -21, 7, 0, -20, 4, 108, 6, -14, -2, -2, 13, -15, 90, 241 },
  { -16, -17, 27, -1, -9, 34, 10, 21, -21, -19, 30, 19, 14, 27, 31, -14, -20, 49, 9, 27, 150 },
  { -3, 1, 9, 1, 3, -1, -23, -4, 4, 1, -5, -13, 59, -12, -4, 0, -4, 13, -26, 67, 387 },
  { 1, 7, 0, 0, 3, -18, 10, -2, -2, -7, -5, 20, 119, 1, 10, -4, 0, 12, -2, 95, 37 },
  { -6, -19, 62, -49, 48, -47, -56, 46, 20, 6, -107, 117, 99, 34, -54, 2, -6, 7, 76, -40, 251 },
  { 1, 6, -3, 6, 10, -24, -6, -27, 9, 1, -29, 15, 84, 17, -22, -1, -1, 11, -3, 66, 290 },
  { -42, -159, 225, -63, 3, 163, -211, 172, -59, -36, 53, -98, 21, 77, 7, -17, 22, 62, -28, -4, 340 },
  { -2, 0, 4, 2, 1, 1, -9, -1, 0, 1, 0, -5, 17, -5, 0, 0, -3, 6, -13, 18, 484 },
  { -14, -47, -27, 100, -1, 25, 111, -286, 164, 54, 4, 83, 32, -46, -92, -76, 15, -49, -33, 281, 111 },
  { -3, 14, -15, 6, 4, -42, 55, -44, 13, -8, -10, 73, -30, 80, -23, -8, 5, 9, 6, 11, 328 },
  { 24, 29, -99, -47, 217, -123, 105, 221, 5, 26, -214, -211, 115, -228, -3, -5, 21, -86, 105, 269, 272 },
  { 10, 2, -18, -2, 4, -23, 9, -14, 1, 1, -25, 46, 73, 37, -19, 3, 10, -24, 19, 72, 187 },
  { 0, -48, 57, -3, 18, 31, -25, -43, 53, -74, 187, -236, 178, -79, 83, -58, 23, 67, -246, 391, -34 },
  { -16, -10, 69, -18, -27, 80, -181, 50, 27, -10, 14, -90, 242, 4, -126, -22, -4, 37, 108, 29, 206 },
  { -5, 4, 6, 0, -3, -2, -21, 2, -1, -5, 6, -37, 119, -36, 9, -6, -1, 18, -37, 125, 243 },
  { 32, -155, -88, 120, -48, 327, -74, 8, -12, 343, -408, 75, 200, -199, 364, -99, -103, 64, -148, 235, -356 },
  { -52, -96, 106, 162, -115, 189, 9, 8, -169, 64, 81, -85, -291, 285, 121, -18, -184, 274, -128, -153, 497 },
  { -3, 0, 10, 0, 2, 2, -23, 0, 2, -1, 0, -18, 49, -14, 1, 0, -4, 15, -31, 61, 418 },
  { -5, 14, 0, 4, 17, -14, 14, -46, 28, -5, -5, 45, 110, 85, -31, 18, -7, 9, 19, 30, -54 },
  { 2, 3, -2, -15, 4, -36, 39, -22, 16, -3, -48, 128, -40, 106, -45, -8, 0, 1, 65, -50, 325 },
  { -1, 2, 5, 0, 8, -18, -16, -6, 0, 3, -29, 1, 128, -18, -5, -2, -1, 7, -5, 118, 169 },
  { 11, 0, -23, 0, 2, -21, 18, -20, 2, 0, -20, 44, 66, 48, -20, 2, 12, -28, 20, 71, 182 },
  { -7, 3, 20, -7, -23, 17, -39, 33, -11, -6, 42, -80, 132, -77, 33, -18, -5, 29, -61, 145, 277 },
  { -34, -121, 267, 90, 26, 229, -315, -155, -72, 56, 3, -244, 442, 271, 151, 130, -43, -129, -155, -11, -250 },
  { -2, 0, 3, 2, 0, 2, -6, 0, -1, 0, 2, -7, 14, -7, 0, 0, -2, 6, -11, 16, 489 },
  { -38, -5, -71, 117, -24, 68, 234, -167, 5, -31, 103, -243, 141, -162, 155, -86, 12, 75, -75, 345, -197 },
  { 22, -84, 122, -124, -143, 277, -93, 41, 47, -15, 46, -82, 37, 80, -146, -4, -20, 41, 223, -69, 204 },
  { -3, 1, 11, 0, 4, -3, -32, -4, 7, 1, -15, -13, 92, -15, -14, -1, -3, 13, -10, 73, 334 },
  { -93, -189, -12, 109, 44, 22, 312, -7, -41, -29, 39, 144, -229, 57, -75, 91, -42, 21, 120, -2, 33 },
  { 1, 8, -6, 8, 9, -30, 0, -31, 9, 1, -28, 21, 82, 24, -23, -1, 0, 9, -4, 72, 272 },
  { 5, -18, 13, -41, 62, -36, 5, 41, 21, -57, 42, -101, 212, -115, 28, -13, 2, 75, -115, 337, -181 },
  { 0, 5, 0, 5, 6, -24, 7, -29, 11, 1, -19, 22, 35, 31, -20, -2, 0, 8, -5, 41, 366 },
  { -15, -10, 20, -4, -17, 32, 17, 24, -12, -11, 33, 22, 8, 25, 35, -19, -24, 50, 11, 12, 160 },
  { 3, -4, 5, -6, 2, -13, -9, -7, 2, -5, -15, 31, 76, 28, -13, -4, 4, 0, 4, 82, 190 },
  { -2, 0, 7, 2, 1, 1, -18, -2, 2, 1, -1, -12, 37, -11, -1, 0, -4, 13, -27, 50, 437 },
  { -4, -1, 13, 0, 4, 2, -34, 0, 3, -1, -5, -22, 80, -17, -5, -1, -4, 16, -25, 77, 361 },
  { -12, -63, 89, -28, -14, 92, -142, 67, -4, -19, 25, -69, 171, -47, -4, 12, 2, 7, 2, 142, 99 },
  { -8, -5, 7, -17, 33, -80, 83, -8, -2, -9, -107, 233, -91, 142, -38, -10, 7, 7, 110, -140, 297 },
  { -2, 0, 2, 1, 0, 1, -6, 0, -1, 1, -1, -4, 10, -4, 2, 0, -2, 4, -9, 13, 494 },
  { 12, 12, -36, 10, 8, -36, 28, -33, 6, 7, -36, 49, 71, 45, -33, 7, 10, -28, 29, 61, 208 },
  { -25, -22, 39, 7, -11, 39, 22, 10, -20, -14, 31, 28, -1, 29, 38, -15, -25, 53, 19, 1, 146 },
  { -1, 11, -7, 8, 10, -39, 22, -31, 10, -4, -31, 57, 11, 59, -32, -3, 3, 15, 14, -4, 381 },
  { -55, -58, 17, 118, 185, -4, -309, -33, 66, 100, 87, -2, -32, 60, -82, -45, -31, -67, 27, 87, 463 },
  { -61, 200, 90, -125, -211, 123, -72, 75, -34, -58, 73, 116, -43, 50, 49, 49, 26, 38, 91, -184, 129 },
  { -1, 7, -1, 5, 8, -24, -6, -24, 9, 0, -26, 11, 85, 13, -19, -3, -1, 12, -5, 66, 299 },
  { -5, 8, 4, 5, 0, -12, -26, 5, -6, -14, 13, -38, 142, -47, 18, -14, -1, 35, -53, 141, 204 },
  { -95, -90, 320, -178, -56, 226, -312, 325, -26, 101, -36, -124, 163, -316, 70, 16, -51, -33, 54, 216, 166 },
  { 3, 14, -9, -11, -5, -30, 30, -1, -3, 3, -7, 35, 119, 16, -1, 2, 7, -14, 24, 97, -21 },
  { -17, -24, 103, -26, -2, -60, -64, -47, 112, 66, -23, 3, 128, -20, -176, 55, -9, -79, 40, 196, 199 },
  { -1, -2, 9, -3, -1, -8, -10, -22, 7, -1, -12, 25, 59, 45, -19, -1, 1, 0, -1, 73, 239 },
  { 12, 5, -27, 1, 10, -35, 21, -20, 1, 4, -38, 56, 77, 39, -24, 5, 13, -32, 29, 71, 177 },
  { 10, -30, 24, -32, -27, 166, -76, -40, 39, -4, -4, -67, 51, 123, -29, -17, -1, 37, 19, 139, -52 },
  { -2, 0, 4, 0, 0, 0, -6, -1, 0, 0, 0, -3, 13, -3, 0, 0, -2, 6, -9, 12, 492 },
  { -2, 1, 8, 1, 5, -4, -25, -5, 6, 0, -10, -14, 73, -10, -10, -1, -3, 13, -18, 69, 362 },
  { 22, 115, -282, 61, -154, -64, 432, 141, -231, -75, 264, -13, -256, -161, 291, -46, -6, 155, -234, 161, 273 },
  { 0, 9, -5, 7, 13, -30, -5, -26, 10, 2, -33, 11, 96, 5, -24, 0, -2, 12, 0, 69, 295 },
  { -5, 5, 7, 5, -3, -3, -30, -10, 2, -10, 12, -33, 120, -10, 6, -14, 0, 29, -46, 115, 235 },
  { -7, -11, 17, -5, 0, 8, 12, 17, -11, -11, 12, 19, 70, 19, 8, -6, -13, 31, 12, 51, 93 },
  { -2, -1, 9, 0, 0, 3, -19, 1, 0, 1, 1, -14, 36, -11, 1, 0, -3, 13, -29, 52, 439 },
  { -97, -144, 327, 4, 22, -31, -6, 80, 104, -62, 294, 103, -82, -165, 91, -249, -75, 217, -58, -134, 231 },
  { -24, -18, 49, 13, -82, 114, -57, 56, -80, 2, 28, 67, -48, 22, 70, 11, -17, 4, 50, -77, 346 },
  { 1, 20, -19, 14, 14, -52, 32, -46, 11, 8, -49, 63, 23, 49, -29, 2, 3, -6, 28, 15, 350 },
  { -32, 13, -88, 99, 98, -136, 1, 84, -50, -152, 222, -56, 63, -64, 37, -22, -9, 85, -114, 115, 328 },
  { -1, 37, -59, 50, -19, -78, 203, -254, 116, 22, -37, 175, -131, 173, 1, -99, -3, 120, -114, 77, 154 },
  { -3, -15, 31, -23, -8, 17, -44, 57, -33, -6, 17, -51, 171, -144, 96, -24, 6, 19, -81, 224, 102 },
  { -2, 3, 7, 2, 5, -9, -24, -8, 6, 0, -14, -11, 85, -8, -14, -1, -3, 13, -14, 74, 335 },
  { -3, -10, 4, 21, -2, 36, -41, -22, 3, -27, 23, -90, 196, -40, 23, -28, -2, 56, -59, 198, 40 },
  { -17, -15, 37, -7, -10, 29, 4, 26, -18, -7, 34, 22, 12, 31, 28, -6, -20, 30, 21, 4, 156 },
  { 4, 8, -13, 7, 9, -30, 11, -33, 7, 2, -34, 35, 68, 38, -26, 1, 3, -2, 12, 53, 270 },
  { 10, -226, 244, -42, -48, 191, 56, -294, 117, 220, -337, 173, -120, 42, 88, -69, -13, -116, 94, 143, 287 },
  { -2, 1, 4, 1, 1, 0, -7, -1, 1, 0, -1, -5, 14, -4, 0, 0, -1, 5, -9, 16, 487 },
  { -3, 0, 8, 2, 2, -1, -17, -5, 2, 0, -1, -13, 46, -9, 0, -1, -4, 16, -32, 60, 414 },
  { -3, 2, 10, -2, 2, -13, -19, -10, 4, -3, -11, -4, 110, -4, -10, -3, 0, 10, -16, 105, 221 },
  { 4, -38, 121, -92, -78, 132, -199, 196, -53, 10, 81, -190, 281, -213, 74, 42, 24, -139, 108, 172, 27 },
  { -15, 23, -16, 15, -14, -27, 34, -14, 13, -48, 57, 71, -52, 96, 13, -55, -24, 130, -55, -47, 343 },
  { 0, 58, -240, 8, -26, -236, 307, 194, 75, -35, 22, 289, 185, -409, -41, 16, 17, 8, 40, 105, -156 },
  { -3, 33, -28, 7, 32, -102, 38, 9, -10, 13, -110, 181, 46, 33, -71, 42, 6, -62, 158, -75, 242 },
  { 8, 3, -22, -2, 3, -24, 23, -13, -3, -2, -18, 43, 78, 40, -14, 4, 8, -20, 16, 82, 133 },
  { -34, -167, 286, -166, -275, 393, -83, -68, 51, 176, 80, -1, -156, 146, 196, -146, -19, 41, -118, 41, 161 },
  { 3, 60, -173, 68, -6, -261, 86, 117, -74, 48, 105, 193, 170, -450, 339, -17, -40, 47, -403, 374, 143 },
  { -19, 16, -22, 10, -64, 156, -54, 96, -152, -2, 69, -123, 84, -84, 168, 76, 26, -95, -61, 101, 261 },
  { 14, 4, -29, 3, 5, -29, 21, -24, 3, 2, -30, 55, 72, 40, -20, 1, 12, -27, 24, 70, 178 },
  { -1, 0, 3, 0, 0, 0, -6, 1, 0, 0, -1, -3, 12, -4, 1, 0, -1, 5, -7, 12, 490 },
  { -2, 1, 8, 0, 5, 1, -31, -1, 5, 0, -11, -23, 91, -22, -8, -2, -3, 13, -17, 81, 342 },
  { -4, -42, 0, 56, 27, 101, -58, -102, 79, -25, 29, -61, 230, 9, 22, -77, -22, 157, -199, 257, -241 },
  { -1, 3, 4, 4, 3, -11, -9, -16, 6, 1, -11, 3, 50, 12, -14, 0, -2, 10, -12, 52, 366 },
  { 7, 135, 120, -242, -354, 289, -257, 173, 87, 48, 170, -333, 97, 66, -68, -11, 22, -59, 50, 112, 416 },
  { -2, 0, 9, 1, 3, -4, -26, -11, 4, -1, -12, -15, 124, -4, -10, -3, 0, 9, -17, 108, 203 },
  { -6, -56, 102, -21, -2, 83, -257, 255, -129, -75, -57, 194, -171, 356, -230, 25, -20, 211, -19, -117, 380 },
  { 0, 8, -4, 6, 10, -32, 2, -29, 10, 1, -28, 22, 80, 22, -23, -2, 0, 10, -2, 68, 277 },
  { -5, -20, 21, -5, -49, 63, -50, 45, -11, -27, 101, -119, 139, -103, 27, 3, -3, 41, -101, 173, 276 },
  { -2, 17, -10, 10, -12, -14, 14, -5, -15, -1, 2, 12, 128, 22, -2, 7, 1, 7, -11, 117, -19 },
  { -3, -1, 10, 2, 2, 2, -23, 0, 0, 0, 0, -15, 41, -14, 2, 0, -5, 16, -32, 53, 441 },
  { -10, -9, 23, -12, -10, 19, 3, 34, -19, -17, 21, 31, 25, 34, 25, -12, -14, 35, 16, 25, 133 },
  { -5, 4, -48, 16, -47, 34, 137, -15, -41, 12, 56, 8, -77, 13, 78, -4, 6, 4, -23, 7, 286 },
  { -28, -2, 47, 87, -163, -112, 430, -340, -28, 12, -79, 418, -357, 432, -296, 77, -67, 223, -109, 98, 27 },
  { -8, 2, 10, 4, 28, -38, -2, -41, 20, 2, -63, 85, 19, 92, -43, -7, -5, 9, 52, -26, 331 },
  { -3, -14, 22, 8, -20, -6, 4, -20, -1, -54, 124, -105, 15, 12, 60, -40, -25, 137, -165, 127, 400 },
  { -25, -40, 209, -73, 50, 114, -107, -174, 59, 73, -76, 42, 92, 131, 68, -10, -19, -74, 32, -13, -1 },
  { -2, 1, 8, 1, 5, -6, -25, -8, 7, 0, -12, -14, 88, -11, -12, -2, -3, 16, -20, 82, 328 },
  { -2, 1, 4, 0, 1, 0, -8, 1, 0, 0, -1, -5, 14, -5, 1, 1, -2, 6, -9, 15, 489 },
  { -1, -5, 3, -4, 1, -9, 16, 1, -3, -8, 0, 38, 60, 32, 3, -7, -1, 7, 15, 69, 101 },
  { 4, 5, -8, 4, 7, -27, 3, -28, 7, 1, -28, 36, 77, 35, -24, 0, 4, -5, 7, 68, 234 },
  { 105, 57, -186, -97, 3, -102, -61, 148, 44, 7, -11, -20, 396, -48, -65, -34, 34, -26, 124, 155, -330 },
  { 0, 8, -6, 8, 6, -22, 6, -25, 6, 2, -19, 16, 47, 23, -19, 2, 1, 2, 3, 37, 362 },
  { 54, -8, -95, 145, 106, 118, -118, 117, -165, 0, -73, -202, 278, 77, 137, 1, -86, 194, -175, 4, -103 },
  { -3, 0, 11, 0, 2, 2, -24, 1, 1, 0, -1, -15, 46, -12, 0, 0, -5, 16, -30, 56, 427 },
  { -6, 12, 4, -26, -15, 41, -40, 129, -44, -124, 123, -102, 290, -279, 163, -63, 21, 121, -230, 338, -108 },
  { -34, -20, 93, -59, 38, -17, -72, 31, 67, -90, 30, -37, 137, 158, -198, -5, -18, 134, 44, -35, 222 },
  { 1, 19, -9, -4, 25, -69, 36, -33, 1, 10, -92, 145, -31, 113, -22, -2, 13, -31, 100, -51, 276 },
  { -46, 66, 65, -48, -155, -108, -130, 316, -144, 49, 396, -59, 448, -420, 456, -50, -4, -57, -484, 166, 2 },
  { -2, 1, 1, 2, -5, 14, -33, 17, -8, -6, 9, -53, 142, -54, 16, 1, -5, 15, -25, 136, 190 },
  { -18, -27, 23, 1, -39, 77, 13, 23, -24, -5, 72, 19, -56, 57, 39, -18, -17, 39, -9, -29, 271 },
  { -1, 0, 4, 0, 0, 2, -8, 0, 0, 0, 1, -7, 13, -6, 2, 0, -1, 6, -9, 16, 491 },
  { -1, 2, 5, 0, 5, -10, -14, -8, 3, 2, -14, 8, 46, 13, -15, 3, -1, 2, -1, 30, 398 },
  { -17, -9, 22, -6, -24, 36, 9, 23, -18, -15, 35, 36, 5, 34, 43, -25, -13, 45, 11, -14, 194 },
  { 8, -22, -75, 84, 17, -2, 160, -106, -69, 55, -63, -50, 160, -159, 228, -15, 9, -39, -56, 198, -16 },
  { -1, 2, 6, 2, 6, -10, -20, -10, 6, 0, -16, -8, 84, -11, -11, -2, -3, 14, -14, 74, 334 },
  { 0, 4, 0, 4, 4, -19, -11, -21, 7, 1, -20, 8, 101, 8, -16, -3, 0, 8, -9, 91, 236 },
  { -12, 134, -100, -46, 149, -331, 142, 53, 52, -14, -410, 493, 246, -205, -84, -17, 21, -12, 373, 39, -428 },
  { -20, 23, 148, -125, 6, -129, 8, 70, 41, 13, -56, 196, -136, 148, -134, 47, 2, -88, 204, -193, 467 },
  { -3, -1, 9, 3, 1, 3, -24, -1, 0, -1, 4, -20, 46, -17, 4, 0, -5, 20, -41, 64, 430 },
  { -30, 26, 41, 2, -87, 219, -324, 182, -103, -36, 59, -87, 290, -174, 41, 4, 20, 21, 16, 132, 91 },
  { 8, 12, -26, 9, 18, -50, 41, -35, 2, -1, -39, 57, 22, 54, -37, 13, 8, -16, 35, 17, 326 },
  { 11, 1, -22, 0, 3, -21, 17, -20, 3, 3, -27, 49, 69, 40, -20, 2, 11, -27, 27, 68, 181 },
  { -5, -25, 62, -39, -48, 75, -86, 86, -17, -41, 115, -148, 182, -152, 92, -37, -1, 88, -167, 319, 7 },
  { 2, -15, 14, -2, 8, 10, -18, 12, -11, -12, -1, 6, 102, 21, 3, -7, -7, 34, -5, 92, 60 },
  { -13, -32, 280, -226, -182, 215, -414, 262, 30, -60, 258, -55, 124, -111, 90, -77, -23, 196, -187, 36, 292 },
  { 15, 73, -168, 63, -108, 40, 195, -38, -136, -54, 255, -332, -7, 154, 87, 84, -37, 20, -164, 126, 377 },
  { -1, 1, 2, 1, 0, 1, -5, 1, -1, 0, 1, -3, 8, -4, 1, 0, -1, 5, -7, 9, 498 },
  { 37, -106, 94, -118, -31, 334, -215, 13, 159, 25, -52, -196, 143, 106, -179, -100, 11, 108, 62, -62, 448 },
  { -3, 5, -15, 31, 31, -63, 97, -90, 6, -15, 6, -5, 41, 69, 14, -20, -8, 47, -35, 188, -48 },
  { 0, 3, 3, 2, 7, -18, -8, -15, 5, 1, -22, 16, 54, 14, -18, 2, -1, 6, 0, 42, 365 },
  { 2, 6, -5, 4, 7, -26, 2, -26, 5, 0, -26, 27, 78, 25, -17, -2, 1, 7, -3, 73, 252 },
  { -3, -1, 12, 1, 0, 5, -29, -1, 2, -1, 4, -22, 55, -15, -1, 0, -6, 21, -42, 76, 402 },
  { 5, 11, -15, 7, 15, -47, 42, -43, 5, -2, -47, 91, -16, 82, -18, -10, 3, 10, 30, -24, 353 },
  { -11, -1, 67, -23, -86, 126, -155, 63, -4, -19, 132, -235, 278, -138, 66, -41, -9, 42, -91, 182, 224 },
  { 28, -55, -43, 35, 12, 77, 43, -119, 29, -89, 99, -47, 49, 53, 167, -116, 31, 99, -147, 10, 287 },
  { 11, -3, -16, -2, 8, -23, 14, -15, 2, -2, -24, 53, 75, 47, -25, 3, 10, -23, 27, 66, 147 },
  { 32, 36, -126, -15, 78, -199, 144, 175, -81, -13, -208, 217, 142, -196, 0, -8, 18, 1, 152, 119, -23 },
  { -2, 2, 5, 2, 6, -7, -21, -9, 7, 0, -13, -18, 87, -14, -9, -2, -3, 14, -18, 84, 326 },
  { -2, -5, 18, -8, -2, 6, -34, 15, -3, -14, -5, -19, 139, -21, 4, -12, -2, 22, -5, 106, 154 },
  { -12, -23, 38, -16, -24, 49, 2, 35, -17, 1, 36, 23, -5, 34, 40, -15, -14, 24, 10, 5, 170 },
  { -38, 57, -98, 66, 27, -86, 114, 57, -15, 78, -61, -105, -53, -279, 101, -24, 22, -61, -6, 332, 458 },
  { -3, 1, 6, 2, 1, -1, -15, -2, 1, 1, -2, -9, 31, -10, 0, 0, -3, 10, -21, 38, 457 },
  { 8, -1, -6, -16, -13, -32, 55, -52, 35, -60, 23, 116, -69, 59, 60, -74, 8, 135, -159, 95, 286 },
  { 8, -25, 12, -11, -14, 159, -185, 82, -19, -12, -40, -97, 197, -61, -13, 20, 2, -35, 117, 77, 190 },
  { -15, -36, -93, 318, -65, 35, 312, -483, 198, -19, 175, -46, -161, 331, -99, -220, -124, 404, -348, -13, 422 },
  { -1, 4, 3, 4, 8, -17, -14, -19, 9, 0, -22, 3, 83, 7, -20, -2, -1, 13, -7, 69, 312 },
  { -47, -10, -70, 197, -48, -13, 99, -119, -98, -12, 53, 94, -71, 40, 151, -20, 32, 105, -59, -149, 400 },
  { 7, -1, -6, -5, 0, -7, 14, -3, -2, -5, -8, 23, 85, 19, -3, -4, 5, -4, 21, 92, 81 },
  { -4, 6, 3, 4, -13, 21, -27, -5, -4, -2, 28, -74, 138, -43, 23, -3, 0, 14, -72, 197, 138 },
  { -9, 23, 14, -5, 30, -76, -1, 3, 8, -39, -29, 107, 199, -6, -25, 3, -8, 38, 29, 57, -111 },
  { -15, -12, 30, -6, -15, 37, 3, 16, -10, -6, 11, 37, -2, 33, 31, -15, -14, 35, 22, 14, 167 },
  { -24, 19, -161, 160, -117, 98, 184, -99, -102, -149, 213, -119, 122, -57, 166, -75, -14, 228, -154, 124, 31 },
  { 7, 5, -16, 5, 7, -27, 7, -27, 6, 2, -27, 35, 80, 35, -23, 2, 7, -13, 9, 74, 215 },
  { -2, 1, 4, 1, 0, 0, -9, 1, 0, 0, 1, -6, 16, -5, 2, 0, -2, 7, -13, 17, 487 },
  { -47, 51, -57, -19, -78, 119, 91, -41, 41, 99, -84, -241, 18, -79, -123, -82, 22, -6, 176, 244, 492 },
  { -2, 1, 8, 2, 2, 0, -22, -3, 3, 1, -4, -14, 53, -11, -5, 1, -4, 12, -24, 58, 408 },
  { -3, -1, 17, -4, -4, 10, -43, 11, -4, -6, 11, -37, 95, -34, 12, -5, -4, 24, -44, 103, 324 },
  { 6, 5, -9, -2, 15, -43, 38, -29, 7, 0, -47, 81, 3, 54, -32, 6, 7, -13, 37, 3, 336 },
  { 8, 4, -16, 3, 8, -27, 8, -26, 5, 3, -31, 42, 77, 38, -24, 3, 8, -17, 13, 76, 204 },
  { -8, -10, 37, -13, -1, 19, -37, 21, -16, -9, 36, -90, 102, -74, 50, -16, -1, 38, -79, 140, 330 },
  { -3, 0, 11, 1, 3, 0, -27, -2, 3, -1, -4, -16, 62, -14, -4, 0, -4, 15, -26, 64, 395 },
  { 1, -3, 9, -1, 1, -1, -16, -8, 4, -5, -2, -28, 122, -10, 0, -12, 0, 18, -12, 118, 165 },
  { 9, -8, 4, -27, 22, 55, -175, -2, 142, -54, -45, 61, 101, 289, -338, -41, 7, 25, 311, -249, 333 },
  { -1, 1, 3, 1, 0, 1, -8, -1, 0, -1, 0, -4, 15, -3, 0, 0, -3, 7, -12, 20, 482 },
  { -84, 17, 127, 59, -3, 20, -74, 106, -156, 121, -59, 68, -20, -20, 52, 128, -47, -66, 78, -78, 176 },
  { -1, 5, 2, 4, 8, -19, -10, -20, 8, 1, -23, 8, 80, 8, -17, -2, -2, 13, -7, 66, 310 },
  { -8, -12, 12, -4, -2, 12, 17, 15, -16, -13, 13, 35, 10, 32, 25, -14, -10, 27, 21, 11, 209 },
  { -3, -21, 22, -9, -6, 22, 24, -19, 6, -8, 19, 30, 55, 72, 3, -4, -5, 16, -6, 76, -16 },
  { 100, -231, 34, -321, 4, 24, 61, 246, 137, 68, -14, 208, 168, -327, 7, 148, -108, -178, 386, -182, 50 },
  { -25, -101, 125, 0, -39, 348, -271, 48, -98, 19, -283, -93, 365, -230, 353, -134, 16, 141, -6, 306, -365 },
  { 237, -80, -69, -97, 160, -24, 170, -228, 88, -180, -394, 258, -95, 400, -60, -192, -14, 344, 230, -302, 211 },
  { 15, 18, -39, 14, 18, -36, 71, -49, 4, -6, -29, 81, -45, 101, -43, 0, 5, -12, 26, -30, 386 },
  { 14, -7, -18, -13, -42, 31, -2, 47, -27, -7, 142, -195, 211, -178, 151, -20, 18, 5, -214, 372, -22 },
  { 10, -21, 47, -32, -25, 75, -117, 61, -5, 50, -99, 55, 212, -13, -71, 36, -30, -36, 161, -9, 15 },
  { 7, 3, 5, -27, 25, -53, -7, 71, -28, -7, -32, 21, 158, -92, 12, 8, 16, -15, 18, 176, -7 },
  { -2, 0, 7, 1, 1, 1, -18, -2, 1, 0, -1, -12, 38, -8, -2, 1, -4, 14, -28, 52, 432 },
  { 1, 51, -59, 0, 11, 8, 26, -50, 29, 47, -99, 42, 43, 105, -133, 98, -8, -137, 254, -95, 246 },
  { -19, -26, 37, 5, -21, 47, 11, 14, -18, 0, 39, 24, 1, 25, 43, -20, -25, 37, 4, 13, 170 },
  { 4, 9, -12, 5, 7, -24, 17, -26, 10, 0, -30, 47, 20, 55, -37, 1, 3, 1, 27, 10, 336 },
  { 25, 28, -36, -78, -127, 240, -59, 207, -79, 159, -255, -128, -23, -158, 147, -44, -75, 115, -40, 341, 189 },
  { -4, 2, 10, 1, 3, -1, -32, 0, 4, -2, -8, -21, 87, -20, -9, -2, -3, 14, -17, 72, 360 },
  { -70, -7, 0, 51, -145, 171, 89, -135, 72, 503, -173, -170, -452, 252, 415, -107, -19, -285, -137, 154, 499 },
  { -21, -29, 97, -40, -45, 131, -114, -77, 69, -61, 41, -98, 158, 172, -53, -71, -6, 111, 25, -6, 148 },
  { -20, -37, 68, -61, -83, 166, -132, 124, -11, 29, 133, -300, 317, -164, 71, -20, -19, 44, -173, 378, -107 },
  { 17, 14, -22, -8, -3, -24, 54, 6, 13, 19, -25, 52, 53, 82, -34, 5, -4, 23, 29, 33, -49 },
  { -2, 6, 8, -3, -8, -1, -33, 2, 2, -9, 11, -23, 128, -11, -2, -8, -1, 22, -28, 113, 186 },
  { -16, -5, 1, -16, 31, -35, 23, 55, -47, -57, -2, 183, -113, 36, 86, -17, 3, 38, -28, -58, 378 },
  { 8, 3, -19, 5, 7, -24, 8, -25, 4, 2, -30, 42, 77, 41, -23, 2, 10, -20, 20, 71, 193 },
  { -2, 0, 4, 0, 0, 1, -9, 1, 1, 1, 1, -5, 13, -6, 1, 0, -2, 7, -9, 15, 491 },
  { 0, 5, 0, 4, 7, -21, -8, -22, 6, 0, -23, 10, 81, 12, -16, -2, -1, 12, -9, 74, 293 },
  { 1, -2, 9, -4, 6, -18, -14, -15, 6, -1, -16, 12, 93, 15, -17, -3, 2, 5, -5, 96, 213 },
  { -3, 2, 8, 2, 2, -2, -19, -5, 3, 0, -2, -11, 43, -4, -4, 1, -4, 14, -27, 55, 418 },
  { -18, -3, 10, 14, -5, 12, 20, 3, -12, -17, 23, 8, 41, 9, 30, -19, -19, 61, -30, 86, 124 },
  { 26, 137, -212, 20, -202, 12, 80, 161, -51, -43, 261, -12, 265, -396, 236, -7, -20, 75, -288, 315, -203 },
  { 12, 7, -36, 7, 9, -30, 29, -25, 4, 3, -31, 54, 67, 45, -23, 1, 14, -29, 30, 62, 173 },
  { 1, 8, -7, 7, 10, -31, 2, -29, 8, 1, -32, 29, 75, 24, -25, 0, 1, 7, 5, 52, 301 },
  { -1, -43, 81, -27, 20, 49, -113, 46, -62, -19, -41, 76, 100, 97, 25, 7, 12, -18, 115, -131, 168 },
  { 202, 81, -132, 187, -124, 507, -49, 31, -290, -88, -202, 161, 73, -490, 178, -124, -29, 347, 252, -427, 438 },
  { -6, -7, 38, -19, -3, -20, -17, 29, 21, -23, 38, 15, 118, 73, -73, 1, -20, 62, 25, 67, -87 },
  { 1, -53, 45, 11, -4, 192, -151, 50, -70, 15, -77, -226, 430, -141, 82, 4, 17, -80, 162, 251, -399 },
  { -129, 190, 66, 38, 142, -338, 215, -92, -63, 227, -291, 84, 13, -207, 200, 198, -24, -338, -83, 451, -5 },
  { -3, -56, 73, -26, -36, 131, -133, 89, -31, -7, 58, -188, 182, -97, 100, -29, -4, 40, -126, 203, 231 },
  { 19, 15, -198, 126, 65, -139, 200, 322, -299, 126, -317, 256, -141, -230, 133, 0, 11, -174, 367, -12, 254 },
  { -2, 1, 10, 0, 3, -3, -29, -3, 3, -2, -8, -19, 90, -17, -8, -1, -3, 16, -20, 80, 334 },
  { -4, -4, 11, 4, 1, -19, 39, -22, -3, 17, -23, 71, -45, 58, 0, 2, -2, -15, 28, -20, 365 },
  { -1, 1, 3, 1, 0, 1, -8, 1, 0, 0, 0, -6, 15, -5, 0, 0, -2, 6, -9, 16, 489 },
  { -3, -1, 16, -6, -6, 6, -32, -1, 1, -5, 7, -30, 103, -16, -2, -2, -4, 19, -34, 118, 253 },
  { -2, 0, 4, 0, 0, 2, -9, 0, 0, 0, 0, -7, 15, -6, 2, 0, -2, 5, -10, 16, 490 },
  { 4, -7, -3, 7, -3, 19, -10, 8, 4, -5, 30, -39, 132, 25, -13, -12, 2, 21, -11, 107, 0 },
  { -7, -8, 51, -30, -30, 122, -186, 113, -42, 16, -18, -117, 247, -54, -27, 28, -10, -35, 108, 83, 105 },
  { 25, -188, 332, -186, -66, 262, -159, 30, 85, 8, -82, 131, -85, 45, 26, -141, -18, 215, -146, 197, -55 },
  { -23, 63, -96, 51, 8, -111, 107, 70, -68, 117, -152, 209, 49, -119, 190, -36, 55, -133, 8, 199, -265 },
  { 15, 10, -37, 6, 11, -33, 31, -33, 7, 5, -36, 55, 42, 62, -42, 14, 19, -47, 50, 44, 226 },
  { -2, 0, 8, 1, 5, -3, -27, -4, 5, 0, -11, -15, 83, -14, -8, -2, -2, 12, -16, 67, 357 },
  { -1, 11, -2, 2, 0, -28, 6, -15, 7, 0, -20, 52, 15, 48, -18, -9, 1, 13, 14, -10, 384 },
  { 4, 1, -9, 4, 5, -22, 6, -21, 2, -1, -19, 30, 88, 35, -17, -4, 5, -5, 7, 81, 175 },
  { 1, 6, -3, 5, 8, -26, -4, -24, 7, -1, -26, 20, 84, 16, -21, -1, -1, 11, -3, 67, 286 },
  { 1, -7, -120, 133, 33, 80, 79, -120, -48, -8, -34, -48, -41, 141, 3, 4, 10, -26, 89, -60, 392 },
  { -3, 2, 7, 3, 3, -2, -17, -4, 3, -1, 2, -15, 38, -10, 0, -1, -4, 18, -35, 58, 431 },
  { -39, 93, 16, -18, -9, -131, 6, 138, -99, 23, -53, 40, 182, -194, 58, 67, -13, -52, 5, 178, 115 },
  { -46, 18, 271, -124, -34, -128, -195, 198, -83, 10, 94, 108, -78, -74, 190, -33, -20, 86, -176, 68, 412 },
  { -15, -13, 17, 1, -7, 29, 18, 33, -28, -26, 30, 47, 4, 6, 43, -12, -18, 42, 28, 0, 155 },
};

#endif

#endif

const Int AdaptiveLoopFilter::m_FilterTapsOfType[ALF_NUM_OF_FILTER_TYPES] =
{
  5,
  7,
  9
};

#if GALF
const Int AdaptiveLoopFilter::m_pattern9x9Sym[41] =
{
                 0,
              1, 2, 3,
           4, 5, 6, 7, 8,
       9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 19, 18, 17, 16,
      15, 14, 13, 12, 11, 10, 9,
           8, 7, 6, 5, 4,
              3, 2, 1,
                 0
};
const Int AdaptiveLoopFilter::m_weights9x9Sym[22] =
{
           2,
        2, 2, 2,
     2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 1, 1
};

const Int AdaptiveLoopFilter::m_pattern9x9Sym_Quart[42] =
{

  0, 0, 0, 0, 1, 0, 0, 0, 0,
  0, 0, 0, 2, 3, 4, 0, 0, 0,
  0, 0, 5, 6, 7, 8, 9, 0, 0,
  0, 10, 11, 12, 13, 14, 15, 16, 0,
  17, 18, 19, 20, 21, 22
};

#else
const Int AdaptiveLoopFilter::m_pattern9x9Sym[39] =
{
                   0,
               1,  2,  3,
           4,  5,  6,  7,  8,
       9, 10, 11, 12, 13, 14, 15,
      16, 17, 18, 19, 18, 17, 16,
      15, 14, 13, 12, 11, 10,  9,
           8,  7,  6,  5,  4,
               3,  2,  1,
                   0
};

const Int AdaptiveLoopFilter::m_weights9x9Sym[21] =
{
               2,  2,  2,
           2,  2,  2,  2,  2,
       2,  2,  2,  2,  2,  2,  2,
   2,  2,  2,  2,  1,  1
};

const Int AdaptiveLoopFilter::m_pattern9x9Sym_Quart[42] =
{
   0,  0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  1,  2,  3,  0,  0,  0,
   0,  0,  4,  5,  6,  7,  8,  0,  0,
   0,  9, 10, 11, 12, 13, 14, 15,  0,
  16, 17, 18, 19, 20, 21
};
#endif

const Int AdaptiveLoopFilter::m_pattern7x7Sym[25] =
{
               0,
           1,  2,  3,
       4,  5,  6,  7,  8,
   9, 10, 11, 12, 11, 10, 9,
       8,  7,  6,  5,  4,
           3,  2,  1,
               0
};

const Int AdaptiveLoopFilter::m_weights7x7Sym[14] =
{
              2,
          2,  2,  2,
      2,  2,  2,  2,  2,
  2,  2,  2,  1,  1
};


const Int AdaptiveLoopFilter::m_pattern7x7Sym_Quart[42] =
{
   0,  0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  1,  0,  0,  0,  0,
   0,  0,  0,  2,  3,  4,  0,  0,  0,
   0,  0,  5,  6,  7,  8,  9,  0,  0,
   0, 10, 11, 12, 13, 14,
};

const Int AdaptiveLoopFilter::m_pattern5x5Sym[13] =
{
           0,
       1,  2,  3,
   4,  5,  6,  5,  4,
       3,  2,  1,
           0
};

const Int AdaptiveLoopFilter::m_weights5x5Sym[8] =
{
          2,
       2, 2, 2,
    2, 2, 1, 1
};

const Int AdaptiveLoopFilter::m_pattern5x5Sym_Quart[45] =
{
   0,  0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  1,  0,  0,  0,  0,
   0,  0,  0,  2,  3,  4,  0,  0,  0,
   0,  0,  5,  6,  7,  8,  0,  0,  0,
};

const Int AdaptiveLoopFilter::m_pattern9x9Sym_9[39] =
{
              12, 13, 14,
          20, 21, 22, 23, 24,
      28, 29, 30, 31, 32, 33, 34,
  36, 37, 38, 39, 40, 39, 38, 37, 36,
      34, 33, 32, 31, 30, 29, 28,
          24, 23, 22, 21, 20,
              14, 13, 12,
};

const Int AdaptiveLoopFilter::m_pattern9x9Sym_7[25] =
{
               13,
           21, 22, 23,
       29, 30, 31, 32, 33,
   37, 38, 39, 40, 39, 38, 37,
       33, 32, 31, 30, 29,
           23, 22, 21,
               13

};

const Int AdaptiveLoopFilter::m_pattern9x9Sym_5[13] =
{
          22,
      30, 31, 32,
  38, 39, 40, 39, 38,
      32, 31, 30,
          22,
 };



//MOVE TO ENCODER: //TODO

const Int AdaptiveLoopFilter::m_mapTypeToNumOfTaps[ m_NO_TEST_FILT] =
{
  5, 7, 9
};


const Int* AdaptiveLoopFilter::m_patternTab[m_NO_TEST_FILT] =
{
   m_pattern5x5Sym, m_pattern7x7Sym, m_pattern9x9Sym
};


const Int* AdaptiveLoopFilter::m_weightsTab[m_NO_TEST_FILT] =
{
   m_weights5x5Sym, m_weights7x7Sym, m_weights9x9Sym
};

const Int AdaptiveLoopFilter::m_sqrFiltLengthTab[m_NO_TEST_FILT] =
{
   m_SQR_FILT_LENGTH_5SYM, m_SQR_FILT_LENGTH_7SYM, m_SQR_FILT_LENGTH_9SYM
};

const Int* AdaptiveLoopFilter::m_patternMapTab[m_NO_TEST_FILT] =
{
    m_pattern5x5Sym_Quart, m_pattern7x7Sym_Quart, m_pattern9x9Sym_Quart
};

const Int AdaptiveLoopFilter::m_flTab[m_NO_TEST_FILT] =
{
  5/2, 7/2, 9/2
};



#if GALF
const Int AdaptiveLoopFilter::depthInt9x9Cut[21] =
{
  1,
  1, 2, 1,
  1, 2, 3, 2, 1,
  1, 2, 3, 4, 3, 2, 1,
  1, 2, 3, 4, 5,
};

const Int AdaptiveLoopFilter::depthInt7x7Cut[14] =
{
  1,
  1, 2, 1,
  1, 2, 3, 2, 1,
  1, 2, 3, 4, 4
};


const Int AdaptiveLoopFilter::depthInt5x5Cut[8] =
{
  1,
  1, 2, 1,
  1, 2, 3, 3
};
#else
const Int AdaptiveLoopFilter::m_depthInt9x9Sym[21] =
{
           5, 6, 5,
        5, 6, 7, 6, 5,
     5, 6, 7, 8, 7, 6, 5,
  5, 6, 7, 8, 9, 9
};

const Int AdaptiveLoopFilter::m_depthInt7x7Sym[14] =
{
           4,
        4, 5, 4,
     4, 5, 6, 5, 4,
  4, 5, 6, 7, 7
};

const Int AdaptiveLoopFilter::m_depthInt5x5Sym[8] =
{
        3,
     3, 4, 3,
  3, 4, 5, 5
};
#endif

const Int* AdaptiveLoopFilter::m_pDepthIntTab[m_NO_TEST_FILT] =
{
#if GALF
  depthInt5x5Cut, depthInt7x7Cut, depthInt9x9Cut
#else
  m_depthInt5x5Sym, m_depthInt7x7Sym, m_depthInt9x9Sym
#endif
};

//END MOVE TO ENCODER






// scaling factor for quantization of filter coefficients (9x9)
const Int AdaptiveLoopFilter::m_aiSymmetricMag9x9[41] =
{
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 1
};

// scaling factor for quantization of filter coefficients (7x7)
const Int AdaptiveLoopFilter::m_aiSymmetricMag7x7[25] =
{
  2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 1
};

// scaling factor for quantization of filter coefficients (5x5)
const Int AdaptiveLoopFilter::m_aiSymmetricMag5x5[13] =
{
  2, 2, 2, 2, 2,
  2, 2, 2, 2, 2,
  2, 2, 1
};

const Int AdaptiveLoopFilter::m_aiSymmetricMag9x7[32] =
{
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 1
};

// ====================================================================================================================
// Constructor / destructor / create / destroy
// ====================================================================================================================

AdaptiveLoopFilter::AdaptiveLoopFilter()
{
  m_img_height        = 0;
  m_img_width         = 0;
  m_nInputBitDepth    = 0;
  m_nInternalBitDepth = 0;
  m_nBitIncrement     = 0;
  m_nIBDIMax          = 0;
  m_uiMaxTotalCUDepth = 0;
  m_uiMaxCUWidth      = 0;
  m_uiNumCUsInFrame   = 0;

  m_varImgMethods = nullptr; //TODO remove, only m_imgY_var is used
  m_imgY_var      = nullptr;
  m_imgY_temp     = nullptr;
  m_imgY_ver      = nullptr;
  m_imgY_hor      = nullptr;
  m_imgY_dig0     = nullptr;
  m_imgY_dig1     = nullptr;
  m_filterCoeffFinal = NULL;
  m_filterCoeffSym          = nullptr;
  m_filterCoeffPrevSelected = nullptr;
  m_filterCoeffTmp          = nullptr;
  m_filterCoeffSymTmp       = nullptr;
  m_filterCoeffShort        = nullptr;

  m_isGALF        = false;
  m_wasCreated    = false;
  m_isDec           = true;

#if MCALF
  m_copy          = true;
  m_useClassifier = 0;
#endif

}

Void AdaptiveLoopFilter:: xError(const char *text, int code)
{
  fprintf(stderr, "%s\n", text);
  exit(code);
}

Void AdaptiveLoopFilter:: no_mem_exit(const char *where)
{
  char errortext[200];
  sprintf(errortext, "Could not allocate memory: %s",where);
  xError (errortext, 100);
}

Void AdaptiveLoopFilter::initMatrix_Pel(Pel ***m2D, int d1, int d2)
{
  int i;

  if(!(*m2D = (Pel **) calloc(d1, sizeof(Pel *))))
    THROW("initMatrix_Pel: memory allocation problem\n");
  if(!((*m2D)[0] = (Pel *) calloc(d1 * d2, sizeof(Pel))))
    THROW("initMatrix_Pel: memory allocation problem\n");

  for(i = 1; i < d1; i++)
    (*m2D)[i] = (*m2D)[i-1] + d2;
}

Void AdaptiveLoopFilter::initMatrix_int(int ***m2D, int d1, int d2)
{
  int i;

  if(!(*m2D = (int **) calloc(d1, sizeof(int *))))
    THROW("initMatrix_int: memory allocation problem\n");
  if(!((*m2D)[0] = (int *) calloc(d1 * d2, sizeof(int))))
    THROW("initMatrix_int: memory allocation problem\n");

  for(i = 1; i < d1; i++)
    (*m2D)[i] = (*m2D)[i-1] + d2;
}

Void AdaptiveLoopFilter::initMatrix_short(short ***m2D, int d1, int d2)
{
  int i;

  if(!(*m2D = (short **) calloc(d1, sizeof(short *))))
    THROW("initMatrix_int: memory allocation problem\n");
  if(!((*m2D)[0] = (short *) calloc(d1 * d2, sizeof(short))))
    THROW("initMatrix_int: memory allocation problem\n");

  for(i = 1; i < d1; i++)
    (*m2D)[i] = (*m2D)[i-1] + d2;
}

Void AdaptiveLoopFilter::destroyMatrix_short(short **m2D)
{
  if(m2D)
  {
    if(m2D[0])
      free(m2D[0]);
    else
      THROW("destroyMatrix_int: memory free problem\n");
    free(m2D);
  }
}

Void AdaptiveLoopFilter::destroyMatrix_int(int **m2D)
{
  if(m2D)
  {
    if(m2D[0])
      free(m2D[0]);
    else
      THROW("destroyMatrix_int: memory free problem\n");
    free(m2D);
  }
}

Void AdaptiveLoopFilter::destroyMatrix_Pel(Pel **m2D)
{
  if(m2D)
  {
    if(m2D[0])
      free(m2D[0]);
    else
      THROW("destroyMatrix_Pel: memory free problem\n");
    free(m2D);
  }
}

Void AdaptiveLoopFilter::get_mem2Dpel(Pel ***array2D, int rows, int columns)
{
  int i;

  if((*array2D      = (Pel**)calloc(rows,        sizeof(Pel*))) == NULL)
    no_mem_exit("get_mem2Dpel: array2D");
  if(((*array2D)[0] = (Pel* )calloc(rows*columns,sizeof(Pel ))) == NULL)
    no_mem_exit("get_mem2Dpel: array2D");

  for(i=1 ; i<rows ; i++)
    (*array2D)[i] =  (*array2D)[i-1] + columns  ;
}

Void AdaptiveLoopFilter::free_mem2Dpel(Pel **array2D)
{
  if (array2D)
  {
    if (array2D[0])
      free (array2D[0]);
    else xError ("free_mem2Dpel: trying to free unused memory",100);

    free (array2D);
  }
}

Void AdaptiveLoopFilter::initMatrix_double(double ***m2D, int d1, int d2)
{
  int i;

  if(!(*m2D = (double **) calloc(d1, sizeof(double *))))
    THROW("initMatrix_double: memory allocation problem\n");
  if(!((*m2D)[0] = (double *) calloc(d1 * d2, sizeof(double))))
    THROW("initMatrix_double: memory allocation problem\n");

  for(i = 1; i < d1; i++)
    (*m2D)[i] = (*m2D)[i-1] + d2;
}

Void AdaptiveLoopFilter::initMatrix3D_double(double ****m3D, int d1, int d2, int d3)
{
  int  j;

  if(!((*m3D) = (double ***) calloc(d1, sizeof(double **))))
    THROW("initMatrix3D_double: memory allocation problem\n");

  for(j = 0; j < d1; j++)
    initMatrix_double((*m3D) + j, d2, d3);
}


Void AdaptiveLoopFilter::initMatrix4D_double(double *****m4D, int d1, int d2, int d3, int d4)
{
  int  j;

  if(!((*m4D) = (double ****) calloc(d1, sizeof(double ***))))
    THROW("initMatrix4D_double: memory allocation problem\n");

  for(j = 0; j < d1; j++)
    initMatrix3D_double((*m4D) + j, d2, d3, d4);
}


Void AdaptiveLoopFilter::destroyMatrix_double(double **m2D)
{
  if(m2D)
  {
    if(m2D[0])
      free(m2D[0]);
    else
      THROW("destroyMatrix_double: memory free problem\n");
    free(m2D);
  }
  else
  {
    THROW("destroyMatrix_double: memory free problem\n");
  }
}

Void AdaptiveLoopFilter::destroyMatrix3D_double(double ***m3D, int d1)
{
  int i;

  if(m3D)
  {
    for(i = 0; i < d1; i++)
      destroyMatrix_double(m3D[i]);
    free(m3D);
  }
  else
  {
    THROW("destroyMatrix3D_double: memory free problem\n");
  }
}


Void AdaptiveLoopFilter::destroyMatrix4D_double(double ****m4D, int d1, int d2)
{
  int  j;

  if(m4D)
  {
    for(j = 0; j < d1; j++)
      destroyMatrix3D_double(m4D[j], d2);
    free(m4D);
  }
  else
  {
    THROW("destroyMatrix4D_double: memory free problem\n");
  }
}

Void AdaptiveLoopFilter::create( const Int iPicWidth, const Int iPicHeight, const ChromaFormat chromaFormatIDC, const Int uiMaxCUWidth, const UInt uiMaxCUHeight, const UInt uiMaxCUDepth, const Int nInputBitDepth, const Int nInternalBitDepth, const Int numberOfCTUs )
{
  m_nInputBitDepth    = nInputBitDepth;
  m_nInternalBitDepth = nInternalBitDepth;
  m_nBitIncrement     = nInternalBitDepth - 8; // according to ALF on HM-3
  m_nIBDIMax          = ( 1 << m_nInternalBitDepth ) - 1;

  m_uiMaxTotalCUDepth = uiMaxCUDepth;
  m_uiMaxCUWidth      = uiMaxCUWidth;
  m_uiNumCUsInFrame   = numberOfCTUs;


  if( m_wasCreated )
  {
    CHECK( m_img_height != iPicHeight, "ALF: wrong init" );
    CHECK( m_img_width  != iPicWidth,  "ALF: wrong init" );
    return;
  }

  m_tmpRecExtBuf.create( chromaFormatIDC, Area(0, 0, iPicWidth, iPicHeight ), uiMaxCUWidth, m_FILTER_LENGTH >> 1, 0, false);

  m_img_height = iPicHeight;
  m_img_width  = iPicWidth;

  get_mem2Dpel( &m_varImgMethods, m_img_height, m_img_width );
  initMatrix_int(&m_imgY_temp, m_ALF_WIN_VERSIZE+2*m_VAR_SIZE+3, m_ALF_WIN_HORSIZE+2*m_VAR_SIZE+3);
  initMatrix_int(&m_imgY_ver, m_ALF_WIN_VERSIZE+2*m_VAR_SIZE+3, m_ALF_WIN_HORSIZE+2*m_VAR_SIZE+3);
  initMatrix_int(&m_imgY_hor, m_ALF_WIN_VERSIZE+2*m_VAR_SIZE+3, m_ALF_WIN_HORSIZE+2*m_VAR_SIZE+3);

  initMatrix_int(&m_imgY_dig0, m_ALF_WIN_VERSIZE + 2 * m_VAR_SIZE + 3, m_ALF_WIN_HORSIZE + 2 * m_VAR_SIZE + 3);
  initMatrix_int(&m_imgY_dig1, m_ALF_WIN_VERSIZE + 2 * m_VAR_SIZE + 3, m_ALF_WIN_HORSIZE + 2 * m_VAR_SIZE + 3);


  initMatrix_int(&m_filterCoeffSym, m_NO_VAR_BINS, m_MAX_SQR_FILT_LENGTH);
  initMatrix_int(&m_filterCoeffPrevSelected, m_NO_VAR_BINS, m_MAX_SQR_FILT_LENGTH);
  initMatrix_int(&m_filterCoeffTmp, m_NO_VAR_BINS, m_MAX_SQR_FILT_LENGTH);
  initMatrix_int(&m_filterCoeffSymTmp, m_NO_VAR_BINS, m_MAX_SQR_FILT_LENGTH);
  initMatrix_short(&m_filterCoeffShort, m_NO_VAR_BINS, m_MAX_SQR_FILT_LENGTH);

  initMatrix_int(&m_filterCoeffFinal, m_NO_VAR_BINS, (m_MAX_SQR_FILT_LENGTH / 2 + 1));

  for( int k = 0; k < E0104_ALF_MAX_TEMPLAYERID; k++)
  {
    for( int i = 0; i < C806_ALF_TEMPPRED_NUM; i++)
    {
      allocALFParam(&m_acStoredAlfPara[k][i]);
    }
  }

  m_wasCreated = true;
}

Void AdaptiveLoopFilter::destroy()
{
  if( !m_wasCreated )
    return;
  m_tmpRecExtBuf.destroy();

  destroyMatrix_int(m_imgY_temp);

  destroyMatrix_int(m_imgY_ver);
  destroyMatrix_int(m_imgY_hor);

  destroyMatrix_int(m_imgY_dig0);
  destroyMatrix_int(m_imgY_dig1);

  free_mem2Dpel(m_varImgMethods);

  destroyMatrix_short(m_filterCoeffShort);

  destroyMatrix_int(m_filterCoeffSym);
  destroyMatrix_int(m_filterCoeffPrevSelected);
  destroyMatrix_int(m_filterCoeffTmp);
  destroyMatrix_int(m_filterCoeffSymTmp);

  destroyMatrix_int(m_filterCoeffFinal);

  for( int k = 0; k < E0104_ALF_MAX_TEMPLAYERID; k++)
  {
    for (Int i = 0; i < C806_ALF_TEMPPRED_NUM; i++)
    {
      freeALFParam(&m_acStoredAlfPara[k][i]);
    }
    m_storedAlfParaNum[k] = 0;
  }
  m_wasCreated = false;
}

// ====================================================================================================================
// Public member functions
// ====================================================================================================================

Int AdaptiveLoopFilter::ALFTapHToTapV(Int tapH)
{
  return std::min<UInt>(tapH, 7);
}

Int AdaptiveLoopFilter::ALFFlHToFlV(Int flH)
{
#if GALF
  return flH;
#else
  return std::min<UInt>(flH, 7/2);
#endif
}

Int AdaptiveLoopFilter::ALFTapHToNumCoeff(Int tapH)
{
  Int num_coeff;

  num_coeff = (Int)(tapH*tapH)/4 + 2;
#if GALF
  num_coeff -= 1;
#else
  if (tapH == 9)
    num_coeff -= 1;
  else
    CHECK(tapH >= 9, "Filter defined only for tapH < 0");
#endif
  return num_coeff;
}

// --------------------------------------------------------------------------------------------------------------------
// allocate / free / copy functions
// --------------------------------------------------------------------------------------------------------------------

Void AdaptiveLoopFilter::allocALFParam(ALFParam* pAlfParam)
{
  pAlfParam->alf_flag = 0;
  pAlfParam->cu_control_flag = 0;
  pAlfParam->alf_max_depth = 0;
#if JVET_C0038_NO_PREV_FILTERS
  pAlfParam->iAvailableFilters = JVET_C0038_NO_PREV_FILTERS;
  pAlfParam->iPredPattern = 0;
#endif

  pAlfParam->alfCoeffChroma = new Int[m_ALF_MAX_NUM_COEF_C];
  ::memset(pAlfParam->alfCoeffChroma, 0, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);
  pAlfParam->temporalPredFlag = false;
  pAlfParam->prevIdx = -1;

  pAlfParam->coeff_chroma = new Int[m_ALF_MAX_NUM_COEF_C];
  ::memset(pAlfParam->coeff_chroma, 0, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);
  pAlfParam->coeffmulti = new Int*[m_NO_VAR_BINS];
  for (int i=0; i<m_NO_VAR_BINS; i++)
  {
    pAlfParam->coeffmulti[i] = new Int[m_ALF_MAX_NUM_COEF];
    ::memset(pAlfParam->coeffmulti[i], 0, sizeof(Int)*m_ALF_MAX_NUM_COEF);
  }
  pAlfParam->num_ctus_in_frame = m_uiNumCUsInFrame;
  pAlfParam->maxCodingDepth = m_uiMaxTotalCUDepth;
  pAlfParam->num_alf_cu_flag  = 0;
  pAlfParam->alf_cu_flag      = new Bool[(m_uiNumCUsInFrame << ((m_uiMaxTotalCUDepth-1)*2))];
  ::memset(pAlfParam->kMinTab, 0, sizeof(pAlfParam->kMinTab));

  // galf stuff
  pAlfParam->alfCoeffLuma = new Int*[m_NO_VAR_BINS];
  for (int i = 0; i<m_NO_VAR_BINS; i++)
  {
    pAlfParam->alfCoeffLuma[i] = new Int[m_ALF_MAX_NUM_COEF];
    ::memset(pAlfParam->alfCoeffLuma[i], 0, sizeof(Int)*m_ALF_MAX_NUM_COEF);
  }
}

Void AdaptiveLoopFilter::freeALFParam(ALFParam* pAlfParam)
{
  if( pAlfParam == nullptr )
    return;

  if (pAlfParam->coeff_chroma != NULL)
  {
    delete[] pAlfParam->coeff_chroma;
    pAlfParam->coeff_chroma = NULL;
  }

  if( pAlfParam->coeffmulti != NULL )
  {
    for (int i=0; i<m_NO_VAR_BINS; i++)
    {
      delete[] pAlfParam->coeffmulti[i];
      pAlfParam->coeffmulti[i] = NULL;
    }
    delete[] pAlfParam->coeffmulti;
    pAlfParam->coeffmulti = NULL;
  }

  if(pAlfParam->alf_cu_flag != NULL)
  {
    delete[] pAlfParam->alf_cu_flag;
    pAlfParam->alf_cu_flag = NULL;
  }

  if( pAlfParam->alfCoeffLuma != NULL )
  {
    for (int i = 0; i<m_NO_VAR_BINS; i++)
    {
      delete[] pAlfParam->alfCoeffLuma[i];
      pAlfParam->alfCoeffLuma[i] = NULL;
    }
    delete[] pAlfParam->alfCoeffLuma;
    pAlfParam->alfCoeffLuma = NULL;
  }

  if( pAlfParam->alfCoeffChroma != NULL )
  {
    delete[] pAlfParam->alfCoeffChroma;
    pAlfParam->alfCoeffChroma = NULL;
  }
}

Void AdaptiveLoopFilter::copyALFParam(ALFParam* pDesAlfParam, ALFParam* pSrcAlfParam, Bool max_depth_copy )
{
#if COM16_C806_ALF_TEMPPRED_NUM
  if (!pDesAlfParam->temporalPredFlag)
  {
#endif
    pDesAlfParam->alf_flag = pSrcAlfParam->alf_flag;
    pDesAlfParam->cu_control_flag = pSrcAlfParam->cu_control_flag;
    pDesAlfParam->chroma_idc = pSrcAlfParam->chroma_idc;
#if COM16_C806_ALF_TEMPPRED_NUM
  }
#endif
  pDesAlfParam->tapH = pSrcAlfParam->tapH;
  pDesAlfParam->tapV = pSrcAlfParam->tapV;
  pDesAlfParam->num_coeff = pSrcAlfParam->num_coeff;
  pDesAlfParam->tap_chroma = pSrcAlfParam->tap_chroma;
  pDesAlfParam->num_coeff_chroma = pSrcAlfParam->num_coeff_chroma;

  ::memcpy(pDesAlfParam->coeff_chroma, pSrcAlfParam->coeff_chroma, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);
  pDesAlfParam->filterType = pSrcAlfParam->filterType;
  ::memcpy(pDesAlfParam->filterPattern, pSrcAlfParam->filterPattern, sizeof(Int)*m_NO_VAR_BINS);
  pDesAlfParam->startSecondFilter = pSrcAlfParam->startSecondFilter;
  pDesAlfParam->filterMode = pSrcAlfParam->filterMode;

  //Coeff send related
  pDesAlfParam->filters_per_group_diff = pSrcAlfParam->filters_per_group_diff; //this can be updated using codedVarBins
  pDesAlfParam->filters_per_group = pSrcAlfParam->filters_per_group; //this can be updated using codedVarBinsif

#if MCALF
  if (m_copy)
  {
    ::memcpy(pDesAlfParam->selectedBins, pSrcAlfParam->selectedBins, sizeof(Int) * 80);
    pDesAlfParam->numClasses = pSrcAlfParam->numClasses;
    pDesAlfParam->classifier = pSrcAlfParam->classifier;
  }
#endif

#ifdef FORCE0
  if( ! m_isGALF || FORCE0 )
#else
  if( ! m_isGALF )
#endif
  {
    ::memcpy(pDesAlfParam->codedVarBins, pSrcAlfParam->codedVarBins, sizeof(Int)*m_NO_VAR_BINS);
    pDesAlfParam->forceCoeff0 = pSrcAlfParam->forceCoeff0;
  }
#if JVET_C0038_NO_PREV_FILTERS
  pDesAlfParam->iAvailableFilters = pSrcAlfParam->iAvailableFilters;
  pDesAlfParam->iPredPattern = pSrcAlfParam->iPredPattern;
  ::memcpy(pDesAlfParam->PrevFiltIdx, pSrcAlfParam->PrevFiltIdx, sizeof(Int) *m_NO_VAR_BINS);
#endif
  pDesAlfParam->predMethod = pSrcAlfParam->predMethod;
  for (int i=0; i<m_NO_VAR_BINS; i++)
  {
    ::memcpy(pDesAlfParam->coeffmulti[i], pSrcAlfParam->coeffmulti[i], sizeof(Int)*m_ALF_MAX_NUM_COEF);
    // galf stuff
    ::memcpy(pDesAlfParam->alfCoeffLuma[i], pSrcAlfParam->alfCoeffLuma[i], sizeof(Int)*m_ALF_MAX_NUM_COEF);
  }
  pDesAlfParam->minKStart = pSrcAlfParam->minKStart;
  ::memcpy( pDesAlfParam->kMinTab , pSrcAlfParam->kMinTab , sizeof( pSrcAlfParam->kMinTab ) );

  ::memcpy( pDesAlfParam->mapClassToFilter , pSrcAlfParam->mapClassToFilter , sizeof( pSrcAlfParam->mapClassToFilter ) );

#if COM16_C806_ALF_TEMPPRED_NUM
  if (max_depth_copy)
  {
#endif
    pDesAlfParam->alf_max_depth = pSrcAlfParam->alf_max_depth;
#if COM16_C806_ALF_TEMPPRED_NUM
  }
#endif

#if COM16_C806_ALF_TEMPPRED_NUM
  ::memcpy(pDesAlfParam->alfCoeffChroma, pSrcAlfParam->alfCoeffChroma, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);
  if (!pDesAlfParam->temporalPredFlag)
  {
#endif
    pDesAlfParam->num_alf_cu_flag = pSrcAlfParam->num_alf_cu_flag;
    ::memcpy(pDesAlfParam->alf_cu_flag, pSrcAlfParam->alf_cu_flag, sizeof(Bool)*pSrcAlfParam->num_alf_cu_flag);
#if COM16_C806_ALF_TEMPPRED_NUM
  }
#endif

#if COM16_C806_ALF_TEMPPRED_NUM
  if( !pDesAlfParam->temporalPredFlag )
  {
#endif
  pDesAlfParam->temporalPredFlag = pSrcAlfParam->temporalPredFlag;
  pDesAlfParam->prevIdx          = pSrcAlfParam->prevIdx;
#if COM16_C806_ALF_TEMPPRED_NUM
  }
#endif
}

Void AdaptiveLoopFilter::resetALFParam(ALFParam* pDesAlfParam)
{
  if( pDesAlfParam->coeffmulti == nullptr )
  {
    allocALFParam( pDesAlfParam);
  }
  pDesAlfParam->alf_flag = 0;
  pDesAlfParam->cu_control_flag = 0;
  pDesAlfParam->chroma_idc = 0;
  pDesAlfParam->tapH = 0;
  pDesAlfParam->tapV = 0;
  pDesAlfParam->num_coeff = 0;
  if( m_isGALF )
  {
    pDesAlfParam->tap_chroma = m_ALF_MAX_NUM_TAP_C;
  }
  else
  {
    pDesAlfParam->tap_chroma = 0;
    pDesAlfParam->num_coeff_chroma = 0;
  }
#if JVET_C0038_NO_PREV_FILTERS
  pDesAlfParam->iAvailableFilters = JVET_C0038_NO_PREV_FILTERS;
  pDesAlfParam->iPredPattern = 0;
  ::memset(pDesAlfParam->PrevFiltIdx, 0, sizeof(Int)*m_NO_VAR_BINS);
#endif
  ::memset(pDesAlfParam->coeff_chroma, 0, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);

  pDesAlfParam->filterType = ALF_FILTER_SYM_5;
  ::memset(pDesAlfParam->filterPattern, 0, sizeof(Int)*m_NO_VAR_BINS);
  pDesAlfParam->startSecondFilter = 0;
  pDesAlfParam->filterMode = ALF_MULTIPLE_FILTERS;
  pDesAlfParam->minKStart  = 0;
  ::memset(pDesAlfParam->kMinTab , 0 , sizeof( pDesAlfParam->kMinTab ) );

  //Coeff send related
  pDesAlfParam->filters_per_group_diff = 0; //this can be updated using codedVarBins
  pDesAlfParam->filters_per_group = 0; //this can be updated using codedVarBins
#if !GALF
  ::memset(pDesAlfParam->codedVarBins, 0, sizeof(Int)*m_NO_VAR_BINS);
  pDesAlfParam->forceCoeff0 = 0;
#endif
  pDesAlfParam->predMethod = 0;
  for (int i=0; i<m_NO_VAR_BINS; i++)
  {
    ::memset(pDesAlfParam->coeffmulti[i], 0, sizeof(Int)*m_ALF_MAX_NUM_COEF);
#if GALF
    ::memset(pDesAlfParam->alfCoeffLuma[i], 0, sizeof(Int)*m_ALF_MAX_NUM_COEF);
#endif
  }
  ::memset( pDesAlfParam->mapClassToFilter , 0 , sizeof( pDesAlfParam->mapClassToFilter ) );

  pDesAlfParam->num_alf_cu_flag  = 0;
#if COM16_C806_ALF_TEMPPRED_NUM
  ::memset(pDesAlfParam->alfCoeffChroma, 0, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);
  pDesAlfParam->temporalPredFlag = false;
  pDesAlfParam->prevIdx = -1;
#else
  pDesAlfParam->temporalPredFlag = 0;
  pDesAlfParam->prevIdx          = 0;
#endif

#if MCALF
  pDesAlfParam->classifier = 1;
  pDesAlfParam->numClasses = 0;
  ::memset(pDesAlfParam->selectedBins, 0, sizeof(Int) * 80);
  m_useClassifier = 0;
#endif

}

// --------------------------------------------------------------------------------------------------------------------
// interface function for actual ALF process
// --------------------------------------------------------------------------------------------------------------------

/**
 \param cs            coding structure (CodingStructure) class (input/output)
 \param pcAlfParam    ALF parameter
*/
Void AdaptiveLoopFilter::ALFProcess( CodingStructure& cs, ALFParam* pcAlfParam
                                    )
{

#if MCALF 
  m_useClassifier = pcAlfParam->classifier;
#endif

  if(!pcAlfParam->alf_flag)
  {
    return;
  }
  PelUnitBuf recUnitBuf = cs.getRecoBuf();

  // copy the clip ranges
  m_clpRngs = cs.slice->clpRngs();
  m_isGALF  = cs.sps->getSpsNext().getGALFEnabled();

  m_tmpRecExtBuf.copyFrom( recUnitBuf );
  PelUnitBuf tmpRecExt = m_tmpRecExtBuf.getBuf( cs.area );
  tmpRecExt.extendBorderPel( m_FILTER_LENGTH >> 1 );

  xALFLuma( cs, pcAlfParam,  tmpRecExt, recUnitBuf );

  if(pcAlfParam->chroma_idc)
  {
    if( m_isGALF )
    {
#if COM16_C806_ALF_TEMPPRED_NUM
      initVarForChroma(pcAlfParam, (pcAlfParam->temporalPredFlag ? true : false)
                      );
#else
      initVarForChroma(pcAlfParam, false);
#endif
    }
    else
    {
      predictALFCoeffChroma(pcAlfParam);
    }

#if COM16_C806_ALF_TEMPPRED_NUM
    memcpy(pcAlfParam->alfCoeffChroma, pcAlfParam->coeff_chroma, sizeof(Int)*m_ALF_MAX_NUM_COEF_C);
#endif
    xALFChroma(pcAlfParam, tmpRecExt, recUnitBuf);
  }

  DTRACE_UPDATE(g_trace_ctx, (std::make_pair("poc", cs.slice->getPOC())));
  DTRACE_PIC_COMP(D_REC_CB_LUMA_ALF, cs, cs.getRecoBuf(), COMPONENT_Y);
  DTRACE_PIC_COMP(D_REC_CB_CHROMA_ALF, cs, cs.getRecoBuf(), COMPONENT_Cb);
  DTRACE_PIC_COMP(D_REC_CB_CHROMA_ALF, cs, cs.getRecoBuf(), COMPONENT_Cr);

  DTRACE    ( g_trace_ctx, D_CRC, "ALF" );
  DTRACE_CRC( g_trace_ctx, D_CRC, cs, cs.getRecoBuf() );
}


// ====================================================================================================================
// Protected member functions
// ====================================================================================================================

// --------------------------------------------------------------------------------------------------------------------
// ALF for luma
// --------------------------------------------------------------------------------------------------------------------
Void AdaptiveLoopFilter::xALFLuma( CodingStructure& cs, ALFParam* pcAlfParam, PelUnitBuf& recSrcExt, PelUnitBuf& recDst )
{
  //Decode and reconst filter coefficients
  xDecodeFilter( pcAlfParam );
  m_imgY_var       = m_varImgMethods;

  if( pcAlfParam->cu_control_flag )
  {
    xCUAdaptive( cs, recSrcExt, recDst, pcAlfParam 
#if MCALF
    , pcAlfParam->numClasses, pcAlfParam->selectedBins
#endif
    );
  }
  else
  {
    xFilterFrame(recSrcExt, recDst, pcAlfParam->filterType
#if MCALF
    , pcAlfParam->numClasses, pcAlfParam->selectedBins, pcAlfParam->classifier
#endif
    );
  }
}


// --------------------------------------------------------------------------------------------------------------------
// ALF for chroma
// --------------------------------------------------------------------------------------------------------------------

Void AdaptiveLoopFilter::xALFChroma( ALFParam* pcAlfParam,  const PelUnitBuf& recExtBuf, PelUnitBuf& recUnitBuf )
{
  if((pcAlfParam->chroma_idc>>1) & 0x01)
  {
    if( m_isGALF )
      xFrameChromaGalf(pcAlfParam, recExtBuf, recUnitBuf, COMPONENT_Cb);
    else
      xFrameChromaAlf(pcAlfParam, recExtBuf, recUnitBuf, COMPONENT_Cb);
  }
  else
  {
    //TODO is this needed?
    recUnitBuf.get(COMPONENT_Cb).copyFrom( recExtBuf.get(COMPONENT_Cb) );
  }

  if(pcAlfParam->chroma_idc&0x01)
  {
    if( m_isGALF )
      xFrameChromaGalf(pcAlfParam, recExtBuf, recUnitBuf, COMPONENT_Cr);
    else
      xFrameChromaAlf(pcAlfParam, recExtBuf, recUnitBuf, COMPONENT_Cr);
  }
  else
  {
    //TODO is this needed?
    recUnitBuf.get(COMPONENT_Cr).copyFrom( recExtBuf.get(COMPONENT_Cr) );
  }
}

Void AdaptiveLoopFilter::xFilterFrame(PelUnitBuf& recSrcExt, PelUnitBuf& recDst, AlfFilterType filtType
#if MCALF
  , Int numClasses, Int selectedBins[], Int usePixelClassifier
#endif
  )
{
  Int i, j;
#if MCALF
  if (m_useClassifier == 0)
  {
    for (i = 0; i < m_img_height; i += m_ALF_WIN_VERSIZE)
    {
      for (j = 0; j < m_img_width; j += m_ALF_WIN_HORSIZE)
      {
        const int nHeight = std::min(i + m_ALF_WIN_VERSIZE, m_img_height) - i;
        const int nWidth = std::min(j + m_ALF_WIN_HORSIZE, m_img_width) - j;
        Area blk_cur(j, i, nWidth, nHeight);

        if (m_isGALF)
        {
          xClassifyByRC(m_imgY_var, recSrcExt.get(COMPONENT_Y), blk_cur, m_NO_VAR_BINS);
          xFilterBlkGalf(recDst, recSrcExt, blk_cur, filtType, COMPONENT_Y);
        }
        else
        {
          xClassifyByLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xFilterBlkAlf(recDst.get(COMPONENT_Y), recSrcExt.get(COMPONENT_Y), blk_cur, filtType);
        }

      }
    }
  }
  else if (m_useClassifier == 1)
  {
    for (i = 0; i < m_img_height; i += m_ALF_WIN_VERSIZE)
    {
      for (j = 0; j < m_img_width; j += m_ALF_WIN_HORSIZE)
      {
        const int nHeight = std::min(i + m_ALF_WIN_VERSIZE, m_img_height) - i;
        const int nWidth = std::min(j + m_ALF_WIN_HORSIZE, m_img_width) - j;
        Area blk_cur(j, i, nWidth, nHeight);

        if (m_isGALF)
        {
          xClassifyByGeoLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xClassifyByPixelConfBlk(m_imgY_var, recSrcExt.get(COMPONENT_Y), blk_cur, numClasses, selectedBins);
          xFilterBlkGalf(recDst, recSrcExt, blk_cur, filtType, COMPONENT_Y);
      }
        else
        {
          xClassifyByLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xFilterBlkAlf(recDst.get(COMPONENT_Y), recSrcExt.get(COMPONENT_Y), blk_cur, filtType);
        }

    }
  }
}
  else if (m_useClassifier == 2)
  {
    for (i = 0; i < m_img_height; i += m_ALF_WIN_VERSIZE)
    {
      for (j = 0; j < m_img_width; j += m_ALF_WIN_HORSIZE)
      {
        const int nHeight = std::min(i + m_ALF_WIN_VERSIZE, m_img_height) - i;
        const int nWidth = std::min(j + m_ALF_WIN_HORSIZE, m_img_width) - j;
        Area blk_cur(j, i, nWidth, nHeight);

        if (m_isGALF)
        {
          xClassifyByGeoLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xFilterBlkGalf(recDst, recSrcExt, blk_cur, filtType, COMPONENT_Y);
        }
        else
        {
          xClassifyByLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xFilterBlkAlf(recDst.get(COMPONENT_Y), recSrcExt.get(COMPONENT_Y), blk_cur, filtType);
        }

      }
    }
  }
  else if (m_useClassifier == 3)
  {
    for (i = 0; i < m_img_height; i += m_ALF_WIN_VERSIZE)
    {
      for (j = 0; j < m_img_width; j += m_ALF_WIN_HORSIZE)
      {
        const int nHeight = std::min(i + m_ALF_WIN_VERSIZE, m_img_height) - i;
        const int nWidth = std::min(j + m_ALF_WIN_HORSIZE, m_img_width) - j;
        Area blk_cur(j, i, nWidth, nHeight);

        if (m_isGALF)
        {
          xClassifyByGeoLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xClassifyByRankingConfBlk(m_imgY_var, recSrcExt.get(COMPONENT_Y), blk_cur, numClasses, selectedBins);
          xFilterBlkGalf(recDst, recSrcExt, blk_cur, filtType, COMPONENT_Y);
        }
        else
        {
          xClassifyByLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xFilterBlkAlf(recDst.get(COMPONENT_Y), recSrcExt.get(COMPONENT_Y), blk_cur, filtType);
        }

      }
    }
  }
  else if (m_useClassifier == 4)
  {
    for (i = 0; i < m_img_height; i += m_ALF_WIN_VERSIZE)
    {
      for (j = 0; j < m_img_width; j += m_ALF_WIN_HORSIZE)
      {
        const int nHeight = std::min(i + m_ALF_WIN_VERSIZE, m_img_height) - i;
        const int nWidth = std::min(j + m_ALF_WIN_HORSIZE, m_img_width) - j;
        Area blk_cur(j, i, nWidth, nHeight);

        if (m_isGALF)
        {
          xClassifyByPC(m_imgY_var, recSrcExt.get(COMPONENT_Y), blk_cur, m_NO_VAR_BINS);
          xFilterBlkGalf(recDst, recSrcExt, blk_cur, filtType, COMPONENT_Y);
        }
        else
        {
          xClassifyByLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
          xFilterBlkAlf(recDst.get(COMPONENT_Y), recSrcExt.get(COMPONENT_Y), blk_cur, filtType);
        }

      }
    }
  }
#else
  for (i = 0; i < m_img_height; i += m_ALF_WIN_VERSIZE)
  {
    for (j = 0; j < m_img_width; j += m_ALF_WIN_HORSIZE)
    {
      const int nHeight = std::min(i + m_ALF_WIN_VERSIZE, m_img_height) - i;
      const int nWidth = std::min(j + m_ALF_WIN_HORSIZE, m_img_width) - j;
      Area blk_cur(j, i, nWidth, nHeight);

      if (m_isGALF)
      {
        xClassifyByGeoLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
        xFilterBlkGalf(recDst, recSrcExt, blk_cur, filtType, COMPONENT_Y);
      }
      else
      {
        xClassifyByLaplacian(m_imgY_var, recSrcExt.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk_cur);
        xFilterBlkAlf(recDst.get(COMPONENT_Y), recSrcExt.get(COMPONENT_Y), blk_cur, filtType);
      }

    }
  }
#endif
}

Void AdaptiveLoopFilter::xCUAdaptive( CodingStructure& cs, const PelUnitBuf &recExtBuf, PelUnitBuf &recBuf, ALFParam* pcAlfParam
#if MCALF
  , Int numClasses, Int selectedBins[]
#endif
  )
{
  const SPS*     sps            = cs.slice->getSPS();
  const unsigned widthInCtus    = cs.pcv->widthInCtus;
  const unsigned maxCUSize      = sps->getMaxCUWidth();
  const unsigned uiAlfCtrlDepth = pcAlfParam->alf_max_depth;
  const unsigned alfCtrlSize    = maxCUSize >> uiAlfCtrlDepth;

  const unsigned imgWidth       = recBuf.get(COMPONENT_Y).width;
  const unsigned imgHeight      = recBuf.get(COMPONENT_Y).height;

  Partitioner* partitioner = PartitionerFactory::get( *cs.slice );

  UInt indx = 0;
  for( UInt uiCTUAddr = 0; uiCTUAddr < cs.pcv->sizeInCtus ; uiCTUAddr++ )
  {
    const unsigned  ctuXPosInCtus         = uiCTUAddr % widthInCtus;
    const unsigned  ctuYPosInCtus         = uiCTUAddr / widthInCtus;

    Position ctuPos( ctuXPosInCtus*maxCUSize, ctuYPosInCtus*maxCUSize) ;
    UnitArea ctuArea(cs.area.chromaFormat, Area( ctuPos.x, ctuPos.y, maxCUSize, maxCUSize ) );

    for( auto &currCU : cs.traverseCUs( ctuArea, CH_L ) )
    {
      const Position&    cuPos   = currCU.lumaPos();
      const Int          qtDepth = currCU.qtDepth;
      const unsigned     qtSize  = maxCUSize >> qtDepth;
      const Position     qtPos0  = Position((cuPos.x / qtSize) * qtSize, (cuPos.y / qtSize) * qtSize);
      const Position   ctrlPos0  = Position(cuPos.x / alfCtrlSize * alfCtrlSize, cuPos.y / alfCtrlSize * alfCtrlSize);

      if ((qtDepth >= uiAlfCtrlDepth && cuPos == ctrlPos0) || ((qtDepth < uiAlfCtrlDepth) && cuPos == qtPos0))
      {
        Area blk;
        if (qtDepth >= uiAlfCtrlDepth)
        {
          blk = Area(cuPos.x, cuPos.y, std::min(alfCtrlSize, imgWidth - cuPos.x), std::min(alfCtrlSize, imgHeight - cuPos.y));
        }
        else
        {
          blk = Area(cuPos.x, cuPos.y, std::min(qtSize, imgWidth - cuPos.x), std::min(qtSize, imgHeight - cuPos.y));
        }

        CHECK(indx >= pcAlfParam->num_alf_cu_flag, "Exceeded the number of num-cu flags");

        if (pcAlfParam->alf_cu_flag[indx] == 1)
        {
          if (m_isGALF)
          {
#if MCALF
            if (m_useClassifier == 0)
            {
              xClassifyByRC(m_imgY_var, recExtBuf.get(COMPONENT_Y), blk, m_NO_VAR_BINS);
            }
            else if (m_useClassifier == 1)
            {
              xClassifyByGeoLaplacian(m_imgY_var, recExtBuf.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk);
              xClassifyByPixelConfBlk(m_imgY_var, recExtBuf.get(COMPONENT_Y), blk, numClasses, selectedBins);
            }
            else if (m_useClassifier == 2)
            {
              xClassifyByGeoLaplacian(m_imgY_var, recExtBuf.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk);
            }
            else if (m_useClassifier == 3)
            {
              xClassifyByGeoLaplacian(m_imgY_var, recExtBuf.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk);
              xClassifyByRankingConfBlk(m_imgY_var, recExtBuf.get(COMPONENT_Y), blk, numClasses, selectedBins);
            }
            else if (m_useClassifier == 4)
            {
              xClassifyByPC(m_imgY_var, recExtBuf.get(COMPONENT_Y), blk, m_NO_VAR_BINS);
            }
#else
            xClassifyByGeoLaplacian(m_imgY_var, recExtBuf.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk);
#endif
            xFilterBlkGalf(recBuf, recExtBuf, blk, pcAlfParam->filterType, COMPONENT_Y);
          }
          else
          {
            xClassifyByLaplacian(m_imgY_var, recExtBuf.get(COMPONENT_Y), m_FILTER_LENGTH / 2, m_VAR_SIZE, blk);
            xFilterBlkAlf(recBuf.get(COMPONENT_Y), recExtBuf.get(COMPONENT_Y), blk, pcAlfParam->filterType);
          }
        }
        else
        {
          recBuf.get(COMPONENT_Y).subBuf(blk.pos(), blk.size()).copyFrom(recExtBuf.get(COMPONENT_Y).subBuf(blk.pos(), blk.size()));
        }
        indx++;
      }
    }
  }

  delete partitioner;
}


// --------------------------------------------------------------------------------------------------------------------
// reconstruction of filter coefficients
// ------------------------------------

//copy filter to m_filterCoeffPrevSelected
Void AdaptiveLoopFilter::getCurrentFilter( Int **filterCoeffSym, ALFParam* pcAlfParam )
{
  int i, k, varInd;
  const int *patternMapTab[3]={ m_pattern5x5Sym_Quart, m_pattern7x7Sym_Quart, m_pattern9x9Sym_Quart  };
#if GALF
  Int ** filterCoeffFinal;
  Int factor = (1 << (AdaptiveLoopFilter::m_NUM_BITS - 1));
  Int iMaxNumCoeff = (m_MAX_SQR_FILT_LENGTH / 2 + 1);

  initMatrix_int(&filterCoeffFinal, m_NO_VAR_BINS, iMaxNumCoeff);

#if !JVET_C0038_NO_PREV_FILTERS
  for (varInd = 0; varInd<m_NO_VAR_BINS; ++varInd)
  {
    memset(m_filterCoeffPrevSelected[varInd], 0, sizeof(int)*m_MAX_SQR_FILT_LENGTH);
    memset(filterCoeffFinal[varInd], 0, sizeof(int)*(iMaxNumCoeff - 1));
    filterCoeffFinal[varInd][(iMaxNumCoeff - 1)] = factor;
  }
#else

  int filterNo;
  for (varInd = 0; varInd<m_NO_VAR_BINS; ++varInd)
  {
    memset(m_filterCoeffPrevSelected[varInd], 0, sizeof(int)*m_MAX_SQR_FILT_LENGTH);
    memset(filterCoeffFinal[varInd], 0, sizeof(int)*iMaxNumCoeff);
  }

  if (pcAlfParam->iPredPattern)
  {
    for (varInd = 0; varInd< m_NO_VAR_BINS; ++varInd)
    {
      if (pcAlfParam->PrevFiltIdx[varInd])
      {
        Int iPrevFiltIdx = pcAlfParam->PrevFiltIdx[varInd] - 1;
        for (i = 0; i < iMaxNumCoeff; i++)
        {
          filterNo = varInd*JVET_C0038_NO_PREV_FILTERS + iPrevFiltIdx;
#if MCALF
          if (pcAlfParam->classifier == 4)
          {
            filterCoeffFinal[varInd][i] = m_ALFfilterCoeffFixedPC[filterNo][i];
          }
          else if (pcAlfParam->classifier == 3)
          {
            filterCoeffFinal[varInd][i] = m_ALFfilterCoeffFixedRCLC[filterNo][i];
          }
          else if (pcAlfParam->classifier == 0)
          {
            filterCoeffFinal[varInd][i] = m_ALFfilterCoeffFixedRC[filterNo][i];
          }
          else
          {
#endif
            filterCoeffFinal[varInd][i] = m_ALFfilterCoeffFixed[filterNo][i];
#if MCALF
          }
#endif
        }
      }
      else
      {
        memset(filterCoeffFinal[varInd], 0, sizeof(Int)*(iMaxNumCoeff - 1));
        filterCoeffFinal[varInd][iMaxNumCoeff - 1] = factor;
      }
    }
  }
  else
  {
    for (varInd = 0; varInd< m_NO_VAR_BINS; ++varInd)
    {
      memset(filterCoeffFinal[varInd], 0, (iMaxNumCoeff - 1)*sizeof(Int));
      filterCoeffFinal[varInd][(iMaxNumCoeff - 1)] = factor;
    }
  }
#endif

  const int *patternMap = patternMapTab[pcAlfParam->filterType];

  for (varInd = 0; varInd<m_NO_VAR_BINS; ++varInd)
  {
    k = 0;
    for (i = 0; i < m_MAX_SQR_FILT_LENGTH; i++)
    {
      if (m_pattern9x9Sym_Quart[i] > 0 && patternMap[i]>0)
      {
        m_filterCoeffPrevSelected[varInd][i] = (filterCoeffFinal[varInd][m_pattern9x9Sym_Quart[i] - 1] + filterCoeffSym[pcAlfParam->filterPattern[varInd]][patternMap[i] - 1]);
        pcAlfParam->alfCoeffLuma[varInd][m_pattern9x9Sym_Quart[i] - 1] = m_filterCoeffPrevSelected[varInd][i];
        k++;
      }
      else if (m_pattern9x9Sym_Quart[i] > 0)
      {
        m_filterCoeffPrevSelected[varInd][i] = filterCoeffFinal[varInd][m_pattern9x9Sym_Quart[i] - 1];
        pcAlfParam->alfCoeffLuma[varInd][m_pattern9x9Sym_Quart[i] - 1] = filterCoeffFinal[varInd][m_pattern9x9Sym_Quart[i] - 1];
      }
      else
      {
        m_filterCoeffPrevSelected[varInd][i] = 0;
      }
    }
  }
  Int iNumCoeffMinus1 = m_MAX_SQT_FILT_SYM_LENGTH - 1, quantCoeffSum = 0;
  const Int * weights = AdaptiveLoopFilter::m_weightsTab[2];

  for (varInd = 0; varInd < m_NO_VAR_BINS; ++varInd)
  {
    quantCoeffSum = 0;
    for (i = 0; i < iNumCoeffMinus1; i++)
    {
      quantCoeffSum += weights[i] * pcAlfParam->alfCoeffLuma[varInd][i];
    }

    pcAlfParam->alfCoeffLuma[varInd][iNumCoeffMinus1] = factor - quantCoeffSum;
    m_filterCoeffPrevSelected[varInd][m_MAX_SQR_FILT_LENGTH - 1] = factor - quantCoeffSum;
  }

  destroyMatrix_int(filterCoeffFinal);
#else
  for (varInd=0; varInd <m_NO_VAR_BINS; ++varInd)
  {
    memset(m_filterCoeffPrevSelected[varInd], 0, sizeof(int)*m_MAX_SQR_FILT_LENGTH);
  }
  const int *patternMap=patternMapTab[pcAlfParam->filterType];
  for (varInd=0; varInd<m_NO_VAR_BINS; ++varInd)
  {
    k=0;
    for (i = 0; i < m_MAX_SQR_FILT_LENGTH; i++)
    {
      if (patternMap[i] > 0)
      {
#if COM16_C806_ALF_TEMPPRED_NUM
        pcAlfParam->alfCoeffLuma[varInd][k] =
#endif
        m_filterCoeffPrevSelected[varInd][i] = filterCoeffSym[pcAlfParam->mapClassToFilter[varInd]][k];
        k++;
      }
      else
      {
        m_filterCoeffPrevSelected[varInd][i]=0;
      }
    }
  }
#endif
}



Void AdaptiveLoopFilter::xDecodeFilter( ALFParam* pcAlfParam )
{
  Int **pfilterCoeffSym = m_filterCoeffSym;
#if COM16_C806_ALF_TEMPPRED_NUM
  Int i;
  if (pcAlfParam->temporalPredFlag)
  {
    for (i = 0; i < m_NO_VAR_BINS; i++)
    {
      memcpy(pfilterCoeffSym[i], &pcAlfParam->alfCoeffLuma[i][0], sizeof(int)*m_MAX_SQR_FILT_LENGTH);
    }

    int k, varInd;
    const int *patternMapTab[3] ={m_pattern9x9Sym_Quart, m_pattern7x7Sym_Quart, m_pattern5x5Sym_Quart};
    {
      for (varInd = 0; varInd<m_NO_VAR_BINS; ++varInd)
      {
        memset(m_filterCoeffPrevSelected[varInd], 0, sizeof(int)*m_MAX_SQR_FILT_LENGTH);
      }
      const int *patternMap = patternMapTab[2-pcAlfParam->filterType];
      for (varInd = 0; varInd<m_NO_VAR_BINS; ++varInd)
      {
        k = 0;
        for (i = 0; i < m_MAX_SQR_FILT_LENGTH; i++)
        {
          if (patternMap[i]>0)
          {
            m_filterCoeffPrevSelected[varInd][i] = pcAlfParam->alfCoeffLuma[varInd][k];
            k++;
          }
          else
          {
            m_filterCoeffPrevSelected[varInd][i] = 0;
          }
        }
      }
    }
  }
  else
  {
#endif
    reconstructFilterCoeffs(pcAlfParam, pfilterCoeffSym);
    //pFilterCoeffSym -> m_filterCoeffPrevSelected
    getCurrentFilter(pfilterCoeffSym, pcAlfParam);
#if COM16_C806_ALF_TEMPPRED_NUM
  }
#endif

  Int *coef;
#if GALF
  Int centerCoef = m_MAX_SQR_FILT_LENGTH - 1;

  for (Int varInd = 0; varInd<m_NO_VAR_BINS; ++varInd)
  {
    coef = m_filterCoeffPrevSelected[varInd];
    for( int i = 0; i < centerCoef; i++)
    {
      m_filterCoeffShort[varInd][i] = (Short)coef[i];
    }
    m_filterCoeffShort[varInd][centerCoef] = (Short)coef[centerCoef];
  }
#else
  Int maxPxlVal = m_nIBDIMax;
  Int maxSampleValue, minSampleValue = 0;
  Int clipRange[2] = { 0, 0 };
  Int sumCoef[2];

  Int numBitsMinus1 = m_NUM_BITS-1;
  Int offset        = (1<<(m_NUM_BITS-2));
  Int lastCoef      = m_MAX_SQR_FILT_LENGTH-1;
  Int centerCoef    = m_MAX_SQR_FILT_LENGTH-2;

  //m_filterCoeffPrevSelected -> m_filterCoeffShort
  for(Int varInd=0; varInd < m_NO_VAR_BINS; ++varInd)
  {
    coef = m_filterCoeffPrevSelected[varInd];
    sumCoef[0] = 0;
    sumCoef[1] = 0;
    for(Int i = 0; i < centerCoef; i++)
    {
      CHECK( coef[i] > 32767 || coef[i] < -32768, "ALF: Coeffs out of bound" );

      m_filterCoeffShort[varInd][i]   = (Short) coef[i];
      sumCoef[ coef[i] > 0 ? 0 : 1 ] += (coef[i] << 1);
    }
    CHECK( coef[centerCoef] > 32767 || coef[centerCoef] < -32768, "ALF: Coeffs out of bound" );
    CHECK( coef[lastCoef]   > 32767 || coef[lastCoef]   < -32768, "ALF: Coeffs out of bound" );

    m_filterCoeffShort[varInd][centerCoef] = (Short)coef[centerCoef];
    m_filterCoeffShort[varInd][lastCoef]   = (Short)coef[lastCoef];

    sumCoef[ coef[centerCoef] > 0 ? 0 : 1 ] += coef[centerCoef];

    maxSampleValue = ( maxPxlVal * sumCoef[0] + coef[lastCoef] + offset ) >> numBitsMinus1;
    minSampleValue = ( maxPxlVal * sumCoef[1] + coef[lastCoef] + offset ) >> numBitsMinus1;

    if( clipRange[0] < maxSampleValue )
    {
      clipRange[0] = maxSampleValue;
    }
    if( clipRange[1] > minSampleValue )
    {
      clipRange[1] = minSampleValue;
    }
  }
#endif

  //TODO move to calling function
  memset( m_imgY_temp[0], 0, sizeof(int)*(m_ALF_WIN_VERSIZE+2*m_VAR_SIZE)*(m_ALF_WIN_HORSIZE+2*m_VAR_SIZE));
  m_imgY_var = m_varImgMethods;
}


Void AdaptiveLoopFilter::reconstructFilterCoeffs( ALFParam* pcAlfParam, int **pfilterCoeffSym )
{
  //todo true only if not forceCoeff0
//  CHECK( pcAlfParam->forceCoeff0, "ForceCoeff0 not implemented yet" )
  pcAlfParam->filters_per_group_diff = pcAlfParam->filters_per_group;

  int i, src, ind;

  // Copy non zero filters to filterCoeffTmp
  for(ind = 0; ind < pcAlfParam->filters_per_group_diff; ++ind)
  {
    for(i = 0; i < pcAlfParam->num_coeff; i++)
    {
      m_filterCoeffTmp[ind][i] = pcAlfParam->coeffmulti[ind][i];
    }
  }

  // Undo prediction
  for(ind = 0; ind < pcAlfParam->filters_per_group_diff; ++ind)
  {
    if( (!pcAlfParam->predMethod) || (ind == 0) )
    {
      memcpy(m_filterCoeffSymTmp[ind],m_filterCoeffTmp[ind],sizeof(int)*pcAlfParam->num_coeff);
    }
    else
    {
      // Prediction
      for(i = 0; i < pcAlfParam->num_coeff; ++i)
      {
        m_filterCoeffSymTmp[ind][i] = (int)(m_filterCoeffTmp[ind][i] + m_filterCoeffSymTmp[ind - 1][i]);
      }
    }
  }

  // Add filters forced to zero
  if(pcAlfParam->forceCoeff0)
  {
#if !FORCE0
    CHECK(pcAlfParam->filters_per_group_diff >= pcAlfParam->filters_per_group, "ALF: Inconsistent for forceCoeff0 ");
#endif
    src = 0;
    for (ind = 0; ind < pcAlfParam->filters_per_group; ++ind)
    {
      if (pcAlfParam->codedVarBins[ind])
      {
        ++src;
      }
    }
#if FORCE0
    pcAlfParam->filters_per_group_diff = src;
    CHECK(pcAlfParam->filters_per_group_diff >= pcAlfParam->filters_per_group, "ALF: Inconsistent for forceCoeff0");
#else
    CHECK(src != pcAlfParam->filters_per_group_diff, "ALF: Inconsistent for forceCoeff0")
#endif
  }
  else
  {
    CHECK(pcAlfParam->filters_per_group != pcAlfParam->filters_per_group_diff, "ALF: Inconsistent for forceCoeff0 disabled");
  }

  for (ind = 0; ind < pcAlfParam->filters_per_group; ++ind)
  {
    memcpy(pfilterCoeffSym[ind], m_filterCoeffSymTmp[ind], sizeof(int)*pcAlfParam->num_coeff);
  }
}

Void AdaptiveLoopFilter::initVarForChroma(ALFParam* pcAlfParam, Bool bUpdatedDCCoef)
{
  Int k, i;
  //initilization for clip operation in subfilterFrame()

  Int filtNo = pcAlfParam->tap_chroma == 9 ? 2 : (pcAlfParam->tap_chroma == 7 ? 1 : 0);
  if (!bUpdatedDCCoef)
  {
    const Int * weights = AdaptiveLoopFilter::m_weightsTab[filtNo];
    Int quantCoeffSum = 0;
    Int factor = (1 << (m_NUM_BITS - 1));
    for (i = 0; i< pcAlfParam->num_coeff_chroma - 1; i++)
    {
      quantCoeffSum += weights[i] * pcAlfParam->coeff_chroma[i];
    }
    pcAlfParam->coeff_chroma[pcAlfParam->num_coeff_chroma - 1] = factor - quantCoeffSum;
  }
  //fill in the ALF coefficients
  const Int* patternMap = m_patternMapTab[filtNo];
  k = 0;
  for (i = 0; i < m_MAX_SQR_FILT_LENGTH; i++)
  {
    if (patternMap[i]>0)
    {
      m_filterCoeffShort[0][i] = pcAlfParam->coeff_chroma[k];
      k++;
    }
    else
    {
      m_filterCoeffShort[0][i] = 0;
    }
  }
}

Void AdaptiveLoopFilter::predictALFCoeffChroma( ALFParam* pAlfParam )
{
  Int i, sum, pred, tap, N;
  const Int* pFiltMag = NULL;

  tap = pAlfParam->tap_chroma;
  switch(tap)
  {
    case 5:
      pFiltMag = m_aiSymmetricMag5x5;
      break;
    case 7:
      pFiltMag = m_aiSymmetricMag7x7;
      break;
    case 9:
      pFiltMag = m_aiSymmetricMag9x9;
      break;
    default:
      THROW( "ALF: Filter not defined");
      break;
  }
  N = (tap*tap+1)>>1;
  sum=0;
  for(i=0; i<N;i++)
  {
    sum+=pFiltMag[i]*pAlfParam->coeff_chroma[i];
  }
  pred=(1<<m_ALF_NUM_BIT_SHIFT)-(sum-pAlfParam->coeff_chroma[N-1]);
  pAlfParam->coeff_chroma[N-1]=pred-pAlfParam->coeff_chroma[N-1];
}

Void AdaptiveLoopFilter::resetALFPredParam(ALFParam *pAlfParam, Bool bIntra)
{
  //reset to 9x9 filter shape
  pAlfParam->filterType = (AlfFilterType)2;
  pAlfParam->tapV = 9;
  pAlfParam->num_coeff = AdaptiveLoopFilter::m_SQR_FILT_LENGTH_9SYM;
}

Void AdaptiveLoopFilter::setNumCUsInFrame(UInt uiNumCUsInFrame)
{
  m_uiNumCUsInFrame = uiNumCUsInFrame;
}





//***********************************
// CLASSIFICATION
//***********************************

Void AdaptiveLoopFilter::xClassify(Pel** classes, const CPelBuf& recSrcBuf, Int pad_size, Int fl)
{
  Area blk(0, 0, recSrcBuf.width, recSrcBuf.height);
#if GALF
  xClassifyByGeoLaplacian(classes, recSrcBuf, pad_size, fl, blk);
#else
  xClassifyByLaplacian(classes, recSrcBuf, pad_size, fl, blk);
#endif
}

static Pel Clip_post(int high, int val)
{
  return (Pel)(((val > high)? high: val));
}

Void AdaptiveLoopFilter::xClassifyByGeoLaplacian(Pel** classes, const CPelBuf& srcLumaBuf, Int pad_size, Int fl, const Area& blk)
{
  Int i, j;

  Int end_height = blk.pos().y + blk.height;
  Int end_width = blk.pos().x + blk.width;

  for (i = blk.pos().y; i < end_height; i += m_ALF_WIN_VERSIZE)
  {
    for (j = blk.pos().x; j < end_width; j += m_ALF_WIN_HORSIZE)
    {
      Int nHeight = std::min(i + m_ALF_WIN_VERSIZE, end_height) - i;
      Int nWidth = std::min(j + m_ALF_WIN_HORSIZE, end_width) - j;

      Area blk_cur;
      blk_cur = Area(j, i, nWidth, nHeight);
      xClassifyByGeoLaplacianBlk(classes, srcLumaBuf, pad_size, fl, blk_cur);
    }
  }
}
Void AdaptiveLoopFilter::xClassifyByGeoLaplacianBlk(Pel** classes, const CPelBuf& srcLumaBuf, Int pad_size, Int fl, const Area& blk)
{
  const Int img_stride = srcLumaBuf.stride;
  const Pel* srcExt = srcLumaBuf.buf;
  Int th[16] = { 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4 };
  fl = 2;
  Int i, j;
#if FULL_NBIT
  Int shift = (11 + m_nBitIncrement + m_nInputBitDepth - 8);
#else
  Int shift = (11 + m_nBitIncrement);
#endif
  Int flplusOne = fl + 1;
  Int fl2plusTwo = 2 * fl + 2;
  Int var_max = 15;

  Int avg_var;
  Int mainDirection, secondaryDirection, dirTempHV, dirTempD;

  Int pixY;
  Int iTempAct = 0;

  Int imgHExtended = blk.height + fl2plusTwo;
  Int imgWExtended = blk.width + fl2plusTwo;
  Int start_height1 = blk.pos().y - flplusOne;

  for (i = 2; i < imgHExtended; i += 2)
  {
    Int yoffset = (i - 1 + start_height1) * img_stride - flplusOne;
    const Pel *p_imgY_pad_down = &srcExt[yoffset - img_stride];
    const Pel *p_imgY_pad = &srcExt[yoffset];
    const Pel *p_imgY_pad_up = &srcExt[yoffset + img_stride];
    const Pel *p_imgY_pad_up2 = &srcExt[yoffset + img_stride * 2];
    for (j = 2; j < imgWExtended; j += 2)
    {
      pixY = j - 1 + blk.pos().x;
      m_imgY_ver[i - 2][j - 2] = abs((p_imgY_pad[pixY] << 1) - p_imgY_pad_down[pixY] - p_imgY_pad_up[pixY]) +
        abs((p_imgY_pad[pixY + 1] << 1) - p_imgY_pad_down[pixY + 1] - p_imgY_pad_up[pixY + 1]) +
        abs((p_imgY_pad_up[pixY] << 1) - p_imgY_pad[pixY] - p_imgY_pad_up2[pixY]) +
        abs((p_imgY_pad_up[pixY + 1] << 1) - p_imgY_pad[pixY + 1] - p_imgY_pad_up2[pixY + 1]);

      m_imgY_hor[i - 2][j - 2] = abs((p_imgY_pad[pixY] << 1) - p_imgY_pad[pixY + 1] - p_imgY_pad[pixY - 1]) +
        abs((p_imgY_pad[pixY + 1] << 1) - p_imgY_pad[pixY + 2] - p_imgY_pad[pixY]) +
        abs((p_imgY_pad_up[pixY] << 1) - p_imgY_pad_up[pixY + 1] - p_imgY_pad_up[pixY - 1]) +
        abs((p_imgY_pad_up[pixY + 1] << 1) - p_imgY_pad_up[pixY + 2] - p_imgY_pad_up[pixY]);
      m_imgY_dig0[i - 2][j - 2] = abs((p_imgY_pad[pixY] << 1) - p_imgY_pad_down[pixY - 1] - p_imgY_pad_up[pixY + 1]) +
        abs((p_imgY_pad[pixY + 1] << 1) - p_imgY_pad_down[pixY] - p_imgY_pad_up[pixY + 2]) +
        abs((p_imgY_pad_up[pixY] << 1) - p_imgY_pad[pixY - 1] - p_imgY_pad_up2[pixY + 1]) +
        abs((p_imgY_pad_up[pixY + 1] << 1) - p_imgY_pad[pixY] - p_imgY_pad_up2[pixY + 2]);

      m_imgY_dig1[i - 2][j - 2] = abs((p_imgY_pad[pixY] << 1) - p_imgY_pad_up[pixY - 1] - p_imgY_pad_down[pixY + 1]) +
        abs((p_imgY_pad[pixY + 1] << 1) - p_imgY_pad_up[pixY] - p_imgY_pad_down[pixY + 2]) +
        abs((p_imgY_pad_up[pixY] << 1) - p_imgY_pad_up2[pixY - 1] - p_imgY_pad[pixY + 1]) +
        abs((p_imgY_pad_up[pixY + 1] << 1) - p_imgY_pad_up2[pixY] - p_imgY_pad[pixY + 2]);
      if (j > 4)
      {
        m_imgY_ver[i - 2][j - 6] = m_imgY_ver[i - 2][j - 6] + m_imgY_ver[i - 2][j - 4] + m_imgY_ver[i - 2][j - 2];
        m_imgY_hor[i - 2][j - 6] = m_imgY_hor[i - 2][j - 6] + m_imgY_hor[i - 2][j - 4] + m_imgY_hor[i - 2][j - 2];
        m_imgY_dig0[i - 2][j - 6] = m_imgY_dig0[i - 2][j - 6] + m_imgY_dig0[i - 2][j - 4] + m_imgY_dig0[i - 2][j - 2];
        m_imgY_dig1[i - 2][j - 6] = m_imgY_dig1[i - 2][j - 6] + m_imgY_dig1[i - 2][j - 4] + m_imgY_dig1[i - 2][j - 2];
      }
    }
  }

  for (i = 0; i < blk.height; i += 2)
  {
    for (j = 0; j < blk.width; j += 2)
    {
      Int sum_V = m_imgY_ver[i][j] + m_imgY_ver[i + 2][j] + m_imgY_ver[i + 4][j];
      Int sum_H = m_imgY_hor[i][j] + m_imgY_hor[i + 2][j] + m_imgY_hor[i + 4][j];
      Int sum_D0 = m_imgY_dig0[i][j] + m_imgY_dig0[i + 2][j] + m_imgY_dig0[i + 4][j];
      Int sum_D1 = m_imgY_dig1[i][j] + m_imgY_dig1[i + 2][j] + m_imgY_dig1[i + 4][j];
      iTempAct = sum_V + sum_H;
      avg_var = (Pel)Clip3<Int>(0, var_max, (iTempAct * 24) >> (shift));
      avg_var = th[avg_var];
      Int HV_high, HV_low;
      Int D_high, D_low;
      Int HV_D_high, HV_D_low;
      if (sum_V>sum_H)
      {
        HV_high = sum_V;
        HV_low = sum_H;
        dirTempHV = 1;
      }
      else
      {
        HV_high = sum_H;
        HV_low = sum_V;
        dirTempHV = 3;
      }
      if (sum_D0 > sum_D1)
      {
        D_high = sum_D0;
        D_low = sum_D1;
        dirTempD = 0;
      }
      else
      {
        D_high = sum_D1;
        D_low = sum_D0;
        dirTempD = 2;
      }
      if (D_high*HV_low > HV_high*D_low)
      {
        HV_D_high = D_high;
        HV_D_low = D_low;
        mainDirection = dirTempD;
        secondaryDirection = dirTempHV;
      }
      else
      {
        HV_D_high = HV_high;
        HV_D_low = HV_low;
        mainDirection = dirTempHV;
        secondaryDirection = dirTempD;
      }
      avg_var += ((2 * (mainDirection)+(secondaryDirection) / 2) << NO_VALS_LAGR_SHIFT);

      if (HV_D_high > 2 * HV_D_low)
      {
        avg_var += (8 << NO_VALS_LAGR_SHIFT);
      }
      if (HV_D_high * 2 > 9 * HV_D_low)
      {
        avg_var += (8 << NO_VALS_LAGR_SHIFT);
      }
      Int yOffset = (i + blk.pos().y);
      Int xOffset = (j + blk.pos().x);

      classes[yOffset][xOffset] = classes[yOffset][xOffset + 1] =
        classes[yOffset + 1][xOffset] = classes[yOffset + 1][xOffset + 1] = avg_var;
    }
  }
}

#if MCALF
Void AdaptiveLoopFilter::xClassifyByPixelConfBlk(Pel** classes, const CPelBuf& recUnitBuf, const Area& blk, Int numClasses, Int selectedBins[])
{
  Int i, j;
  const Pel* lumaRec = recUnitBuf.buf;
  const int lStrideRec = recUnitBuf.stride;
  const Pel* recIt = lumaRec;
  
  Int maxNumClasses = numClasses;
  Int preClassBinSize = 1024 / maxNumClasses + 1;

  for (i = 0; i < blk.height; i++)
  {
    Int yOffset = (i + blk.pos().y);
    for (j = 0; j < blk.width; j++)
    {
      Int xOffset = (j + blk.pos().x);
      Int x = yOffset * lStrideRec + xOffset;
      const Pel recVal = recIt[x];
      double pxlVal = (double)recVal;
      const Pel binIdxOfPxl = (Pel)(pxlVal / preClassBinSize);
      if (selectedBins[binIdxOfPxl] != 0)
      {
        classes[yOffset][xOffset] = -1 * selectedBins[binIdxOfPxl];
        CHECK(classes[yOffset][xOffset] != -1 && classes[yOffset][xOffset] != -2, "classes not in range");
      }
    }
  }
}
Void AdaptiveLoopFilter::xClassifyByPC(Pel** classes, const CPelBuf& srcLumaBuf, const Area& blk, Int numClasses)
{
  Int i, j;
  Int end_height = blk.pos().y + blk.height;
  Int end_width = blk.pos().x + blk.width;

  for (i = blk.pos().y; i < end_height; i += m_ALF_WIN_VERSIZE)
  {
    for (j = blk.pos().x; j < end_width; j += m_ALF_WIN_HORSIZE)
    {
      Int nHeight = std::min(i + m_ALF_WIN_VERSIZE, end_height) - i;
      Int nWidth = std::min(j + m_ALF_WIN_HORSIZE, end_width) - j;
      Area blk_cur;
      blk_cur = Area(j, i, nWidth, nHeight);
      xClassifyByPCBlk(classes, srcLumaBuf, blk_cur, numClasses);
    }
  }
}
Void AdaptiveLoopFilter::xClassifyByPCBlk(Pel** classes, const CPelBuf& srcLumaBuf, const Area& blk, Int numClasses)
{
  const Int img_stride = srcLumaBuf.stride;
  const Pel* srcExt = srcLumaBuf.buf;
  Int i, j;
  Double stepsize_10bit = (double)(10240 / numClasses + 1) / 10;
  Double div = (m_nBitIncrement == 0) ? 10.3 : stepsize_10bit;

  for (i = 0; i < blk.height; i += 1)
  {
    for (j = 0; j < blk.width; j += 1)
    {
      Int yOffset = (i + blk.pos().y);
      Int xOffset = (j + blk.pos().x);
      classes[yOffset][xOffset] = (Pel)(srcExt[yOffset * img_stride + xOffset] / div);
      CHECK(classes[yOffset][xOffset] < 0 || classes[yOffset][xOffset] > (numClasses - 1), "classes range from 0 to number of classes - 1!");
    }
  }
}
Void AdaptiveLoopFilter::xClassifyByRankingConfBlk(Pel** classes, const CPelBuf& recUnitBuf, const Area& blk, Int numClasses, Int selectedBins[])
{
  const Pel* lumaRec = recUnitBuf.buf;
  const int lStrideRec = recUnitBuf.stride;
  const Pel* RrecIt = lumaRec;
  const int lWidth = recUnitBuf.width - 1;
  const int lHeight = recUnitBuf.height - 1;

  for (int ii = 0; ii < blk.height; ii++)
  {
    Int y = (ii + blk.pos().y);
    for (int jj = 0; jj < blk.width; jj++)
    {
      Int x = (jj + blk.pos().x);
      Int x_left = std::max(x - 1, 0);
      Int x_right = std::min(x + 1, lWidth);
      Int y_top = std::max(y - 1, 0);
      Int y_bottom = std::min(y + 1, lHeight);
      Pel recVal = RrecIt[x + y*lStrideRec];
      Pel recVar = 4 * recVal - (RrecIt[x_left + y*lStrideRec] + RrecIt[x_right + y*lStrideRec] + RrecIt[x + y_top*lStrideRec] + RrecIt[x + y_bottom*lStrideRec]);
      if (abs(recVar) >= 10) {
        Pel binIdxOfPxl = (((recVal >= RrecIt[x_right + y*lStrideRec]) + (recVal >= RrecIt[x_left + y*lStrideRec]) + (recVal >= RrecIt[x + y_top*lStrideRec]) +
          (recVal >= RrecIt[x + y_bottom*lStrideRec]) + (recVal >= RrecIt[x_right + y_top*lStrideRec]) + (recVal >= RrecIt[x_right + y_bottom*lStrideRec]) +
          (recVal >= RrecIt[x_left + y_top*lStrideRec]) + (recVal >= RrecIt[x_left + y_bottom*lStrideRec])));
        if (selectedBins[binIdxOfPxl] != 0)
        {
          classes[y][x] = -selectedBins[binIdxOfPxl];
          //CHECK(classes[y][x] != -1 && classes[y][x] != -2, "classes not in range");
        }
      }
    }
  }
}

Void AdaptiveLoopFilter::xClassifyByRC(Pel** classes, const CPelBuf& srcLumaBuf, const Area& blk, Int numClasses, bool classReduction)
{
  Int i, j;
  Int end_height = blk.pos().y + blk.height;
  Int end_width = blk.pos().x + blk.width;

  for (i = blk.pos().y; i < end_height; i += m_ALF_WIN_VERSIZE)
  {
    for (j = blk.pos().x; j < end_width; j += m_ALF_WIN_HORSIZE)
    {
      Int nHeight = std::min(i + m_ALF_WIN_VERSIZE, end_height) - i;
      Int nWidth = std::min(j + m_ALF_WIN_HORSIZE, end_width) - j;
      Area blk_cur;
      blk_cur = Area(j, i, nWidth, nHeight);
      xClassifyByRCBlk(classes, srcLumaBuf, blk_cur, numClasses, classReduction);
    }
  }
}
Void AdaptiveLoopFilter::xClassifyByRCBlk(Pel** classes, const CPelBuf& srcLumaBuf, const Area& blk, Int numClasses, bool classReduction)
{
  Int i, j;
  const Pel* lumaRec = srcLumaBuf.buf;
  const int lStrideRec = srcLumaBuf.stride;
  const Pel* RrecIt = lumaRec;
  const int lWidth = srcLumaBuf.width - 1;
  const int lHeight = srcLumaBuf.height - 1;

  for (i = 0; i < blk.height; i += 1)
  {
    for (j = 0; j < blk.width; j += 1)
    {
      Int x = (j + blk.pos().x);
      Int y = (i + blk.pos().y);
      Int x_left = std::max(x - 1, 0);
      Int x_right = std::min(x + 1, lWidth);
      Int y_top = std::max(y - 1, 0);
      Int y_bottom = std::min(y + 1, lHeight);
      Pel recVal = RrecIt[x + y*lStrideRec];
      Pel binIdxOfPxl = (((recVal >= RrecIt[x_right + y*lStrideRec]) + (recVal >= RrecIt[x_left + y*lStrideRec]) + (recVal >= RrecIt[x + y_top*lStrideRec]) +
        (recVal >= RrecIt[x + y_bottom*lStrideRec]) + (recVal >= RrecIt[x_right + y_top*lStrideRec]) + (recVal >= RrecIt[x_right + y_bottom*lStrideRec]) +
        (recVal >= RrecIt[x_left + y_top*lStrideRec]) + (recVal >= RrecIt[x_left + y_bottom*lStrideRec])));

      if (recVal <= 341)
        classes[y][x] = binIdxOfPxl;
      else if (recVal > 341 && recVal <= 682)
        classes[y][x] = binIdxOfPxl + 9;
      else
      {
        if (classReduction)
        {
          classes[y][x] = (binIdxOfPxl + 18) < 25 ? (binIdxOfPxl + 18) : 24;
        }
        else
        {
          classes[y][x] = binIdxOfPxl + 18;
        }
      }
      if (classReduction)
        CHECK(classes[y][x] > 24, " classes running from 0 to 24! ");
    }
  }
}

#endif

Int AdaptiveLoopFilter::selectTransposeVarInd(Int varInd, Int *transpose)
{
  int aTransTable[8] ={0, 1, 0, 2, 2, 3, 1, 3};
  int direction = varInd >> NO_VALS_LAGR_SHIFT;
  int varIndMod = varInd&((1 << NO_VALS_LAGR_SHIFT) - 1);
  int dirRatio = direction >> 3;

  direction = direction & 0x07;
  *transpose = aTransTable[direction];

  if (dirRatio)
  {
    varIndMod += ((direction & 0x02) + dirRatio)*NO_VALS_LAGR;
  }
  return(varIndMod);
}

Void AdaptiveLoopFilter::xClassifyByLaplacian(Pel** classes, const CPelBuf& srcLumaBuf, Int pad_size, Int fl, const Area& blk)
{
  Int i, j;

  Int end_height = blk.pos().y + blk.height;
  Int end_width = blk.pos().x + blk.width;
  for (i = blk.pos().y; i < end_height; i += m_ALF_WIN_VERSIZE)
  {
    for (j = blk.pos().x; j < end_width; j += m_ALF_WIN_HORSIZE)
    {
      Int nHeight = std::min(i + m_ALF_WIN_VERSIZE, end_height) - i;
      Int nWidth = std::min(j + m_ALF_WIN_HORSIZE, end_width) - j;
      Area blk_cur;
      blk_cur = Area(j, i, nWidth, nHeight);
      xClassifyByLaplacianBlk(classes, srcLumaBuf, pad_size, fl, blk_cur);
    }
  }
}

Void AdaptiveLoopFilter::xClassifyByLaplacianBlk(Pel** classes, const CPelBuf& srcLumaBuf, Int pad_size, Int fl, const Area& blk)
{
  const Int img_stride = srcLumaBuf.stride;
  const Pel* srcExt = srcLumaBuf.buf;

  static const Int shift_h = (Int)(log((double)m_ALF_VAR_SIZE_H) / log(2.0));
  static const Int shift_w = (Int)(log((double)m_ALF_VAR_SIZE_W) / log(2.0));

  Int i, j;
  Int *p_imgY_temp;
#if FULL_NBIT
  Int shift = (11 + m_nBitIncrement + m_nInputBitDepth - 8);
#else
  Int shift = (11 + m_nBitIncrement);
#endif
  Int fl2plusOne = (m_VAR_SIZE << 1) + 1; //3
  Int pad_offset = pad_size - fl - 1;
#if MCALF
  Int var_max = (m_NO_VAR_BINS - 2) - 1;
#else
  Int var_max = m_NO_VAR_BINS - 1;
#endif
  Int mult_fact_int_tab[4] = { 1,114,41,21 };
  Int mult_fact_int = mult_fact_int_tab[m_VAR_SIZE];
  Int avg_var;
  Int vertical, horizontal;
  Int direction;
#if MCALF
  Int step1 = (m_NO_VAR_BINS - 2) / 3 - 1;
#else
  Int step1 = m_NO_VAR_BINS / 3 - 1;
#endif
  Int th[m_NO_VAR_BINS] = { 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4 };
  Int pixY;

  for (i = 1; i < blk.height + fl2plusOne; i++)
  {
    Int yoffset = (pad_offset + i + blk.pos().y - pad_size) * img_stride + pad_offset - pad_size;
    const Pel *p_imgY_pad = &srcExt[yoffset];
    const Pel *p_imgY_pad_up = &srcExt[yoffset + img_stride];
    const Pel *p_imgY_pad_down = &srcExt[yoffset - img_stride];
    p_imgY_temp = (Int*)&m_imgY_temp[i - 1][0];
    for (j = 1; j < blk.width + fl2plusOne; j++)
    {
      pixY = j + blk.pos().x;
      vertical = abs((p_imgY_pad[pixY] << 1) - p_imgY_pad_down[pixY] - p_imgY_pad_up[pixY]);
      horizontal = abs((p_imgY_pad[pixY] << 1) - p_imgY_pad[pixY + 1] - p_imgY_pad[pixY - 1]);
      m_imgY_ver[i - 1][j - 1] = vertical;
      m_imgY_hor[i - 1][j - 1] = horizontal;
      *(p_imgY_temp++) = vertical + horizontal;
    }

    for (j = 1; j < blk.width + fl2plusOne; j = j + 4)
    {
      m_imgY_temp[i - 1][j] = (m_imgY_temp[i - 1][j - 1] + m_imgY_temp[i - 1][j + 4])
        + ((m_imgY_temp[i - 1][j] + m_imgY_temp[i - 1][j + 3]) << 1)
        + ((m_imgY_temp[i - 1][j + 1] + m_imgY_temp[i - 1][j + 2]) * 3);
      m_imgY_ver[i - 1][j] = m_imgY_ver[i - 1][j] + m_imgY_ver[i - 1][j + 1] + m_imgY_ver[i - 1][j + 2] + m_imgY_ver[i - 1][j + 3];
      m_imgY_hor[i - 1][j] = m_imgY_hor[i - 1][j] + m_imgY_hor[i - 1][j + 1] + m_imgY_hor[i - 1][j + 2] + m_imgY_hor[i - 1][j + 3];
    }
  }

  for (i = 1; i < blk.height + 1; i = i + 4)
  {
    for (j = 1; j < blk.width + 1; j = j + 4)
    {
      m_imgY_temp[i - 1][j - 1] = (m_imgY_temp[i - 1][j] + m_imgY_temp[i + 4][j])
        + ((m_imgY_temp[i][j] + m_imgY_temp[i + 3][j]) << 1)
        + ((m_imgY_temp[i + 1][j] + m_imgY_temp[i + 2][j]) * 3);

      m_imgY_ver[i - 1][j - 1] = m_imgY_ver[i][j] + m_imgY_ver[i + 1][j] + m_imgY_ver[i + 2][j] + m_imgY_ver[i + 3][j];
      m_imgY_hor[i - 1][j - 1] = m_imgY_hor[i][j] + m_imgY_hor[i + 1][j] + m_imgY_hor[i + 2][j] + m_imgY_hor[i + 3][j];
      avg_var = m_imgY_temp[i - 1][j - 1] >> (shift_h + shift_w);
      avg_var = (Pel)Clip_post(var_max, (avg_var * mult_fact_int) >> shift);
      avg_var = th[avg_var];

      direction = 0;
      if (m_imgY_ver[i - 1][j - 1] > 2 * m_imgY_hor[i - 1][j - 1]) direction = 1; //vertical
      if (m_imgY_hor[i - 1][j - 1] > 2 * m_imgY_ver[i - 1][j - 1]) direction = 2; //horizontal

      avg_var = Clip_post(step1, (Int)avg_var) + (step1 + 1)*direction;
      classes[(i + blk.pos().y - 1) >> shift_h][(j + blk.pos().x - 1) >> shift_w] = avg_var;
    }
  }
}

Void AdaptiveLoopFilter::xFilterBlkGalf(PelUnitBuf &recDst, const CPelUnitBuf& recSrcExt, const Area& blk, AlfFilterType filtType, const ComponentID compId)
{
  const bool bChroma = compId != COMPONENT_Y;
  if( bChroma )
  {
    CHECK(filtType != 0, "Chroma needs to have filtType == 0");
  }
  filtType = bChroma ? ALF_FILTER_SYM_5 : ALF_FILTER_SYM_9;

  const CPelBuf srcLumaBuf = recSrcExt.get(compId);
         PelBuf dstLumaBuf = recDst.get(compId);

  const Int srcStride = srcLumaBuf.stride;
  const Int dstStride = dstLumaBuf.stride;

  const Pel* srcExt = srcLumaBuf.buf;
        Pel* dst   = dstLumaBuf.buf;

  Int i, j, pixelInt;
  Pel *pImgYVar;

  const Pel *pImgYPad, *pImgYPad1,*pImgYPad2,*pImgYPad3,*pImgYPad4,*pImgYPad5,*pImgYPad6;

  Short *coef = m_filterCoeffShort[0];
  const Pel *pImg0, *pImg1, *pImg2, *pImg3, *pImg4, *pImg5, *pImg6;
  Pel *pImgYRec;
  const Pel *pImgYPad7, *pImgYPad8;

  Int numBitsMinus1= m_NUM_BITS-1;
  Int offset = (1<<(m_NUM_BITS-2));

  Int startHeight = blk.y;
  Int endHeight   = blk.y + blk.height;
  Int startWidth  = blk.x;
  Int endWidth    = blk.x + blk.width;

  Pel* imgYRecPost = dst;
  imgYRecPost += startHeight * dstStride;

  if (bChroma)
  {
    pImgYVar = NULL;
  }
  Int transpose = 0;

  const ClpRng& clpRng = m_clpRngs.comp[compId];

  const Pel* imgYRec = srcExt;
  switch( filtType )
  {
  case ALF_FILTER_SYM_5:
#if MCALF 
    if (m_useClassifier == 0)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }
        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod = *(pImgYVar++);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;

          if (transpose == 1)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 1)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }
        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            if (varInd == -1 || varInd == -2)
            {
              varIndMod = m_NO_VAR_BINS + varInd;
              transpose = 0;
            }
            else
            {
              varIndMod = selectTransposeVarInd(varInd, &transpose);
            }
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;

          if (transpose == 1)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 2)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }
        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            varIndMod = selectTransposeVarInd(varInd, &transpose);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;

          if (transpose == 1)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 3)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }
        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            if (varInd == -1 || varInd == -2)
            {
              varIndMod = m_NO_VAR_BINS + varInd;
              transpose = 0;
            }
            else
            {
              varIndMod = selectTransposeVarInd(varInd, &transpose);
            }
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;

          if (transpose == 1)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
      }
        imgYRecPost += dstStride;
    }
  }
    else if (m_useClassifier == 4)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }
        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            varIndMod = *(pImgYVar++);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;

          if (transpose == 1)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

            pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
            pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
#else
    for (i = startHeight; i < endHeight; i++)
    {
      if (!bChroma)
      {
        pImgYVar = m_imgY_var[i] + startWidth;
      }
      pImgYPad = imgYRec + i   *srcStride;
      pImgYPad1 = imgYRec + (i + 1)*srcStride;
      pImgYPad2 = imgYRec + (i - 1)*srcStride;
      pImgYPad3 = imgYRec + (i + 2)*srcStride;
      pImgYPad4 = imgYRec + (i - 2)*srcStride;

      pImgYRec = imgYRecPost + startWidth;

      for (j = startWidth; j < endWidth; j++)
      {
        if (!bChroma)
        {
          Int varIndMod = selectTransposeVarInd(*(pImgYVar++), &transpose);
          coef = m_filterCoeffShort[varIndMod];
        }
        pixelInt = 0;

        pImg0 = pImgYPad + j;
        pImg1 = pImgYPad1 + j;
        pImg2 = pImgYPad2 + j;
        pImg3 = pImgYPad3 + j;
        pImg4 = pImgYPad4 + j;

        if (transpose == 1)
        {
          pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

          pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

          pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
          pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }
        else if (transpose == 3)
        {
          pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);

          pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

          pixelInt += coef[22] * (pImg0[-2] + pImg0[+2]);
          pixelInt += coef[31] * (pImg0[-1] + pImg0[+1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }
        else if (transpose == 2)
        {
          pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

          pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);

          pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
          pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }
        else
        {
          pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);

          pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);

          pixelInt += coef[38] * (pImg0[-2] + pImg0[+2]);
          pixelInt += coef[39] * (pImg0[-1] + pImg0[+1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }

        pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
        *(pImgYRec++) = ClipPel(pixelInt, clpRng);
      }
      imgYRecPost += dstStride;
    }
#endif
    break;

  case ALF_FILTER_SYM_7:
#if MCALF 
    if (m_useClassifier == 0)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i    *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            varIndMod = *(pImgYVar++);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[29] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[21] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[33] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[23] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[23] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[33] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[21] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[29] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 1)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i    *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            if (varInd == -1 || varInd == -2)
            {
              varIndMod = m_NO_VAR_BINS + varInd;
              transpose = 0;
            }
            else
            {
              varIndMod = selectTransposeVarInd(varInd, &transpose);
            }
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[29] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[21] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[33] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[23] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[23] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[33] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[21] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[29] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 2)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i    *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            varIndMod = selectTransposeVarInd(varInd, &transpose);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[29] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[21] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[33] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[23] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[23] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[33] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[21] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[29] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 3)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i    *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            if (varInd == -1 || varInd == -2)
            {
              varIndMod = m_NO_VAR_BINS + varInd;
              transpose = 0;
            }
            else
            {
              varIndMod = selectTransposeVarInd(varInd, &transpose);
            }
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[29] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[21] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[33] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[23] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[23] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[33] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[21] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[29] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 4)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i    *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;

        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            varIndMod = *(pImgYVar++);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[29] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[21] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[33] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[23] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[23] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[33] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }
          else
          {
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

            pixelInt += coef[21] * (pImg3[+1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);

            pixelInt += coef[29] * (pImg1[+2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);

            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[+0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
#else
    for (i = startHeight; i < endHeight; i++)
    {
      if (!bChroma)
      {
        pImgYVar = m_imgY_var[i] + startWidth;
      }

      pImgYPad = imgYRec + i    *srcStride;
      pImgYPad1 = imgYRec + (i + 1)*srcStride;
      pImgYPad2 = imgYRec + (i - 1)*srcStride;
      pImgYPad3 = imgYRec + (i + 2)*srcStride;
      pImgYPad4 = imgYRec + (i - 2)*srcStride;
      pImgYPad5 = imgYRec + (i + 3)*srcStride;
      pImgYPad6 = imgYRec + (i - 3)*srcStride;

      pImgYRec = imgYRecPost + startWidth;

      for (j = startWidth; j < endWidth; j++)
      {
        if (!bChroma)
        {
          Int varIndMod = selectTransposeVarInd(*(pImgYVar++), &transpose);
          coef = m_filterCoeffShort[varIndMod];
        }
        pixelInt = 0;

        pImg0 = pImgYPad + j;
        pImg1 = pImgYPad1 + j;
        pImg2 = pImgYPad2 + j;
        pImg3 = pImgYPad3 + j;
        pImg4 = pImgYPad4 + j;
        pImg5 = pImgYPad5 + j;
        pImg6 = pImgYPad6 + j;

        if (transpose == 1)
        {
          pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

          pixelInt += coef[29] * (pImg3[+1] + pImg4[-1]);
          pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
          pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);

          pixelInt += coef[21] * (pImg1[+2] + pImg2[-2]);
          pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);

          pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }
        else if (transpose == 3)
        {
          pixelInt += coef[37] * (pImg5[0] + pImg6[0]);

          pixelInt += coef[33] * (pImg3[+1] + pImg4[-1]);
          pixelInt += coef[38] * (pImg3[+0] + pImg4[+0]);
          pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);

          pixelInt += coef[23] * (pImg1[+2] + pImg2[-2]);
          pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[39] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);

          pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }
        else if (transpose == 2)
        {
          pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

          pixelInt += coef[23] * (pImg3[+1] + pImg4[-1]);
          pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
          pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);

          pixelInt += coef[33] * (pImg1[+2] + pImg2[-2]);
          pixelInt += coef[32] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);

          pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }
        else
        {
          pixelInt += coef[13] * (pImg5[0] + pImg6[0]);

          pixelInt += coef[21] * (pImg3[+1] + pImg4[-1]);
          pixelInt += coef[22] * (pImg3[+0] + pImg4[+0]);
          pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);

          pixelInt += coef[29] * (pImg1[+2] + pImg2[-2]);
          pixelInt += coef[30] * (pImg1[+1] + pImg2[-1]);
          pixelInt += coef[31] * (pImg1[+0] + pImg2[+0]);
          pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);

          pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[+0]);
        }

        pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
        *(pImgYRec++) = ClipPel(pixelInt, clpRng);
      }
      imgYRecPost += dstStride;
    }
#endif
    break;

  case ALF_FILTER_SYM_9:
#if MCALF 
    if (m_useClassifier == 0)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;
        pImgYPad7 = imgYRec + (i + 4)*srcStride;
        pImgYPad8 = imgYRec + (i - 4)*srcStride;
        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            varIndMod = *(pImgYVar++);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[28] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[34] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[29] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[12] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[21] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[14] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[34] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[28] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[33] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[14] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[23] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[12] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[14] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[12] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[23] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[34] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[33] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[28] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[12] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[14] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[21] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[28] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[29] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[34] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 1)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;
        pImgYPad7 = imgYRec + (i + 4)*srcStride;
        pImgYPad8 = imgYRec + (i - 4)*srcStride;
        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            if (varInd == -1 || varInd == -2)
            {
              varIndMod = m_NO_VAR_BINS + varInd;
              transpose = 0;
            }
            else
            {
              varIndMod = selectTransposeVarInd(varInd, &transpose);
            }
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[28] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[34] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[29] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[12] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[21] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[14] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[34] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[28] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[33] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[14] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[23] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[12] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[14] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[12] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[23] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[34] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[33] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[28] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[12] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[14] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[21] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[28] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[29] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[34] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 2)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;
        pImgYPad7 = imgYRec + (i + 4)*srcStride;
        pImgYPad8 = imgYRec + (i - 4)*srcStride;
        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            varIndMod = selectTransposeVarInd(varInd, &transpose);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[28] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[34] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[29] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[12] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[21] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[14] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[34] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[28] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[33] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[14] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[23] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[12] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[14] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[12] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[23] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[34] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[33] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[28] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[12] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[14] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[21] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[28] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[29] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[34] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 3)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;
        pImgYPad7 = imgYRec + (i + 4)*srcStride;
        pImgYPad8 = imgYRec + (i - 4)*srcStride;
        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            Int varInd = *(pImgYVar++);
            if (varInd == -1 || varInd == -2)
            {
              varIndMod = m_NO_VAR_BINS + varInd;
              transpose = 0;
            }
            else
            {
              varIndMod = selectTransposeVarInd(varInd, &transpose);
            }
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[28] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[34] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[29] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[12] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[21] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[14] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[34] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[28] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[33] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[14] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[23] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[12] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[14] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[12] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[23] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[34] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[33] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[28] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[12] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[14] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[21] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[28] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[29] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[34] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
    else if (m_useClassifier == 4)
    {
      for (i = startHeight; i < endHeight; i++)
      {
        if (!bChroma)
        {
          pImgYVar = m_imgY_var[i] + startWidth;
        }

        pImgYPad = imgYRec + i   *srcStride;
        pImgYPad1 = imgYRec + (i + 1)*srcStride;
        pImgYPad2 = imgYRec + (i - 1)*srcStride;
        pImgYPad3 = imgYRec + (i + 2)*srcStride;
        pImgYPad4 = imgYRec + (i - 2)*srcStride;
        pImgYPad5 = imgYRec + (i + 3)*srcStride;
        pImgYPad6 = imgYRec + (i - 3)*srcStride;
        pImgYPad7 = imgYRec + (i + 4)*srcStride;
        pImgYPad8 = imgYRec + (i - 4)*srcStride;
        pImgYRec = imgYRecPost + startWidth;

        for (j = startWidth; j < endWidth; j++)
        {
          if (!bChroma)
          {
            Int varIndMod;
            varIndMod = *(pImgYVar++);
            coef = m_filterCoeffShort[varIndMod];
          }
          pixelInt = 0;

          pImg0 = pImgYPad + j;
          pImg1 = pImgYPad1 + j;
          pImg2 = pImgYPad2 + j;
          pImg3 = pImgYPad3 + j;
          pImg4 = pImgYPad4 + j;
          pImg5 = pImgYPad5 + j;
          pImg6 = pImgYPad6 + j;

          if (transpose == 1)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[28] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[34] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[29] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[12] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[21] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[14] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 3)
          {
            pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[34] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[28] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[33] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[14] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[23] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[12] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else if (transpose == 2)
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[14] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[12] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[23] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[34] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[33] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[28] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }
          else
          {
            pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
            pixelInt += coef[12] * (pImg5[1] + pImg6[-1]);
            pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
            pixelInt += coef[14] * (pImg5[-1] + pImg6[1]);

            pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
            pixelInt += coef[21] * (pImg3[1] + pImg4[-1]);
            pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
            pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);
            pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

            pixelInt += coef[28] * (pImg1[3] + pImg2[-3]);
            pixelInt += coef[29] * (pImg1[2] + pImg2[-2]);
            pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
            pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
            pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
            pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);
            pixelInt += coef[34] * (pImg1[-3] + pImg2[+3]);

            pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
            pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
            pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
            pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
            pixelInt += coef[40] * (pImg0[0]);
          }

          pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
          *(pImgYRec++) = ClipPel(pixelInt, clpRng);
        }
        imgYRecPost += dstStride;
      }
    }
#else
    for (i = startHeight; i < endHeight; i++)
    {
      if (!bChroma)
      {
        pImgYVar = m_imgY_var[i] + startWidth;
      }

      pImgYPad = imgYRec + i   *srcStride;
      pImgYPad1 = imgYRec + (i + 1)*srcStride;
      pImgYPad2 = imgYRec + (i - 1)*srcStride;
      pImgYPad3 = imgYRec + (i + 2)*srcStride;
      pImgYPad4 = imgYRec + (i - 2)*srcStride;
      pImgYPad5 = imgYRec + (i + 3)*srcStride;
      pImgYPad6 = imgYRec + (i - 3)*srcStride;
      pImgYPad7 = imgYRec + (i + 4)*srcStride;
      pImgYPad8 = imgYRec + (i - 4)*srcStride;
      pImgYRec = imgYRecPost + startWidth;

      for (j = startWidth; j < endWidth; j++)
      {
        if (!bChroma)
        {
          Int varIndMod = selectTransposeVarInd(*(pImgYVar++), &transpose);
          coef = m_filterCoeffShort[varIndMod];
        }
        pixelInt = 0;

        pImg0 = pImgYPad + j;
        pImg1 = pImgYPad1 + j;
        pImg2 = pImgYPad2 + j;
        pImg3 = pImgYPad3 + j;
        pImg4 = pImgYPad4 + j;
        pImg5 = pImgYPad5 + j;
        pImg6 = pImgYPad6 + j;

        if (transpose == 1)
        {
          pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
          pixelInt += coef[28] * (pImg5[1] + pImg6[-1]);
          pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
          pixelInt += coef[34] * (pImg5[-1] + pImg6[1]);

          pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
          pixelInt += coef[29] * (pImg3[1] + pImg4[-1]);
          pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
          pixelInt += coef[33] * (pImg3[-1] + pImg4[+1]);
          pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

          pixelInt += coef[12] * (pImg1[3] + pImg2[-3]);
          pixelInt += coef[21] * (pImg1[2] + pImg2[-2]);
          pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
          pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
          pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[23] * (pImg1[-2] + pImg2[+2]);
          pixelInt += coef[14] * (pImg1[-3] + pImg2[+3]);

          pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
          pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[0]);
        }
        else if (transpose == 3)
        {
          pixelInt += coef[36] * (pImgYPad7[j] + pImgYPad8[j]);
          pixelInt += coef[34] * (pImg5[1] + pImg6[-1]);
          pixelInt += coef[37] * (pImg5[0] + pImg6[0]);
          pixelInt += coef[28] * (pImg5[-1] + pImg6[1]);

          pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
          pixelInt += coef[33] * (pImg3[1] + pImg4[-1]);
          pixelInt += coef[38] * (pImg3[0] + pImg4[0]);
          pixelInt += coef[29] * (pImg3[-1] + pImg4[+1]);
          pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

          pixelInt += coef[14] * (pImg1[3] + pImg2[-3]);
          pixelInt += coef[23] * (pImg1[2] + pImg2[-2]);
          pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
          pixelInt += coef[39] * (pImg1[0] + pImg2[0]);
          pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[21] * (pImg1[-2] + pImg2[+2]);
          pixelInt += coef[12] * (pImg1[-3] + pImg2[+3]);

          pixelInt += coef[4] * (pImg0[+4] + pImg0[-4]);
          pixelInt += coef[13] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[22] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[31] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[0]);
        }
        else if (transpose == 2)
        {
          pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
          pixelInt += coef[14] * (pImg5[1] + pImg6[-1]);
          pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
          pixelInt += coef[12] * (pImg5[-1] + pImg6[1]);

          pixelInt += coef[24] * (pImg3[2] + pImg4[-2]);
          pixelInt += coef[23] * (pImg3[1] + pImg4[-1]);
          pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
          pixelInt += coef[21] * (pImg3[-1] + pImg4[+1]);
          pixelInt += coef[20] * (pImg3[-2] + pImg4[+2]);

          pixelInt += coef[34] * (pImg1[3] + pImg2[-3]);
          pixelInt += coef[33] * (pImg1[2] + pImg2[-2]);
          pixelInt += coef[32] * (pImg1[1] + pImg2[-1]);
          pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
          pixelInt += coef[30] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[29] * (pImg1[-2] + pImg2[+2]);
          pixelInt += coef[28] * (pImg1[-3] + pImg2[+3]);

          pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
          pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[0]);
        }
        else
        {
          pixelInt += coef[4] * (pImgYPad7[j] + pImgYPad8[j]);
          pixelInt += coef[12] * (pImg5[1] + pImg6[-1]);
          pixelInt += coef[13] * (pImg5[0] + pImg6[0]);
          pixelInt += coef[14] * (pImg5[-1] + pImg6[1]);

          pixelInt += coef[20] * (pImg3[2] + pImg4[-2]);
          pixelInt += coef[21] * (pImg3[1] + pImg4[-1]);
          pixelInt += coef[22] * (pImg3[0] + pImg4[0]);
          pixelInt += coef[23] * (pImg3[-1] + pImg4[+1]);
          pixelInt += coef[24] * (pImg3[-2] + pImg4[+2]);

          pixelInt += coef[28] * (pImg1[3] + pImg2[-3]);
          pixelInt += coef[29] * (pImg1[2] + pImg2[-2]);
          pixelInt += coef[30] * (pImg1[1] + pImg2[-1]);
          pixelInt += coef[31] * (pImg1[0] + pImg2[0]);
          pixelInt += coef[32] * (pImg1[-1] + pImg2[+1]);
          pixelInt += coef[33] * (pImg1[-2] + pImg2[+2]);
          pixelInt += coef[34] * (pImg1[-3] + pImg2[+3]);

          pixelInt += coef[36] * (pImg0[+4] + pImg0[-4]);
          pixelInt += coef[37] * (pImg0[+3] + pImg0[-3]);
          pixelInt += coef[38] * (pImg0[+2] + pImg0[-2]);
          pixelInt += coef[39] * (pImg0[+1] + pImg0[-1]);
          pixelInt += coef[40] * (pImg0[0]);
        }

        pixelInt = (Int)((pixelInt + offset) >> (numBitsMinus1));
        *(pImgYRec++) = ClipPel(pixelInt, clpRng);
      }
      imgYRecPost += dstStride;
    }
#endif
    break;

  case ALF_NUM_OF_FILTER_TYPES:
    THROW("ALF: wrong filter Type");
    break;
  }
}

Void AdaptiveLoopFilter::xFilterBlkAlf(PelBuf &recDst, const CPelBuf& recSrc, const Area& blk, AlfFilterType filtType)
{
  const Int srcStride = recSrc.stride;
  const Int dstStride = recDst.stride;
  const Pel* srcExt   = recSrc.buf;
        Pel* dst      = recDst.buf;

  Int varStepSizeWidth  = m_ALF_VAR_SIZE_W;
  Int varStepSizeHeight = m_ALF_VAR_SIZE_H;
  Int shiftHeight = (Int)(log((double)varStepSizeHeight)/log(2.0));
  Int shiftWidth  = (Int)(log((double)varStepSizeWidth)/log(2.0));

  Int i, j, pixelInt;
  Pel *pImgYVar;

  const Pel *pImgYPad, *pImgYPad1,*pImgYPad2,*pImgYPad3,*pImgYPad4,*pImgYPad5,*pImgYPad6;

  Short *coef = m_filterCoeffShort[0];
  const Pel *pImg0, *pImg1, *pImg2, *pImg3, *pImg4, *pImg5, *pImg6;
  Pel *pImgYRec;

  Int numBitsMinus1= m_NUM_BITS-1;
  Int offset = (1<<(m_NUM_BITS-2));

  Int startHeight = blk.y;
  Int endHeight   = blk.y + blk.height;
  Int startWidth  = blk.x;
  Int endWidth    = blk.x + blk.width;

  Pel* imgYRecPost = dst;
  imgYRecPost += startHeight * dstStride;

  const ClpRng& clpRng = m_clpRngs.comp[COMPONENT_Y];

  const Pel* imgYRec = srcExt;
  switch( filtType )
  {
  case ALF_FILTER_SYM_5:
    for (i =  startHeight; i < endHeight; i++)
    {
      pImgYVar  = m_imgY_var[i>>shiftHeight] + (startWidth>>shiftWidth);
      pImgYPad  = imgYRec +  i   *srcStride;
      pImgYPad1 = imgYRec + (i+1)*srcStride;
      pImgYPad2 = imgYRec + (i-1)*srcStride;
      pImgYPad3 = imgYRec + (i+2)*srcStride;
      pImgYPad4 = imgYRec + (i-2)*srcStride;

      pImgYRec = imgYRecPost + startWidth;

      for (j = startWidth; j < endWidth; j++)
      {
        if ((j&(varStepSizeWidth-1))==0) coef = m_filterCoeffShort[*(pImgYVar++)];
        pixelInt = coef[m_MAX_SQR_FILT_LENGTH-1];

        pImg0 = pImgYPad  + j;
        pImg1 = pImgYPad1 + j;
        pImg2 = pImgYPad2 + j;
        pImg3 = pImgYPad3 + j;
        pImg4 = pImgYPad4 + j;

        pixelInt += coef[22]* (pImg3[+0]+pImg4[+0]);

        pixelInt += coef[30]* (pImg1[+1]+pImg2[-1]);
        pixelInt += coef[31]* (pImg1[+0]+pImg2[+0]);
        pixelInt += coef[32]* (pImg1[-1]+pImg2[+1]);

        pixelInt += coef[38]* (pImg0[-2]+pImg0[+2]);
        pixelInt += coef[39]* (pImg0[-1]+pImg0[+1]);
        pixelInt += coef[40]* (pImg0[+0]);

        pixelInt=(Int)((pixelInt+offset) >> (numBitsMinus1));
        *(pImgYRec++) = ClipPel(pixelInt, clpRng );
      }
      imgYRecPost += dstStride;
    }
    break;

  case ALF_FILTER_SYM_7:
    for (i =  startHeight; i < endHeight; i++)
    {
      pImgYVar = m_imgY_var[i >> shiftHeight] + (startWidth >> shiftWidth);

      pImgYPad  = imgYRec + i    *srcStride;
      pImgYPad1 = imgYRec + (i+1)*srcStride;
      pImgYPad2 = imgYRec + (i-1)*srcStride;
      pImgYPad3 = imgYRec + (i+2)*srcStride;
      pImgYPad4 = imgYRec + (i-2)*srcStride;
      pImgYPad5 = imgYRec + (i+3)*srcStride;
      pImgYPad6 = imgYRec + (i-3)*srcStride;

      pImgYRec = imgYRecPost + startWidth;

      for (j = startWidth; j < endWidth; j++)
      {
        if ((j&(varStepSizeWidth - 1)) == 0) coef = m_filterCoeffShort[*(pImgYVar++)];
        pixelInt = coef[m_MAX_SQR_FILT_LENGTH - 1];

        pImg0 = pImgYPad  + j;
        pImg1 = pImgYPad1 + j;
        pImg2 = pImgYPad2 + j;
        pImg3 = pImgYPad3 + j;
        pImg4 = pImgYPad4 + j;
        pImg5 = pImgYPad5 + j;
        pImg6 = pImgYPad6 + j;

        pixelInt += coef[13]* (pImg5[0]+pImg6[0]);

        pixelInt += coef[21]* (pImg3[+1]+pImg4[-1]);
        pixelInt += coef[22]* (pImg3[+0]+pImg4[+0]);
        pixelInt += coef[23]* (pImg3[-1]+pImg4[+1]);

        pixelInt += coef[29]* (pImg1[+2]+pImg2[-2]);
        pixelInt += coef[30]* (pImg1[+1]+pImg2[-1]);
        pixelInt += coef[31]* (pImg1[+0]+pImg2[+0]);
        pixelInt += coef[32]* (pImg1[-1]+pImg2[+1]);
        pixelInt += coef[33]* (pImg1[-2]+pImg2[+2]);

        pixelInt += coef[37]* (pImg0[+3]+pImg0[-3]);
        pixelInt += coef[38]* (pImg0[+2]+pImg0[-2]);
        pixelInt += coef[39]* (pImg0[+1]+pImg0[-1]);
        pixelInt += coef[40]* (pImg0[+0]);

        pixelInt=(Int)((pixelInt+offset) >> (numBitsMinus1));
        *(pImgYRec++) = ClipPel(pixelInt, clpRng );
      }
      imgYRecPost += dstStride;
    }
    break;

  case ALF_FILTER_SYM_9:
    for (i =  startHeight; i < endHeight; i++)
    {
      pImgYVar = m_imgY_var[i >> shiftHeight] + (startWidth >> shiftWidth);

      pImgYPad  = imgYRec +  i   *srcStride;
      pImgYPad1 = imgYRec + (i+1)*srcStride;
      pImgYPad2 = imgYRec + (i-1)*srcStride;
      pImgYPad3 = imgYRec + (i+2)*srcStride;
      pImgYPad4 = imgYRec + (i-2)*srcStride;
      pImgYPad5 = imgYRec + (i+3)*srcStride;
      pImgYPad6 = imgYRec + (i-3)*srcStride;
      pImgYRec = imgYRecPost + startWidth;

      for (j = startWidth; j < endWidth; j++)
      {
        if ((j&(varStepSizeWidth - 1)) == 0) coef = m_filterCoeffShort[*(pImgYVar++)];
        pixelInt = coef[m_MAX_SQR_FILT_LENGTH - 1];

        pImg0 = pImgYPad  + j;
        pImg1 = pImgYPad1 + j;
        pImg2 = pImgYPad2 + j;
        pImg3 = pImgYPad3 + j;
        pImg4 = pImgYPad4 + j;
        pImg5 = pImgYPad5 + j;
        pImg6 = pImgYPad6 + j;

        pixelInt += coef[12]* (pImg5[1]+pImg6[-1]);
        pixelInt += coef[13]* (pImg5[0]+pImg6[0]);
        pixelInt += coef[14]* (pImg5[-1]+pImg6[1]);

        pixelInt += coef[20]* (pImg3[2]+pImg4[-2]);
        pixelInt += coef[21]* (pImg3[1]+pImg4[-1]);
        pixelInt += coef[22]* (pImg3[0]+pImg4[0]);
        pixelInt += coef[23]* (pImg3[-1]+pImg4[+1]);
        pixelInt += coef[24]* (pImg3[-2]+pImg4[+2]);

        pixelInt += coef[28]* (pImg1[3]+pImg2[-3]);
        pixelInt += coef[29]* (pImg1[2]+pImg2[-2]);
        pixelInt += coef[30]* (pImg1[1]+pImg2[-1]);
        pixelInt += coef[31]* (pImg1[0]+pImg2[0]);
        pixelInt += coef[32]* (pImg1[-1]+pImg2[+1]);
        pixelInt += coef[33]* (pImg1[-2]+pImg2[+2]);
        pixelInt += coef[34]* (pImg1[-3]+pImg2[+3]);

        pixelInt += coef[36]* (pImg0[+4]+pImg0[-4]);
        pixelInt += coef[37]* (pImg0[+3]+pImg0[-3]);
        pixelInt += coef[38]* (pImg0[+2]+pImg0[-2]);
        pixelInt += coef[39]* (pImg0[+1]+pImg0[-1]);
        pixelInt += coef[40]* (pImg0[0]);

        pixelInt=(Int)((pixelInt+offset) >> (numBitsMinus1));
        *(pImgYRec++) = ClipPel(pixelInt, clpRng );
      }
      imgYRecPost += dstStride;
    }
    break;

  case ALF_NUM_OF_FILTER_TYPES:
    THROW( "ALF: wrong filter Type");
    break;
  }
}


/**
 \param pcPicDec    picture before ALF
 \param pcPicRest   picture after  ALF
 \param qh          filter coefficient
 \param iTap        filter tap
 \param iColor      0 for Cb and 1 for Cr
 */
Void AdaptiveLoopFilter::xFrameChromaGalf(ALFParam* pcAlfParam, const PelUnitBuf& recExtBuf, PelUnitBuf& recUnitBuf, ComponentID compID)
{
  Int iHeight = recUnitBuf.get(compID).height;
  Int iWidth = recUnitBuf.get(compID).width;
  xFilterBlkGalf(recUnitBuf, recExtBuf, Area(0, 0, iWidth, iHeight), (AlfFilterType)0, compID);
}

Void AdaptiveLoopFilter::xFrameChromaAlf( ALFParam* pcAlfParam, const PelUnitBuf& recExtBuf, PelUnitBuf& recUnitBuf, ComponentID compID )
{
  Int iTap = pcAlfParam->tap_chroma;
  Int *qh  = pcAlfParam->coeff_chroma;

  Int i, x, y, value, N;//, offset;
  Pel PixSum[m_ALF_MAX_NUM_COEF];

  N      = (iTap*iTap+1)>>1;
  //offset = iTap>>1;
  Int iHeight = recUnitBuf.get(compID).height;
  Int iWidth  = recUnitBuf.get(compID).width;

  Pel* pDec   = recExtBuf.get(compID).buf;
  Int iDecStride = recExtBuf.get(compID).stride;

  Pel* pRest      = recUnitBuf.get(compID).buf;
  Int iRestStride = recUnitBuf.get(compID).stride;

  Int iShift = m_nInputBitDepth + m_nBitIncrement - 8;

  Pel* pTmpDec1, *pTmpDec2;
  Pel* pTmpPixSum;

  const ClpRng& clpRng( m_clpRngs.comp[compID] );

  switch(iTap)
  {
    case 5:
    {
      Int iJump = iDecStride - 4;
      pDec -= iDecStride*2;
      for (y = 0; y < iHeight; y++)
      {
        for (x = 0; x < iWidth; x++)
        {
          pTmpDec1 = pDec+x-2;
          pTmpDec2 = pTmpDec1+4+(4*iDecStride);
          pTmpPixSum = PixSum;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++;
          *pTmpPixSum = (*pTmpDec1);

          value = 0;
          for(i=0; i<N; i++)
          {
            value += qh[i]*PixSum[i];
          }
          // DC offset
          value += qh[N] << iShift;
          value = (value + m_ALF_ROUND_OFFSET)>>m_ALF_NUM_BIT_SHIFT;

          pRest[x] = (Pel) ClipPel( value, clpRng);
        }
        pRest += iRestStride;
        pDec += iDecStride;
      }
    }
      break;
    case 7:
    {
      Int iJump = iDecStride - 6;
      pDec -= iDecStride*3;
      for (y = 0; y < iHeight; y++)
      {
        for (x = 0; x < iWidth; x++)
        {
          pTmpDec1 = pDec+x-3;
          pTmpDec2 = pTmpDec1+6+(6*iDecStride);
          pTmpPixSum = PixSum;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++;
          *pTmpPixSum = (*pTmpDec1);

          value = 0;
          for(i=0; i<N; i++)
          {
            value += qh[i]*PixSum[i];
          }
          // DC offset
          value += qh[N] << iShift;
          value = (value + m_ALF_ROUND_OFFSET)>>m_ALF_NUM_BIT_SHIFT;

          pRest[x] = (Pel) ClipPel(value, clpRng);
        }
        pRest += iRestStride;
        pDec += iDecStride;
      }
    }
      break;
    case 9:
    {
      Int iJump = iDecStride - 8;
      pDec -= iDecStride*4;
      for (y = 0; y < iHeight; y++)
      {
        for (x = 0; x < iWidth; x++)
        {
          pTmpDec1 = pDec+x-4;
          pTmpDec2 = pTmpDec1+8+(8*iDecStride);
          pTmpPixSum = PixSum;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;

          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1 += iJump; pTmpDec2 -= iJump;


          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++; pTmpDec2--;
          *pTmpPixSum = ((*pTmpDec1) + (*pTmpDec2));
          pTmpPixSum++; pTmpDec1++;
          *pTmpPixSum =(*pTmpDec1);

          value = 0;
          for(i=0; i<N; i++)
          {
            value += qh[i]*PixSum[i];
          }
          // DC offset
          value += qh[N] << iShift;
          value = (value + m_ALF_ROUND_OFFSET)>>m_ALF_NUM_BIT_SHIFT;

          pRest[x] = (Pel) ClipPel(value, clpRng);
        }
        pRest += iRestStride;
        pDec += iDecStride;
      }
    }
      break;
    default:
      THROW( "ALF: CHROMA: wrong number of taps" );
      break;
  }
}

Void AdaptiveLoopFilter::refreshAlfTempPred()
{
  ::memset( m_storedAlfParaNum, 0, sizeof(m_storedAlfParaNum));
}


void AdaptiveLoopFilter::storeALFParam( ALFParam* pAlfParam, bool isISlice, unsigned tLayer, unsigned tLayerMax )
{
  for( int k = tLayer; k <= tLayerMax; k++)
  {
    unsigned idx = m_storedAlfParaNum[k] % C806_ALF_TEMPPRED_NUM;
    m_storedAlfParaNum[k]++;
    m_acStoredAlfPara[k][idx].temporalPredFlag = false;
    copyALFParam(&m_acStoredAlfPara[k][idx], pAlfParam, false);

    if( m_isGALF )
    {
      resetALFPredParam(&m_acStoredAlfPara[k][idx], isISlice );
    }
  }
}

void AdaptiveLoopFilter::loadALFParam( ALFParam* pAlfParam, unsigned idx, unsigned tLayer )
{
#if MCALF
  m_copy = false;
#endif
  copyALFParam(pAlfParam, &m_acStoredAlfPara[tLayer][idx], false);
#if MCALF
  m_copy = true;
#endif
}

